{
  "version": 3,
  "sources": ["../../gophergfx/src/math/Color.ts", "../../gophergfx/src/math/Vector2.ts", "../../gophergfx/src/math/MathUtils.ts", "../../gophergfx/src/core/Renderer.ts", "../../gophergfx/src/math/Vector3.ts", "../../gophergfx/src/math/Quaternion.ts", "../../gophergfx/src/math/Matrix4.ts", "../../gophergfx/src/math/BoundingBox3.ts", "../../gophergfx/src/math/BoundingSphere.ts", "../../gophergfx/src/core/Transform3.ts", "../../gophergfx/src/core/Camera.ts", "../../gophergfx/src/math/Matrix3.ts", "../../gophergfx/src/math/BoundingBox2.ts", "../../gophergfx/src/math/BoundingCircle.ts", "../../gophergfx/src/core/Transform2.ts", "../../gophergfx/src/lights/LightManager.ts", "../../gophergfx/src/core/Scene.ts", "../../gophergfx/src/loaders/AssetManager.ts", "../../gophergfx/src/core/GfxApp.ts", "../../gophergfx/src/materials/Material3.ts", "../../gophergfx/src/materials/ShaderProgram.ts", "../../gophergfx/src/materials/GouraudMaterial.ts", "../../gophergfx/src/geometry/3d/Mesh.ts", "../../gophergfx/src/geometry/3d/MeshInstance.ts", "../../gophergfx/src/geometry/3d/BoxMesh.ts", "../../gophergfx/src/geometry/3d/SphereMesh.ts", "../../gophergfx/src/geometry/3d/ConeMesh.ts", "../../gophergfx/src/geometry/3d/PlaneMesh.ts", "../../gophergfx/src/geometry/3d/CylinderMesh.ts", "../../gophergfx/src/materials/UnlitMaterial.ts", "../../gophergfx/src/materials/Material2.ts", "../../gophergfx/src/materials/LineMaterial.ts", "../../gophergfx/src/geometry/3d/Line3.ts", "../../gophergfx/src/geometry/3d/Axes3.ts", "../../gophergfx/src/geometry/2d/Shape.ts", "../../gophergfx/src/geometry/2d/ShapeInstance.ts", "../../gophergfx/src/geometry/2d/Rectangle.ts", "../../gophergfx/src/geometry/2d/Circle.ts", "../../gophergfx/src/geometry/2d/Line2.ts", "../../gophergfx/src/geometry/2d/Axes2.ts", "../../gophergfx/src/geometry/2d/Particles2.ts", "../../gophergfx/src/interaction/OrbitControls.ts", "../../gophergfx/src/interaction/FirstPersonControls.ts", "../../gophergfx/src/math/Plane.ts", "../../gophergfx/src/math/Ray.ts", "../../gophergfx/src/interaction/TransformWidget.ts", "../../gophergfx/src/lights/Light.ts", "../../gophergfx/src/lights/AmbientLight.ts", "../../gophergfx/src/lights/DirectionalLight.ts", "../../gophergfx/src/lights/PointLight.ts", "../../gophergfx/src/loaders/TextFileLoader.ts", "../../gophergfx/src/loaders/StringParser.ts", "../../gophergfx/src/loaders/ObjLoader.ts", "../../gophergfx/src/materials/PhongMaterial.ts", "../../gophergfx/src/materials/WireframeMaterial.ts", "../../gophergfx/src/materials/BoundingVolumeMaterial.ts", "../../gophergfx/src/materials/MorphMaterial.ts", "../../gophergfx/src/materials/Texture.ts", "../../gophergfx/src/materials/Text.ts", "../../gophergfx/src/math/LinearPath3.ts", "../../gophergfx/src/math/CurvePath3.ts", "../../gophergfx/src/math/LinearPath2.ts", "../../gophergfx/src/math/CurvePath2.ts"],
  "sourcesContent": ["export class Color\n{\n\n/**\n * Static properties representing standard colors\n */\n    public static readonly WHITE = new Color(1, 1, 1);\n    public static readonly BLACK = new Color(0, 0, 0);\n    public static readonly RED = new Color(1, 0 ,0);\n    public static readonly GREEN = new Color(0, 1 ,0);\n    public static readonly BLUE = new Color(0, 0, 1);\n    public static readonly YELLOW = new Color(1, 1, 0);\n    public static readonly PURPLE = new Color(1, 0, 1);\n    public static readonly CYAN = new Color(0, 1, 1);\n\n/**\n * Static method to create a copy of the given Color object\n * \n * @param color - The Color object to copy\n * @returns A copy of the given Color object\n */\n    public static copy(color: Color): Color\n    {\n        const newColor = new Color();\n        newColor.r = color.r;\n        newColor.g = color.g;\n        newColor.b = color.b;\n        newColor.a = color.a;\n        return newColor;\n    }\n\n/**\n * Static method to create a Color object from a hex string\n * \n * @param color - The hex string to convert to a Color object\n * @returns A new Color object created from the given hex string\n */\n    public static createFromString(color: string): Color\n    {\n        return new Color(\n            parseInt(color.substring(1,3), 16) / 255,\n            parseInt(color.substring(3,5), 16) / 255,\n            parseInt(color.substring(5,7), 16) / 255\n        );\n    }\n\n/**\n * Static method to interpolate between two Color objects\n * \n * @param c1 - The first Color object\n * @param c2 - The second Color object\n * @param alpha - The interpolation factor between the two objects\n * @returns The interpolated Color object\n */\n    public static lerp(c1: Color, c2: Color, alpha: number): Color\n    {\n        return new Color(\n            c1.r * (1-alpha) + c2.r * alpha,\n            c1.g * (1-alpha) + c2.g * alpha,\n            c1.b * (1-alpha) + c2.b * alpha,\n            c1.a * (1-alpha) + c2.a * alpha,\n        );\n    }\n\n/**\n * Static method to add two Color objects\n * \n * @param c1 - The first Color object\n * @param c2 - The second Color object\n * @returns The sum of the two Color objects\n */\n    public static add(c1: Color, c2: Color): Color\n    {\n        return new Color(c1.r + c2.r, c1.g + c2.g, c1.b + c2.b);\n    }\n\n/**\n * Static method to subtract two Color objects\n * \n * @param c1 - The first Color object\n * @param c2 - The second Color object\n * @returns The difference between the two Color objects\n */\n    public static subtract(c1: Color, c2: Color): Color\n    {\n        return new Color(c1.r - c2.r, c1.g - c2.g, c1.b - c2.b);\n    }\n\n/**\n * Static method to multiply two Color objects\n * \n * @param c1 - The first Color object\n * @param c2 - The second Color object\n * @returns The product of the two Color objects\n */\n    public static multiply(c1: Color, c2: Color): Color\n    {\n        return new Color(c1.r * c2.r, c1.g * c2.g, c1.b * c2.b);\n    }\n\n/**\n * Static method to divide two Color objects\n * \n * @param c1 - The first Color object\n * @param c2 - The second Color object\n * @returns The quotient of the two Color objects\n */\n    public static divide(c1: Color, c2: Color): Color\n    {\n        return new Color(c1.r / c2.r, c1.g / c2.g, c1.b / c2.b);\n    }\n\n/**\n * Static method to multiply a Color object by a scalar\n * \n * @param v - The Color object to multiply\n * @param n - The scalar to multiply by\n * @returns The product of the Color object and the scalar\n */\n    public static multiplyScalar(v: Color, n: number): Color\n    {\n        return new Color(v.r * n, v.g * n, v.b * n);\n    }\n\n/**\n * Static method that calculates the result of dividing a Color by a scalar\n * \n * @param v - The Color object to be divided\n * @param n - The scalar to divide the Color by\n * @returns The result of the division\n */\n    public static divideScalar(v: Color, n: number): Color\n    {\n        return new Color(v.r / n, v.g / n, v.b / n);\n    }\n\n    public r: number;\n    public g: number;\n    public b: number;\n    public a: number;\n\n/**\n * Constructor for creating a Color object\n * \n * @param r - The red component of the Color object\n * @param g - The green component of the Color object\n * @param b - The blue component of the Color object\n * @param a - The alpha component of the Color object\n */\n    constructor(r = 0, g = 0, b = 0, a = 1)\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n/**\n * Set the components of the Color object\n * \n * @param r - The red component\n * @param g - The green component\n * @param b - The blue component\n * @param a - The alpha component (optional, defaults to 1)\n */\n    set(r = 0, g = 0, b = 0, a = 1): void\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n/**\n * Set the components of the Color object from a hex string\n * \n * @param color - The hex string to convert to a Color object\n */\n    setFromString(color: string): void\n    {\n        this.r = parseInt(color.substring(1,3), 16) / 255;\n        this.g = parseInt(color.substring(3,5), 16) / 255;\n        this.b = parseInt(color.substring(5,7), 16) / 255;\n    }\n\n/**\n * Copy the components of a given Color object\n * \n * @param color - The Color object to copy\n */\n    copy(color: Color)\n    {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        this.a = color.a;\n    }\n\n/**\n * Create a clone of the Color object\n * \n * @returns A new Color object that is an exact copy of the original\n */\n    clone(): Color\n    {\n        return new Color(this.r, this.g, this.b, this.a);\n    }\n\n/**\n * Interpolate between two Color objects\n * \n * @param c1 - The first Color object\n * @param c2 - The second Color object\n * @param alpha - The interpolation factor between the two objects\n */\n    lerp(c1: Color, c2: Color, alpha: number): void\n    {\n        this.r = c1.r * (1-alpha) + c2.r * alpha;\n        this.g = c1.g * (1-alpha) + c2.g * alpha;\n        this.b = c1.b * (1-alpha) + c2.b * alpha;\n        this.a = c1.b * (1-alpha) + c2.a * alpha;\n    }\n\n/**\n * Add another Color object to the current one\n * \n * @param c - The Color object to add\n */\n    add(c: Color): void\n    {\n        this.r += c.r;\n        this.g += c.g;\n        this.b += c.b;\n    }\n\n/**\n * Subtract another Color object from the current one\n * \n * @param c - The Color object to subtract\n */\n    subtract(c: Color): void\n    {\n        this.r -= c.r;\n        this.g -= c.g;\n        this.b -= c.b;\n    }\n\n/**\n * Multiply the current Color object by another one\n * \n * @param c - The Color object to multiply by\n */\n    multiply(c: Color): void\n    {\n        this.r *= c.r;\n        this.g *= c.g;\n        this.b *= c.b;\n    }\n\n/**\n * Divide the current Color object by another one\n * \n * @param c - The Color object to divide by\n */\n    divide(c: Color): void\n    {\n        this.r /= c.r;\n        this.g /= c.g;\n        this.b /= c.b;\n    }\n\n/**\n * Multiply the current Color object by a scalar\n * \n * @param n - The scalar to multiply by\n */\n    multiplyScalar(n: number): void\n    {\n        this.r *= n;\n        this.g *= n;\n        this.b *= n;\n    }\n\n/**\n * Method that divides a Color object by a scalar\n * \n * @param n - The scalar to divide the Color object by\n */\n    divideScalar(n: number): void\n    {\n        this.r /= n;\n        this.g /= n;\n        this.b /= n;\n    }\n}", "import { Matrix3 } from './Matrix3'\n\nexport class Vector2\n{\n    public static readonly ZERO = new Vector2(0, 0);\n    public static readonly ONE = new Vector2(1, 1);\n    public static readonly UP = new Vector2(0, 1);\n    public static readonly DOWN = new Vector2(0, -1);\n    public static readonly LEFT = new Vector2(-1, 0);\n    public static readonly RIGHT = new Vector2(1, 0);\n    public static readonly X_AXIS = Vector2.RIGHT;\n    public static readonly Y_AXIS = Vector2.UP;\n\n    /**\n     * Copies the values of v into a new Vector2 object\n     * \n     * @param v - The Vector2 object to copy\n     * @returns A new Vector2 object with the same values as v\n     */\n    public static copy(v: Vector2): Vector2\n    {\n        return new Vector2(v.x, v.y);\n    }\n\n    /**\n     * Inverts the values of the Vector2 object \n     * \n     * @param v - The Vector2 object to invert\n     * @returns A new Vector2 object with the inverted values of v\n     */\n    public static inverse(v: Vector2): Vector2\n    {\n        return new Vector2(-v.x, -v.y);\n    }\n\n    /**\n     * Adds two Vector2 objects and returns the result in a new Vector2\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns A new Vector2 object with the result of the addition\n     */\n    public static add(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x + v2.x, v1.y + v2.y);\n    }\n\n    /**\n     * Subtracts two Vector2 objects and returns the result in a new Vector2\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns A new Vector2 object with the result of the subtraction\n     */\n    public static subtract(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x - v2.x, v1.y - v2.y);\n    }\n\n    /**\n     * Multiplies two Vector2 objects and returns the result in a new Vector2\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns A new Vector2 object with the result of the multiplication\n     */\n    public static multiply(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x * v2.x, v1.y * v2.y);\n    }\n\n    /**\n     * Divides two Vector2 objects and returns the result in a new Vector2\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns A new Vector2 object with the result of the division\n     */\n    public static divide(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x / v2.x, v1.y / v2.y);\n    }\n\n    /**\n     * Multiplies a Vector2 object by a scalar and returns the result in a new Vector2\n     * \n     * @param v - The Vector2 object\n     * @param n - The scalar\n     * @returns A new Vector2 object with the result of the multiplication\n     */\n    public static multiplyScalar(v: Vector2, n: number): Vector2\n    {\n        return new Vector2(v.x * n, v.y * n);\n    }\n\n    /**\n     * Divides a Vector2 object by a scalar and returns the result in a new Vector2\n     * \n     * @param v - The Vector2 object\n     * @param n - The scalar\n     * @returns A new Vector2 object with the result of the division\n     */\n    public static divideScalar(v: Vector2, n: number): Vector2\n    {\n        return new Vector2(v.x / n, v.y / n);\n    }\n\n    /**\n     * Computes the distance between two Vector2 objects\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns The distance between the two input vectors\n     */\n    public static distanceBetween(v1: Vector2, v2: Vector2): number\n    {\n        return v1.distanceTo(v2);\n    }\n\n    /**\n     * Computes the angle between two Vector2 objects\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns The angle between the two input vectors\n     */\n    public static angleBetween(v1: Vector2, v2: Vector2): number\n    {\n        return v1.angleBetween(v2);\n    }\n\n    /**\n     * Computes the angle between two Vector2 objects with sign \n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns The signed angle between the two input vectors\n     */\n    public static angleBetweenSigned(v1: Vector2, v2: Vector2): number\n    {\n        return v1.angleBetweenSigned(v2);\n    }\n\n    /**\n     * Computes the dot product of two Vector2 objects\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @returns The dot product of the two input vectors\n     */\n    public static dot(v1: Vector2, v2: Vector2): number\n    {\n        return v1.x*v2.x + v1.y*v2.y;\n    }\n\n    /**\n     * Returns the normalized Vector2 of an input Vector2\n     * \n     * @param v - The Vector2 object to be normalized\n     * @returns The normalized Vector2\n     */\n    public static normalize(v: Vector2): Vector2\n    {\n        const sizeSquared = v.x*v.x + v.y*v.y;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return new Vector2();\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        return new Vector2(v.x * scaleFactor, v.y * scaleFactor);\n    }\n\n    /**\n     * Rotates an input Vector2 by a given angle\n     * \n     * @param v - The Vector2 object to be rotated\n     * @param angle - The angle to rotate the Vector2 by\n     * @returns The rotated Vector2 \n     */\n    public static rotate(v: Vector2, angle: number): Vector2\n    {\n        return new Vector2(Math.cos(angle)*v.x - Math.sin(angle)*v.y, Math.sin(angle)*v.x + Math.cos(angle)*v.y); \n    }\n\n    /**\n     * Transforms an input Vector2 as a point by a given Matrix3\n     * \n     * @param v - The Vector2 object to be transformed\n     * @param m - The Matrix3 to transform the Vector2 by\n     * @returns The transformed Vector2\n     */\n    public static transform(v: Vector2, m: Matrix3): Vector2\n    {\n        const result = new Vector2(v.x, v.y);\n        result.transform(m);\n        return result;\n    }\n\n    /**\n     * Transforms an input Vector2 as a direction by a given Matrix3, ignoring the translation component\n     * \n     * @param v - The Vector2 object to be transformed\n     * @param m - The Matrix3 to transform the Vector2 by\n     * @returns The transformed Vector2\n     */\n    public static transformVector(v: Vector2, m: Matrix3): Vector2\n    {\n        const result = new Vector2(v.x, v.y);\n        result.transformVector(m);\n        return result;\n    }\n\n    /**\n     * Linearly interpolates between two Vector2 objects\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @param alpha - The interpolation value between 0 and 1\n     * @returns The interpolated Vector2\n     */\n    public static lerp(v1: Vector2, v2: Vector2, alpha: number): Vector2\n    {\n        return new Vector2(\n            v1.x * (1-alpha) + v2.x * alpha,\n            v1.y * (1-alpha) + v2.y * alpha\n        );\n    }\n\n    public x: number;\n    public y: number;\n    \n    /**\n     * Constructor for Vector2 class\n     * \n     * @param x - The initial x coordinate of the Vector2\n     * @param y - The initial y coordinate of the Vector2\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Sets the coordinates of the Vector2\n     * \n     * @param x - The new x coordinate of the Vector2\n     * @param y - The new y coordinate of the Vector2\n     */\n    set(x: number, y: number): void\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Copies the coordinates of a Vector2 object\n     * \n     * @param v - The Vector2 object to copy\n     */\n    copy(v: Vector2): void\n    {\n        this.x = v.x;\n        this.y = v.y;\n    }\n\n    /**\n     * Clones the Vector2 object\n     * \n     * @returns A new Vector2 object with the same coordinates as the original\n     */\n    clone(): Vector2\n    {\n        return new Vector2(this.x, this.y);\n    }\n\n    /**\n     * Checks if two Vector2 objects have the same coordinates\n     * \n     * @param v - The Vector2 object to compare\n     * @returns true if the coordinates of both Vector2 objects are the same, false otherwise\n     */\n    equals(v: Vector2): boolean\n    {\n        return this.x == v.x && this.y == v.y;\n    }\n\n    /**\n     * Adds the components of a given Vector2 to this Vector2\n     * \n     * @param v - The Vector2 to add to this Vector2\n     */\n    add(v: Vector2): void\n    {\n        this.x += v.x;\n        this.y += v.y;\n    }\n\n    /**\n     * Subtracts the components of a given Vector2 from this Vector2\n     * \n     * @param v - The Vector2 to subtract from this Vector2\n     */\n    subtract(v: Vector2): void\n    {\n        this.x -= v.x;\n        this.y -= v.y;\n    }\n\n    /**\n     * Multiplies the components of a given Vector2 by this Vector2\n     * \n     * @param v - The Vector2 to multiply this Vector2 by\n     */\n    multiply(v: Vector2): void\n    {\n        this.x *= v.x;\n        this.y *= v.y;\n    }\n\n    /**\n     * Divides the components of this Vector2 by a given Vector2\n     * \n     * @param v - The Vector2 to divide this Vector2 by\n     */\n    divide(v: Vector2): void\n    {\n        this.x /= v.x;\n        this.y /= v.y;\n    }\n\n    /**\n     * Multiplies the Vector2 by a scalar value\n     * \n     * @param n - The scalar value to multiply by\n     */\n    multiplyScalar(n: number): void\n    {\n        this.x *= n;\n        this.y *= n;\n    }\n\n    /**\n     * Divides the Vector2 by a scalar value\n     * \n     * @param n - The scalar value to divide by\n     */\n    divideScalar(n: number): void\n    {\n        this.x /= n;\n        this.y /= n;\n    }\n\n    /**\n     * Calculates the distance between this Vector2 and another Vector2\n     * \n     * @param v - The Vector2 to calculate the distance to\n     * @returns The distance between the two Vector2 objects\n     */\n    distanceTo(v: Vector2): number\n    {\n        return Math.sqrt(\n            (this.x - v.x) * (this.x - v.x) + \n            (this.y - v.y) * (this.y - v.y) \n        );\n    }\n\n    /**\n     * Sets the position of this Vector2 from a Matrix3\n     * \n     * @param m - The Matrix3 to get the position from\n     */\n    setPositionFromMatrix(m: Matrix3): void\n    {\n        this.x = m.mat[6];\n        this.y = m.mat[7];\n    }\n\n    /**\n     * Sets the scale of this Vector2 from a Matrix3\n     * \n     * @param m - The Matrix3 to get the scale from\n     */\n    setScaleFromMatrix(m: Matrix3): void\n    {\n        this.x = Math.sqrt(m.mat[0]*m.mat[0] + m.mat[1]*m.mat[1]);\n        this.y = Math.sqrt(m.mat[3]*m.mat[3] + m.mat[4]*m.mat[4]);\n    }\n\n    /**\n     * Transforms this Vector2 object with a Matrix3\n     * \n     * @param m - The Matrix3 to transform this Vector2 with\n     */\n    transform(m: Matrix3): void\n    {\n        const v = this.clone();\n        const w = 1 / (m.mat[2]*v.x + m.mat[5]*v.y + m.mat[8]);\n        this.x = w * (m.mat[0]*v.x + m.mat[3]*v.y + m.mat[6]);\n        this.y = w * (m.mat[1]*v.x + m.mat[4]*v.y + m.mat[7]);\n    }\n\n    /**\n     * Transforms this Vector2 object with a Matrix3, ignoring the translation component\n     * \n     * @param m - The Matrix3 to transform this Vector2 with\n     */\n    transformVector(m: Matrix3): void\n    {\n        const v = this.clone();\n        const w = 1 / (m.mat[2]*v.x + m.mat[5]*v.y);\n        this.x = w * (m.mat[0]*v.x + m.mat[3]*v.y);\n        this.y = w * (m.mat[1]*v.x + m.mat[4]*v.y);\n    }\n\n    /**\n     * Calculates the dot product of this Vector2 and another Vector2\n     * \n     * @param v - The Vector2 to calculate the dot product with\n     * @returns The dot product of the two Vector2 objects\n     */\n    dot(v: Vector2): number\n    {\n        return this.x*v.x + this.y*v.y;\n    }\n    \n    /**\n     * Calculates the length of this Vector2\n     * \n     * @returns The length of this Vector2\n     */\n    length(): number\n    {\n        return Math.sqrt(this.x*this.x + this.y*this.y);\n    }\n    \n    /**\n     * Normalizes this Vector2\n     */\n    normalize(): void\n    {\n        const sizeSquared = this.x*this.x + this.y*this.y;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return;\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        this.x *= scaleFactor;\n        this.y *= scaleFactor;\n    }\n\n    /**\n     * Inverts this Vector2\n     */\n    invert(): void\n    {\n        this.x = -this.x;\n        this.y = -this.y;\n    }\n\n    /**\n     * Calculates the angle between this Vector2 and another Vector2\n     * \n     * @param v - The Vector2 to calculate the angle between\n     * @returns The angle between the two Vector2 objects\n     */\n    angleBetween(v: Vector2): number\n    {\n        const v1Norm = Vector2.normalize(this);\n        const v2Norm = Vector2.normalize(v);\n\n        return Math.acos(v1Norm.dot(v2Norm));\n    }\n    \n    /**\n     * Calculates the signed angle between this Vector2 and another Vector2\n     * \n     * @param v - The Vector2 to calculate the angle between\n     * @returns The signed angle between the two Vector2 objects\n     */\n    angleBetweenSigned(v: Vector2): number\n    {\n        const v1Norm = Vector2.normalize(this);\n        const v2Norm = Vector2.normalize(v);\n\n        return Math.atan2(v2Norm.y,v2Norm.x) - Math.atan2(v1Norm.y, v1Norm.x)\n    }\n\n    /**\n     * Rotates this Vector2 by a given angle\n     * \n     * @param angle - The angle to rotate by in radians\n     */\n    rotate(angle: number): void\n    {\n        const x = this.x;\n        const y = this.y;\n        this.x = Math.cos(angle)*x - Math.sin(angle)*y;\n        this.y = Math.sin(angle)*x + Math.cos(angle)*y; \n    }\n\n    /**\n     * Calculates the linear interpolation between two Vector2 objects\n     * \n     * @param v1 - The first Vector2 object\n     * @param v2 - The second Vector2 object\n     * @param alpha - The interpolation value between 0 and 1\n     */\n    lerp(v1: Vector2, v2: Vector2, alpha: number): void\n    {\n        this.x = v1.x * (1-alpha) + v2.x * alpha;\n        this.y = v1.y * (1-alpha) + v2.y * alpha;\n    }\n}", "export class MathUtils\n{\n\n/**\n * Converts degrees to radians\n * \n * @param degrees - The degrees value to be converted\n * @returns The converted radians value\n */\n    public static degreesToRadians(degrees: number)\n    {\n        return degrees * Math.PI / 180;\n    }\n\n/**\n * Converts radians to degrees\n * \n * @param radians - The radians value to be converted\n * @returns The converted degrees value\n */\n    public static radiansToDegrees(radians: number)\n    {\n        return radians * 180 / Math.PI;\n    }\n\n/**\n * Rescales a value from one range to another\n * \n * @param value - The value to be rescaled\n * @param min - The minimum value of the original range\n * @param max - The maximum value of the original range\n * @param scaledMin - The minimum value of the scaled range\n * @param scaledMax - The maximum value of the scaled range\n * @returns The rescaled value\n */\n    public static rescale(value: number, min: number, max: number, scaledMin: number, scaledMax: number): number\n    {\n        return scaledMin + (scaledMax - scaledMin) * (value - min) / (max - min);\n    }\n\n/**\n * Clamps a value between a minimum and maximum value\n * \n * @param value - The value to be clamped\n * @param min - The minimum value\n * @param max - The maximum value\n * @returns The clamped value\n */\n    public static clamp(value: number, min: number, max: number): number\n    {\n        return Math.max(min, Math.min(max, value));\n    }\n\n/**\n * Performs linear interpolation between two values\n * \n * @param x - The first value\n * @param y - The second value\n * @param alpha - The interpolation factor\n * @returns The interpolated value\n */\n    public static lerp(x: number, y: number, alpha: number): number\n    {\n        return x * (1-alpha) + y * alpha;\n    }\n}", "import { Scene } from \"./Scene\";\nimport { Camera } from \"./Camera\";\nimport { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { MathUtils } from \"../math/MathUtils\";\n\nexport enum Viewport\n{\n    FIT,\n    CROP,\n    STRETCH\n}\n\n/**\n * Creates a renderer object to use for drawing to a WebGL2 canvas\n */\nexport class Renderer\n{\n    /**\n     * The background color of the viewport\n     */\n    public background: Color;\n\n    /**\n     * The viewport of the renderer\n     */\n    public viewport: Viewport;\n\n    /**\n     * The canvas element that the renderer draws to\n     */\n    public readonly gfxCanvas: HTMLCanvasElement;\n\n    /**\n     * The WebGL2 context used by the renderer\n     */\n    public readonly gl: WebGL2RenderingContext;\n\n    /**\n     * Creates a WebGL context for the given canvas element\n     *\n     * @param enableStencilBuffer - Whether to enable the stencil buffer for the WebGL context\n     */\n    constructor(enableStencilBuffer = false)\n    {\n        this.gfxCanvas = document.getElementById(\"gfxCanvas\") as HTMLCanvasElement;\n        if(!this.gfxCanvas)\n        {\n            alert(\"Unable to find gfxCanvas.\");\n        }\n\n        this.gfxCanvas.width = window.innerWidth;\n        this.gfxCanvas.height = window.innerHeight;\n\n        // Initialize the GL context\n        // Disabling alpha in the back buffer prevents texture blending issues\n        // due to the way WebGL composites the canvas with the body background\n        const gl = this.gfxCanvas.getContext(\"webgl2\", {alpha: false, stencil: enableStencilBuffer})!;\n        if(!gl) \n        {\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n        }\n        this.gl = gl!;\n\n        // depth testing\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthFunc(gl.LEQUAL);\n\n        // back face culling\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.BACK);\n        \n        // texturing with transparency\n        gl.enable(this.gl.BLEND) ;\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n        this.background = new Color();\n        this.viewport = Viewport.FIT;\n    }\n\n    /**\n     * Resizes the graphics canvas and adjusts the viewport to maintain the provided aspect ratio.\n     * @param width - The width of the graphics canvas in pixels.\n     * @param height - The height of the graphics canvas in pixels.\n     * @param aspectRatio - The aspect ratio of the graphics canvas.\n     */\n    resize(width: number, height: number, aspectRatio: number): void\n    {\n        this.gfxCanvas.width = width;\n        this.gfxCanvas.height = height;\n\n        if(this.viewport == Viewport.FIT)\n        {\n            // Resize and center the viewport to preserve the aspect ratio\n            if(aspectRatio > window.innerWidth / window.innerHeight)\n            {\n                this.gl.viewport(\n                    0, \n                    (window.innerHeight - window.innerWidth / aspectRatio) / 2, \n                    window.innerWidth, \n                    window.innerWidth / aspectRatio\n                );\n            }\n            else\n            {\n                this.gl.viewport(\n                    (window.innerWidth - window.innerHeight * aspectRatio) / 2, \n                    0, \n                    window.innerHeight * aspectRatio, \n                    window.innerHeight\n                );\n            }\n        }\n        else if(this.viewport == Viewport.CROP)\n        {\n            // Resize and center the viewport to crop within the window\n            if(aspectRatio > window.innerWidth / window.innerHeight)\n            {\n                this.gl.viewport(\n                    (window.innerWidth - window.innerHeight * aspectRatio) / 2, \n                    0, \n                    window.innerHeight * aspectRatio, \n                    window.innerHeight\n                );\n            }\n            else\n            {\n                this.gl.viewport(\n                    0, \n                    (window.innerHeight - window.innerWidth / aspectRatio) / 2, \n                    window.innerWidth, \n                    window.innerWidth / aspectRatio\n                );\n            }\n        }\n        else\n        {\n            // Resize the viewport fill the entire entire window\n            // This does not preserve the aspect ratio\n            this.gl.viewport(\n                0,\n                0, \n                window.innerWidth, \n                window.innerHeight\n            );\n        }\n    }\n\n    /**\n     * Draws the scene using the provided camera.\n     * @param scene - The scene to draw.\n     * @param camera - The camera used to draw the scene.\n     */\n    render(scene: Scene, camera: Camera): void\n    {\n        if(camera.projectionMatrixDirty)\n        {\n            this.resize(this.gfxCanvas.width, this.gfxCanvas.height, camera.getAspectRatio());\n            camera.projectionMatrixDirty = false;\n        }\n\n        this.gl.clearColor(this.background.r, this.background.g, this.background.b, this.background.a);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); \n        \n        scene.draw(camera);\n    }\n\n    /**\n     * Gets the normalized device coordinates from the provided mouse coordinates. \n     * @param mouseX - The x coordinate of the mouse.\n     * @param mouseY - The y coordinate of the mouse.\n     * @returns The normalized device coordinates.\n     */\n    getNormalizedDeviceCoordinates(mouseX: number, mouseY: number): Vector2\n    {\n        const viewport = this.gl.getParameter(this.gl.VIEWPORT) as Int32Array;\n        return new Vector2(\n            MathUtils.clamp((mouseX - viewport[0]) / viewport[2] * 2 - 1, -1, 1),\n            MathUtils.clamp((mouseY - viewport[1]) / viewport[3] * -2 + 1, -1, 1)\n        );\n    }\n}", "import { Matrix4 } from './Matrix4'\nimport { Quaternion } from './Quaternion';\n\nexport class Vector3\n{\n    /**\n     * A Vector3 object with all zero values\n     */\n    public static readonly ZERO = new Vector3(0, 0, 0);\n\n    /**\n     * A Vector3 object with all one values\n     */\n    public static readonly ONE = new Vector3(1, 1, 1);\n\n    /**\n     * A Vector3 object that points up\n     */\n    public static readonly UP = new Vector3(0, 1, 0);\n\n    /**\n     * A Vector3 object that points down\n     */\n    public static readonly DOWN = new Vector3(0, -1, 0);\n\n    /**\n     * A Vector3 object that points left\n     */\n    public static readonly LEFT = new Vector3(-1, 0, 0);\n\n    /**\n     * A Vector3 object that points right\n     */\n    public static readonly RIGHT = new Vector3(1, 0, 0);\n\n    /**\n     * A Vector3 object that points forward\n     */\n    public static readonly FORWARD = new Vector3(0, 0, -1);\n\n    /**\n     * A Vector3 object that points backward\n     */\n    public static readonly BACK = new Vector3(0, 0, 1);\n\n    /**\n     * A Vector3 object that points along the x-axis\n     */\n    public static readonly X_AXIS = Vector3.RIGHT;\n\n    /**\n     * A Vector3 object that points along the y-axis\n     */\n    public static readonly Y_AXIS = Vector3.UP;\n\n    /**\n     * A Vector3 object that points along the z-axis\n     */\n    public static readonly Z_AXIS = Vector3.FORWARD;\n\n    /**\n     * Copies the values of a Vector3 object\n     * \n     * @param v - The Vector3 object to copy\n     * @returns A new Vector3 object with the same x, y, and z values as the original\n     */\n    public static copy(v: Vector3): Vector3\n    {\n        return new Vector3(v.x, v.y, v.z);\n    }\n\n    /**\n     * Inverts the direction of a Vector3 object\n     * \n     * @param v - The Vector3 object to invert\n     * @returns A new Vector3 object with the opposite direction of the original\n     */\n    public static inverse(v: Vector3): Vector3\n    {\n        return new Vector3(-v.x, -v.y, -v.z);\n    }\n\n    /**\n     * Adds two Vector3 objects together\n     * \n     * @param v1 - The first Vector3 object\n     * @param v2 - The second Vector3 object\n     * @returns A new Vector3 object with the x, y, and z values equal to the sum of the corresponding values of the input vectors\n     */\n    public static add(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\n    }\n\n    /**\n     * Subtracts two Vector3 objects\n     * \n     * @param v1 - The Vector3 object to subtract from\n     * @param v2 - The Vector3 object to subtract\n     * @returns A new Vector3 object with the x, y, and z values equal to the difference of the corresponding values of the input vectors\n     */\n    public static subtract(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);\n    }\n\n    /**\n     * Multiply two Vector3 objects\n     * \n     * @param v1 - The first Vector3 object\n     * @param v2 - The second Vector3 object\n     * @returns A new Vector3 object with the x, y, and z values equal to the product of the corresponding values of the input vectors\n     */\n    public static multiply(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z);\n    }\n\n    /**\n     * Divide two Vector3 objects\n     * \n     * @param v1 - The Vector3 object to divide\n     * @param v2 - The Vector3 object to divide by\n     * @returns A new Vector3 object with the x, y, and z values equal to the quotient of the corresponding values of the input vectors\n     */\n    public static divide(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x / v2.x, v1.y / v2.y, v1.z / v2.z);\n    }\n\n    /**\n     * Computes the dot product of two Vector3 objects\n     * \n     * @param v1 - The first Vector3 object\n     * @param v2 - The second Vector3 object\n     * @returns The dot product of the two input vectors\n     */\n    public static dot(v1: Vector3, v2: Vector3): number\n    {\n        return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;\n    }\n\n    /**\n     * Computes the cross product of two Vector3 objects\n     * \n     * @param v1 - The first Vector3 object\n     * @param v2 - The second Vector3 object\n     * @returns A new Vector3 object representing the cross product of the two input vectors\n     */\n    public static cross(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(\n            v1.y * v2.z - v1.z * v2.y,\n            v1.z * v2.x - v1.x * v2.z,\n            v1.x * v2.y - v1.y * v2.x\n        );\n    }\n\n    /**\n     * Multiplies a Vector3 object with a scalar value\n     * \n     * @param v - The Vector3 object\n     * @param n - The scalar value\n     * @returns A new Vector3 object with the x, y, and z values multiplied by the scalar value\n     */\n    public static multiplyScalar(v: Vector3, n: number): Vector3\n    {\n        return new Vector3(v.x * n, v.y * n, v.z * n);\n    }\n\n    /**\n     * Divides a Vector3 object by a scalar value\n     * \n     * @param v - The Vector3 object\n     * @param n - The scalar value\n     * @returns A new Vector3 object with the x, y, and z values divided by the scalar value\n     */\n    public static divideScalar(v: Vector3, n: number): Vector3\n    {\n        return new Vector3(v.x / n, v.y / n, v.z / n);\n    }\n\n    /**\n     * Normalizes a Vector3 object\n     * \n     * @param v - The Vector3 object\n     * @returns A new Vector3 object with a magnitude of 1, pointing in the same direction as the original vector\n     *          If the original vector is a zero vector, returns a new zero vector\n     */\n    public static normalize(v: Vector3): Vector3\n    {\n        const sizeSquared = v.x*v.x + v.y*v.y + v.z*v.z;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return new Vector3();\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        return new Vector3(v.x * scaleFactor, v.y * scaleFactor, v.z * scaleFactor);\n    }\n\n    /**\n     * Computes the angle in radians between two Vector3 objects\n     * \n     * @param v1 - The first Vector3 object\n     * @param v2 - The second Vector3 object\n     * @returns The angle in radians between the two input vectors\n     */\n    public static angleBetween(v1: Vector3, v2: Vector3): number\n    {\n        return v1.angleBetween(v2);\n    }\n\n    /**\n     * Computes the distance between two Vector3 objects\n     * \n     * @param v1 - The first Vector3 object\n     * @param v2 - The second Vector3 object\n     * @returns The distance between the two input vectors\n     */\n    public static distanceBetween(v1: Vector3, v2: Vector3): number\n    {\n        return v1.distanceTo(v2);\n    }\n\n    /**\n     * Rotates a Vector3 object by a Quaternion\n     *\n     * @param v - The Vector3 object to rotate\n     * @param q - The Quaternion object to rotate the Vector3 by\n     * @returns A new Vector3 object that represents the result of rotating v by q\n     */\n    public static rotate(v: Vector3, q: Quaternion): Vector3\n    {\n        // Extract the vector part of the quaternion\n        const u = new Vector3(q.x, q.y, q.z);\n\n        // vprime = 2.0f * dot(u, v) * u\n        const result = Vector3.multiplyScalar(u, 2 * u.dot(v));\n\n        // + (s*s - dot(u, u)) * v\n        result.add(Vector3.multiplyScalar(v, q.w * q.w - u.dot(u)));\n\n        const crossUV = Vector3.cross(u, v);\n        crossUV.multiplyScalar(2 * q.w);\n        result.add(crossUV);\n\n        return result;\n    }\n\n    /**\n     * Linearly interpolates between two Vector3 objects\n     *\n     * @param v1 - The first Vector3 object\n     * @param v2 - The second Vector3 object\n     * @param alpha - The interpolation value between 0 and 1\n     * @returns A new Vector3 object that represents the result of interpolating between v1 and v2\n     */\n    public static lerp(v1: Vector3, v2: Vector3, alpha: number): Vector3\n    {\n        return new Vector3(\n            v1.x * (1-alpha) + v2.x * alpha,\n            v1.y * (1-alpha) + v2.y * alpha,\n            v1.z * (1-alpha) + v2.z * alpha\n        );\n    }\n\n    /**\n     * Transforms a Vector3 object representing a point by a Matrix4\n     *\n     * @param v - The Vector3 object to transform\n     * @param m - The Matrix4 object to transform the Vector3 by\n     * @returns A new Vector3 object that represents the result of transforming point v by m\n     */\n    public static transform(v: Vector3, m: Matrix4): Vector3\n    {\n        const result = new Vector3(v.x, v.y, v.z);\n        result.transform(m);\n        return result;\n    }\n\n    /**\n     * Transforms a Vector3 object representing a direction by a Matrix4, ignoring the translation component\n     *\n     * @param v - The Vector3 object to transform\n     * @param m - The Matrix4 object to transform the Vector3 by\n     * @returns A new Vector3 object that represents the result of transforming direction v by m\n     */\n    public static transformVector(v: Vector3, m: Matrix4): Vector3\n    {\n        const result = new Vector3(v.x, v.y, v.z);\n        result.transformVector(m);\n        return result;\n    }\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    /**\n     * Constructs a Vector3 object from x, y, and z values\n     *\n     * @param x - The x value for the Vector3\n     * @param y - The y value for the Vector3\n     * @param z - The z value for the Vector3\n     */\n    constructor(x = 0, y = 0, z = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    /**\n     * Sets the x, y, and z values of a Vector3 object\n     *\n     * @param x - The x value to set\n     * @param y - The y value to set\n     * @param z - The z value to set\n     */\n    set(x: number, y: number, z: number): void\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    /**\n     * Copies a Vector3 object\n     *\n     * @param v - The Vector3 object to copy\n     */\n    copy(v: Vector3): void\n    {\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n    }\n\n    /**\n     * Creates a new Vector3 object with the same x, y, and z values as this Vector3\n     *\n     * @returns The cloned Vector3 object\n     */\n    clone(): Vector3\n    {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    /**\n     * Checks if this Vector3 is equal to the given Vector3\n     *\n     * @param v - The Vector3 object to compare to\n     * @returns A boolean value indicating if the Vector3 objects are equal\n     */\n    equals(v: Vector3): boolean\n    {\n        return this.x == v.x && this.y == v.y && this.z == v.z;\n    }\n\n    /**\n     * Adds the given Vector3 to this Vector3\n     *\n     * @param v - The Vector3 object to add\n     */\n    add(v: Vector3): void\n    {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n\n    /**\n     * Subtracts the given Vector3 from this Vector3\n     *\n     * @param v - The Vector3 object to subtract\n     */\n    subtract(v: Vector3): void\n    {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n\n    /**\n     * Multiplies this Vector3 by the given Vector3\n     *\n     * @param v - The Vector3 object to multiply\n     */\n    multiply(v: Vector3): void\n    {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n    }\n\n    /**\n     * Divides each component of the vector with that of another vector\n     *\n     * @param v - Vector to divide with\n     */\n    divide(v: Vector3): void\n    {\n        this.x /= v.x;\n        this.y /= v.y;\n        this.z /= v.z;\n    }\n\n    /**\n     * Compute the dot product of two Vector3 objects\n     * \n     * @param v - The other Vector3 object\n     * @returns The dot product of the two Vector3 objects\n     */\n    dot(v: Vector3): number\n    {\n        return this.x*v.x + this.y*v.y + this.z*v.z;\n    }\n\n    /**\n     * Computes the cross product of two Vector3s and stores the result in the original Vector3.\n     *\n     * @param v The Vector3 to compute the cross product with.\n     */\n    cross(v: Vector3): void\n    {\n        const crossProduct =  new Vector3(\n            this.y * v.z - this.z * v.y,\n            this.z * v.x - this.x * v.z,\n            this.x * v.y - this.y * v.x\n        );\n        this.copy(crossProduct);\n    }\n\n    /**\n     * Multiplies each component of the vector with a scalar value\n     *\n     * @param n - Scalar value to multiply with\n     */\n    multiplyScalar(n: number): void\n    {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n\n    /**\n     * Divides each component of the vector with a scalar value\n     *\n     * @param n - Scalar value to divide with\n     */\n    divideScalar(n: number): void\n    {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n\n    /**\n     * Calculates the length of a Vector3 object\n     *\n     * @returns The length of the Vector3 object\n     */\n    length(): number\n    {\n        return Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);\n    }\n\n    /**\n     * Normalizes a Vector3 object\n     *\n     */\n    normalize(): void\n    {\n        const sizeSquared = this.x*this.x + this.y*this.y + this.z*this.z;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return;\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        this.x *= scaleFactor;\n        this.y *= scaleFactor;\n        this.z *= scaleFactor;\n    }\n\n    /**\n     * Inverts a Vector3 object\n     *\n     */\n    invert(): void\n    {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n    }\n\n    /**\n     * Transforms this Vector3 instance as a point with a given Matrix4\n     *\n     * @param m - The Matrix4 to transform this Vector3\n     */\n    transform(m: Matrix4): void\n    {\n        const v = this.clone();\n        const w = 1 / (m.mat[3]*v.x + m.mat[7]*v.y + m.mat[11]*v.z + m.mat[15]);\n        this.x = w * (m.mat[0]*v.x + m.mat[4]*v.y + m.mat[8]*v.z + m.mat[12]);\n        this.y = w * (m.mat[1]*v.x + m.mat[5]*v.y + m.mat[9]*v.z + m.mat[13]);\n        this.z = w * (m.mat[2]*v.x + m.mat[6]*v.y + m.mat[10]*v.z + m.mat[14]);\n    }\n\n    /**\n     * Transforms this Vector3 instance as a direction with a given Matrix4, ignoring the translation component\n     *\n     * @param m - The Matrix4 to transform this Vector3\n     */\n    transformVector(m: Matrix4): void\n    {\n        const v = this.clone();\n        const w = 1 / (m.mat[3]*v.x + m.mat[7]*v.y + m.mat[11]*v.z);\n        this.x = w * (m.mat[0]*v.x + m.mat[4]*v.y + m.mat[8]*v.z);\n        this.y = w * (m.mat[1]*v.x + m.mat[5]*v.y + m.mat[9]*v.z);\n        this.z = w * (m.mat[2]*v.x + m.mat[6]*v.y + m.mat[10]*v.z);\n    }\n\n    /**\n     * Rotates this Vector3 instance by a given Quaternion\n     *\n     * @param q - The Quaternion to rotate this Vector3\n     */\n    rotate(q: Quaternion): void\n    {\n        this.copy(Vector3.rotate(this, q));\n    }\n\n    /**\n     * Computes the angle between this Vector3 and another Vector3\n     *\n     * @param v - The second Vector3\n     * @returns The angle between the two Vectors\n     */\n    angleBetween(v: Vector3): number\n    {\n        const v1Norm = Vector3.normalize(this);\n        const v2Norm = Vector3.normalize(v);\n\n        return Math.acos(v1Norm.dot(v2Norm));\n    }\n\n    /**\n     * Computes the distance between this Vector3 and another Vector3\n     *\n     * @param v - The second Vector3\n     * @returns The distance between the two Vectors\n     */\n    distanceTo(v: Vector3): number\n    {\n        return Math.sqrt(\n            (this.x - v.x) * (this.x - v.x) + \n            (this.y - v.y) * (this.y - v.y) +\n            (this.z - v.z) * (this.z - v.z) \n        );\n    }\n\n    /**\n     * Sets this Vector3's position to the provided Matrix4's position\n     *\n     * @param m - The Matrix4 to get the position from\n     */\n    setPositionFromMatrix(m: Matrix4): void\n    {\n        this.x = m.mat[12];\n        this.y = m.mat[13];\n        this.z = m.mat[14];\n    }\n\n    /**\n     * Sets this Vector3's scale to the provided Matrix4's scale\n     *\n     * @param m - The Matrix4 to get the scale from\n     */\n    setScaleFromMatrix(m: Matrix4): void\n    {\n        this.x = Math.sqrt(m.mat[0]*m.mat[0] + m.mat[1]*m.mat[1] + m.mat[2]*m.mat[2]);\n        this.y = Math.sqrt(m.mat[4]*m.mat[4] + m.mat[5]*m.mat[5] + m.mat[6]*m.mat[6]);\n        this.z = Math.sqrt(m.mat[8]*m.mat[8] + m.mat[9]*m.mat[9] + m.mat[10]*m.mat[10]);\n    }\n\n    /**\n     * Linearly interpolates between two Vector3s\n     *\n     * @param v1 - The starting Vector3\n     * @param v2 - The ending Vector3\n     * @param alpha - The interpolation amount (should be in the range [0, 1])\n     */\n    lerp(v1: Vector3, v2: Vector3, alpha: number): void\n    {\n        this.x = v1.x * (1-alpha) + v2.x * alpha;\n        this.y = v1.y * (1-alpha) + v2.y * alpha;\n        this.z = v1.z * (1-alpha) + v2.z * alpha;\n    }\n}", "import { Vector3 } from \"./Vector3\";\nimport { Matrix4 } from \"./Matrix4\";\n\nexport class Quaternion\n{\n    /**\n     * A static property representing the identity quaternion (0, 0, 0, 1)\n     */\n    public static readonly IDENTITY: Quaternion = new Quaternion();\n\n    /**\n     * Copies a Quaternion object\n     * \n     * @param q - The Quaternion object to copy\n     * @returns A new Quaternion object with the same values as q\n     */\n    public static copy(q: Quaternion): Quaternion\n    {\n        return new Quaternion(q.x, q.y, q.z, q.w);\n    }\n\n    /**\n     * Multiplies two Quaternion objects together\n     * This operation is not commutative, so order matters\n     * \n     * @param q1 - The first Quaternion object\n     * @param q2 - The second Quaternion object\n     * @returns A new Quaternion object representing the product of q1 and q2\n     */\n    public static multiply(q1: Quaternion, q2: Quaternion): Quaternion\n    {\n        const dest = new Quaternion();\n\n        dest.w = q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z;\n        dest.x = q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y;\n        dest.y = q1.w*q2.y + q1.y*q2.w + q1.z*q2.x - q1.x*q2.z;\n        dest.z = q1.w*q2.z + q1.z*q2.w + q1.x*q2.y - q1.y*q2.x;\n\n        return dest;\n    }\n\n    /**\n     * Premultiplies two Quaternion objects\n     * This operation is not commutative, so order matters\n     * \n     * @param q1 - The first Quaternion object\n     * @param q2 - The second Quaternion object\n     * @returns A new Quaternion object which is the result of the premultiplication of the two input Quaternion objects\n     */\n    public static premultiply(q1: Quaternion, q2: Quaternion): Quaternion\n    {\n        const dest = new Quaternion();\n\n        dest.w = q2.w*q1.w - q2.x*q1.x - q2.y*q1.y - q2.z*q1.z;\n        dest.x = q2.w*q1.x + q2.x*q1.w + q2.y*q1.z - q2.z*q1.y;\n        dest.y = q2.w*q1.y + q2.y*q1.w + q2.z*q1.x - q2.x*q1.z;\n        dest.z = q2.w*q1.z + q2.z*q1.w + q2.x*q1.y - q2.y*q1.x;\n\n        return dest;\n    }\n\n    /**\n     * Normalizes a Quaternion object\n     * \n     * @param q - The Quaternion object to normalize\n     * @returns A new Quaternion object with normalized values\n     */\n    public static normalize(q: Quaternion): Quaternion\n    {\n        const dest = q.clone();\n        dest.normalize();\n        return dest;\n    }\n\n    /**\n     * Inverts a Quaternion object\n     * \n     * @param q - The Quaternion object to invert\n     * @returns A new Quaternion object representing the inverse of q\n     */\n    public static inverse(q: Quaternion): Quaternion\n    {\n        const dest = q.clone();\n        dest.invert();\n        return dest;\n    }\n\n    /**\n     * Creates a new identity Quaternion object\n     * \n     * @returns A new Quaternion object representing the identity Quaternion (0, 0, 0, 1)\n     */\n    makeIdentity(): Quaternion\n    {\n        return new Quaternion(0, 0, 0, 1);\n    }\n\n    /**\n     * Creates a new Quaternion object representing a rotation around the x-axis\n     * \n     * @param angle - The angle to rotate by around the x-axis (in radians)\n     * @returns A new Quaternion object representing a rotation around the x-axis\n     */\n    public static makeRotationX(angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setRotationX(angle);\n        return dest;\n    }\n\n    /**\n     * Creates a new Quaternion object representing a rotation around the y-axis\n     * \n     * @param angle - The angle to rotate by around the y-axis (in radians)\n     * @returns A new Quaternion object representing a rotation around the y-axis\n     */\n    public static makeRotationY(angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setRotationY(angle);\n        return dest;\n    }\n\n    /**\n     * Creates a new Quaternion object representing a rotation around the z-axis\n     * \n     * @param angle - The angle to rotate by around the z-axis (in radians)\n     * @returns A new Quaternion object representing a rotation around the z-axis\n     */\n    public static makeRotationZ(angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setRotationZ(angle);\n        return dest;\n    }\n\n    /**\n     * Create a quaternion from a given axis and angle\n     * \n     * @param axis - The axis to rotate around\n     * @param angle - The angle of rotation\n     * @returns A new Quaternion\n     */\n    public static makeAxisAngle(axis: Vector3, angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setAxisAngle(axis, angle);\n        return dest;\n    }\n\n    /**\n     * Create a quaternion from given Euler angles\n     * \n     * @param x - The x-axis rotation angle\n     * @param y - The y-axis rotation angle\n     * @param z - The z-axis rotation angle\n     * @param order - The order of the rotations (defaults to 'YZX')\n     * @returns A new Quaternion\n     */\n    public static makeEulerAngles(x: number, y: number, z: number, order = 'YZX'): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setEulerAngles(x, y, z, order);\n        return dest;\n    }\n\n    /**\n     * Create a quaternion from a given Matrix4 object\n     * \n     * @param matrix - The Matrix4 object to use for creating the quaternion\n     * @returns A new Quaternion\n     */\n    public static makeMatrix(matrix: Matrix4): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setMatrix(matrix);\n        return dest;\n    }\n\n    /**\n     * Computes a Quaternion from two input Quaternions using spherical linear interpolation\n     * \n     * @param q1 - The first Quaternion\n     * @param q2 - The second Quaternion\n     * @param alpha - The interpolation factor\n     * @returns A new Quaternion representing the slerp between q1 and q2\n     */\n    public static slerp(q1: Quaternion, q2: Quaternion, alpha: number): Quaternion\n    {\n        const q = new Quaternion();\n        q.slerp(q1, q2, alpha);\n        return q;\n    }\n    \n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    /**\n     * Creates a new Quaternion object\n     * \n     * @param x - The x component of the Quaternion\n     * @param y - The y component of the Quaternion\n     * @param z - The z component of the Quaternion\n     * @param w - The w component of the Quaternion\n     */\n    constructor(x = 0, y = 0, z = 0, w = 1)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    /**\n     * Sets the quaternion to the given x, y, z, and w values\n     * \n     * @param x - The x value\n     * @param y - The y value\n     * @param z - The z value\n     * @param w - The w value\n     */\n    set(x: number, y: number, z: number, w: number): void\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    \n    /**\n     * Sets the quaternion to the identity quaternion\n     */\n    setIdentity(): void\n    {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w  = 1;\n    }\n\n    /**\n     * Sets the quaternion to a rotation around the x axis\n     * \n     * @param angle - The angle of rotation in radians\n     */\n    setRotationX(angle: number): void\n    {\n        this.w = Math.cos(angle / 2);\n        this.x = Math.sin(angle / 2);\n        this.y = 0;\n        this.z = 0;\n    }\n\n    /**\n     * Sets the quaternion to a rotation around the y axis\n     * \n     * @param angle - The angle of rotation in radians\n     */\n    setRotationY(angle: number): void\n    {\n        this.w = Math.cos(angle / 2);\n        this.x = 0;\n        this.y = Math.sin(angle / 2);\n        this.z = 0;\n    }\n\n    \n    /**\n     * Sets the quaternion to a rotation around the z axis\n     * \n     * @param angle - The angle of rotation in radians\n     */\n    setRotationZ(angle: number): void\n    {\n        this.w = Math.cos(angle / 2);\n        this.x = 0;\n        this.y = 0;\n        this.z = Math.sin(angle / 2);\n    }\n\n    /**\n     * Sets the quaternion values using a (normalized) axis and an angle in radians\n     * @param axis - The axis of rotation\n     * @param angle - The angle of rotation in radians\n     */\n    setAxisAngle(axis: Vector3, angle: number): void\n    {\n        // Based on the approached described here\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n        const sinAngle = Math.sin(angle / 2);\n\n        this.w = Math.cos(angle / 2);\n        this.x = sinAngle * axis.x;\n        this.y = sinAngle * axis.y;\n        this.z = sinAngle * axis.z;\n    }\n\n    /**\n     * Sets the quaternion values using Euler angles\n     * \n     * @param x - The x-axis rotation angle in radians\n     * @param y - The y-axis rotation angle in radians\n     * @param z - The z-axis rotation angle in radians\n     * @param order - The order in which the rotation angles are applied (defaults to 'YZX')\n     */\n    setEulerAngles(x: number, y: number, z: number, order = 'YZX'): void\n    {\n        // Based on the implementation in three.js\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) \n        {\n\t\t\tcase 'XYZ':\n\t\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\t\t}\n    }\n\n    /**\n     * Sets the quaternion from a rotation matrix\n     * \n     * @param matrix - The rotation matrix in homogeneous coordinates\n     */\n    setMatrix(matrix: Matrix4): void\n    {\n        // Based on implementation described here:\n        // https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n\n        const trace = matrix.mat[0] + matrix.mat[5] + matrix.mat[10]\n\n        if (trace > 0) \n        { \n            const s = Math.sqrt(trace + 1.0) * 2;  \n            this.w = 0.25 * s;\n            this.x = (matrix.mat[6] - matrix.mat[9]) / s;\n            this.y = (matrix.mat[8] - matrix.mat[2]) / s; \n            this.z = (matrix.mat[1] - matrix.mat[4]) / s; \n        } \n        else if ((matrix.mat[0] > matrix.mat[5]) && (matrix.mat[0] > matrix.mat[10]))\n        { \n            const s = Math.sqrt(1.0 + matrix.mat[0] - matrix.mat[5] - matrix.mat[10]) * 2; \n            this.w = (matrix.mat[6] - matrix.mat[9]) / s;\n            this.x = 0.25 * s;\n            this.y = (matrix.mat[4] + matrix.mat[1]) / s; \n            this.z = (matrix.mat[8] + matrix.mat[2]) / s; \n        } \n        else if (matrix.mat[5] > matrix.mat[10]) \n        { \n            const s = Math.sqrt(1.0 + matrix.mat[5] - matrix.mat[0] - matrix.mat[10]) * 2; \n            this.w = (matrix.mat[8] - matrix.mat[2]) / s;\n            this.x = (matrix.mat[4] + matrix.mat[1]) / s; \n            this.y = 0.25 * s;\n            this.z = (matrix.mat[9] + matrix.mat[6]) / s; \n        } \n        else \n        { \n            const s = Math.sqrt(1.0 + matrix.mat[10] - matrix.mat[0] - matrix.mat[5]) * 2; \n            this.w = (matrix.mat[1] - matrix.mat[4]) / s;\n            this.x = (matrix.mat[8] + matrix.mat[2]) / s;\n            this.y = (matrix.mat[9] + matrix.mat[6]) / s;\n            this.z = 0.25 * s;\n        }\n    }\n\n    /**\n     * Copies the values of another quaternion into this one\n     * \n     * @param q - The quaternion to copy\n     */\n    copy(q: Quaternion): void\n    {\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n        this.w = q.w;\n    }\n\n    /**\n     * Clones this quaternion\n     * \n     * @returns A new quaternion with the same values as this one\n     */\n    clone(): Quaternion\n    {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    /**\n     * Multiply this quaternion with the input quaternion\n     * This operation is not commutative, so order matters\n     * \n     * @param q - The quaternion to multiply with\n     */\n    multiply(q: Quaternion): void\n    {\n        this.copy(Quaternion.multiply(this, q));\n    }\n\n    /**\n     * Premultiply this quaternion with the input quaternion\n     * This operation is not commutative, so order matters\n     * \n     * @param q - The quaternion to premultiply with\n     */\n    premultiply(q: Quaternion): void\n    {\n        this.copy(Quaternion.multiply(q, this));\n    }\n\n    /**\n     * Normalize this quaternion\n     */\n    normalize(): void\n    {\n        const normalizeFactor = 1 / Math.sqrt(this.x * this.x + this.y * this.y +\n            this.z * this.z + this.w * this.w);\n\n        this.x *= normalizeFactor;\n        this.y *= normalizeFactor;\n        this.z *= normalizeFactor;\n        this.w *= normalizeFactor;\n    }\n\n    /**\n     * Inverts the Quaternion in place\n     */\n    invert(): void\n    {\n        const normalizeFactor = 1 / Math.sqrt(this.x * this.x + this.y * this.y +\n            this.z * this.z + this.w * this.w);\n\n        this.x *= -normalizeFactor;\n        this.y *= -normalizeFactor;\n        this.z *= -normalizeFactor;\n        this.w *= normalizeFactor;\n    }\n\n    /**\n     * Returns the inverse of this Quaternion\n     * \n     * @returns The inverse of this Quaternion\n     */\n    inverse(): Quaternion\n    {\n        return Quaternion.inverse(this);\n    }\n\n    /**\n     * Returns a 4x4 rotation matrix representation of this Quaternion\n     * \n     * @returns A 4x4 rotation matrix representation of this Quaternion\n     */\n    getMatrix(): Matrix4\n    {\n        // Based on implementation described at\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n        const sqw = this.w*this.w;\n        const sqx = this.x*this.x;\n        const sqy = this.y*this.y;\n        const sqz = this.z*this.z;\n\n        // invs (inverse square length) is only required if quaternion is not already normalised\n        const invs = 1 / (sqx + sqy + sqz + sqw);\n\n        const tmp1 = this.x*this.y;\n        const tmp2 = this.z*this.w;\n        const tmp3 = this.x*this.z;\n        const tmp4 = this.y*this.w;\n        const tmp5 = this.y*this.z;\n        const tmp6 = this.x*this.w;\n        \n        return Matrix4.fromRowMajor(\n            ( sqx - sqy - sqz + sqw)*invs, 2 * (tmp1 - tmp2)*invs, 2 * (tmp3 + tmp4)*invs, 0,\n            2 * (tmp1 + tmp2)*invs, (-sqx + sqy - sqz + sqw)*invs, 2 * (tmp5 - tmp6)*invs, 0,\n            2 * (tmp3 - tmp4)*invs, 2 * (tmp5 + tmp6)*invs, (-sqx - sqy + sqz + sqw), 0,\n            0, 0, 0, 1\n        );\n    }\n\n    /**\n     * Creates a quaternion that rotates the vector `eye` to point towards `target`\n     * \n     * @param eye - The vector representing the starting point\n     * @param target - The vector representing the target point\n     * @param up - The vector representing the up direction (defaults to Vector3.UP)\n     */\n    lookAt(eye: Vector3, target: Vector3, up = Vector3.UP): void\n    {\n        const z = Vector3.subtract(eye, target);\n        z.normalize();\n\n        const x = Vector3.cross(up, z);\n        x.normalize();\n\n        const y = Vector3.cross(z, x);\n        y.normalize();\n\n        const m = new Matrix4();\n        m.setRowMajor(\n            x.x, y.x, z.x, 0,\n            x.y, y.y, z.y, 0,\n            x.z, y.z, z.z, 0,\n            0, 0, 0, 1\n        );\n        this.setMatrix(m);\n    }\n\n    /**\n     * Interpolates between two quaternions, q1 and q2, based on the given `alpha` value\n     * \n     * @param q1 - The starting quaternion\n     * @param q2 - The ending quaternion\n     * @param alpha - The interpolation value (0-1)\n     */\n    slerp(q1: Quaternion, q2: Quaternion, alpha: number): void\n    {\n        // based on VRPN implementation\n        // https://github.com/vrpn/vrpn/blob/master/quat/quat.c\n        const temp = q1.clone();\n\n        let cosOmega = q1.x*q2.x + q1.y*q2.y + q1.z*q2.z + q1.w*q2.w;\n        let omega, sinOmega, startScale, endScale;\n\n        // If the above dot product is negative, it would be better to\n        // go between the negative of the initial and the final, so that\n        // we take the shorter path.  \n        if(cosOmega < 0)\n        {\n            cosOmega *= -1;\n            temp.x *= -1;\n            temp.y *= -1;\n            temp.z *= -1;\n            temp.w *= -1;\n        }\n\n        if((1 + cosOmega) > 0.00001)\n        {\n            // usual case\n            if((1 - cosOmega) > 0.00001)\n            {\n                omega = Math.acos(cosOmega);\n                sinOmega = Math.sin(omega);\n                startScale = Math.sin((1 - alpha) * omega) / sinOmega;\n                endScale = Math.sin(alpha * omega) / sinOmega;\n            }\n            // ends very close\n            else\n            {\n                startScale = 1 - alpha;\n                endScale = alpha;\n            }\n\n            this.x = startScale * temp.x + endScale * q2.x;\n            this.y = startScale * temp.y + endScale * q2.y;\n            this.z = startScale * temp.z + endScale * q2.z;\n            this.w = startScale * temp.w + endScale * q2.w;\n        }\n        // ends nearly opposite\n        else\n        {\n            this.x = -temp.y;\n            this.y = temp.x;\n            this.z = -temp.w;\n            this.w = temp.z;\n\n            startScale = Math.sin((0.5 - alpha) * Math.PI);\n            endScale = Math.sin(alpha * Math.PI);\n\n            this.x = startScale * temp.x + endScale * this.x;\n            this.y = startScale * temp.y + endScale * this.y;\n            this.z = startScale * temp.y + endScale * this.z;\n        }\n    }\n}", "import { Vector3 } from \"./Vector3\";\nimport { Quaternion } from \"./Quaternion\";\n\nexport class Matrix4\n{\n/**\n * Static field with the identity matrix\n */\n    public static readonly IDENTITY = new Matrix4();\n\n/**\n * Array of 16 numbers representing the elements in the Matrix4\n */\n    public mat: Array<number>;\n\n/**\n * Multiplies two Matrix4 objects and returns the result\n * \n * @param m1 - The first Matrix4 object\n * @param m2 - The second Matrix4 object\n * @returns The result of the multiplication of the two input matrices\n */\n    static multiply(m1: Matrix4, m2: Matrix4): Matrix4\n    {\n        const m = new Matrix4();\n        m.mat[0] = 0;\n        m.mat[5] = 0;\n        m.mat[10] = 0;\n        m.mat[15] = 0;\n\n        for (let r = 0; r < 4; r++) {\n            for (let c = 0; c < 4; c++) {\n                for (let i = 0; i < 4; i++) {\n                    m.mat[r*4+c] += m1.mat[r*4+i] * m2.mat[i*4+c];\n                }\n            }\n        }\n\n        return m;\n    }\n\n/**\n * Creates a new Matrix4 object with the same values as the input matrix\n * \n * @param m - The input Matrix4 object\n * @returns A new Matrix4 object with the same values as the input matrix\n */\n    static copy(m: Matrix4): Matrix4\n    {\n        const mat = new Matrix4();\n        mat.copy(m);\n        return mat;\n    }\n\n/**\n * Creates a new Matrix4 object from the given values in row-major order\n * \n * @param n1 - Element [0,0] in the matrix\n * @param n2 - Element [0,1] in the matrix\n * @param n3 - Element [0,2] in the matrix\n * @param n4 - Element [0,3] in the matrix\n * @param n5 - Element [1,0] in the matrix\n * @param n6 - Element [1,1] in the matrix\n * @param n7 - Element [1,2] in the matrix\n * @param n8 - Element [1,3] in the matrix\n * @param n9 - Element [2,0] in the matrix\n * @param n10 - Element [2,1] in the matrix\n * @param n11 - Element [2,2] in the matrix\n * @param n12 - Element [2,3] in the matrix\n * @param n13 - Element [3,0] in the matrix\n * @param n14 - Element [3,1] in the matrix\n * @param n15 - Element [3,2] in the matrix\n * @param n16 - Element [3,3] in the matrix\n * @returns A new Matrix4 object created from the given values\n */\n    public static fromRowMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setRowMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix4 object from the given values in column-major order\n * \n * @param n1 - Element [0,0] in the matrix\n * @param n2 - Element [1,0] in the matrix\n * @param n3 - Element [2,0] in the matrix\n * @param n4 - Element [3,0] in the matrix\n * @param n5 - Element [0,1] in the matrix\n * @param n6 - Element [1,1] in the matrix\n * @param n7 - Element [2,1] in the matrix\n * @param n8 - Element [3,1] in the matrix\n * @param n9 - Element [0,2] in the matrix\n * @param n10 - Element [1,2] in the matrix\n * @param n11 - Element [2,2] in the matrix\n * @param n12 - Element [3,2] in the matrix\n * @param n13 - Element [0,3] in the matrix\n * @param n14 - Element [1,3] in the matrix\n * @param n15 - Element [2,3] in the matrix\n * @param n16 - Element [3,3] in the matrix\n * @returns A new Matrix4 object created from the given values\n */\n    public static fromColumnMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setColumnMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix4 object with the identity matrix\n * \n * @returns A new Matrix4 object with the identity matrix\n */    \n    public static makeIdentity(): Matrix4\n    {\n        return Matrix4.fromRowMajor(\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Creates a new Matrix4 object for translation\n * \n * @param v - The Vector3 object representing the translation vector\n * @returns A new Matrix4 object for translation\n */    \n    public static makeTranslation(v: Vector3): Matrix4\n    {\n        return Matrix4.fromRowMajor(\n            1, 0, 0, v.x,\n            0, 1, 0, v.y,\n            0, 0, 1, v.z,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Creates a new Matrix4 object for rotation\n * \n * @param rotation - The Quaternion object representing the rotation vector\n * @returns A new Matrix4 object for rotation\n */    \n    public static makeRotation(rotation: Quaternion): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setRotation(rotation);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix4 object for rotation around the X axis\n * \n * @param angle - The angle of rotation around the X axis\n * @returns A new Matrix4 object for rotation around the X axis\n */    \n    public static makeRotationX(angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setRotationX(angle);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix4 object for rotation around the Y axis\n * \n * @param angle - The angle of rotation around the Y axis\n * @returns A new Matrix4 object for rotation around the Y axis\n */\n    public static makeRotationY(angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setRotationY(angle);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix4 object for rotation around the Z axis\n * \n * @param angle - The angle of rotation around the Z axis\n * @returns A new Matrix4 object for rotation around the Z axis\n */\n    public static makeRotationZ(angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setRotationZ(angle);\n        return matrix;\n    }\n\n\n/**\n * Creates a new Matrix4 object for rotation around an arbitrary axis\n * \n * @param axis - The Vector3 object representing the axis of rotation\n * @param angle - The angle of rotation around the axis\n * @returns A new Matrix4 object for rotation around an arbitrary axis\n */\n    public static makeAxisAngle(axis: Vector3, angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setAxisAngle(axis, angle);\n        return matrix;\n    }\n\n\n/**\n * Creates a new Matrix4 object for rotation using Euler angles\n * \n * @param x - The angle of rotation around the x axis\n * @param y - The angle of rotation around the y axis\n * @param z - The angle of rotation around the z axis\n * @param order - The order of the rotations (default is 'YZX')\n * @returns A new Matrix4 object for rotation using Euler angles\n */\n    public static makeEulerAngles(x: number, y: number, z: number, order = 'YZX'): Matrix4\n    {\n        const dest = new Matrix4();\n        dest.setEulerAngles(x, y, z, order);\n        return dest;\n    }\n\n/**\n * Creates a new Matrix4 object for scaling\n * \n * @param scale - The Vector3 object representing the scale vector\n * @returns A new Matrix4 object for scaling\n */\n    public static makeScale(scale: Vector3): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setScale(scale);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix4 object representing the combined transform of position, rotation and scale\n * \n * @param position - The Vector3 object representing the position\n * @param rotation - The Quaternion object representing the rotation\n * @param scale - The Vector3 object representing the scale\n * @returns A new Matrix4 object representing the combined transform of position, rotation and scale\n */\n    public static compose(position = Vector3.ZERO, rotation = Quaternion.IDENTITY, scale = Vector3.UP): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.compose(position, rotation, scale);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix4 object for the view matrix of a camera\n * \n * @param eye - The Vector3 object representing the position of the camera\n * @param target - The Vector3 object representing the target of the camera\n * @param up - The Vector3 object representing the up vector of the camera\n * @returns A new Matrix4 object for the view matrix of a camera\n */\n    public static lookAt(eye: Vector3, target: Vector3, up: Vector3): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.lookAt(eye, target, up);\n        return matrix;\n    }\n\n/**\n * Create an orthographic projection Matrix4 \n * \n * @param left - Left coordinate of the viewing volume\n * @param right - Right coordinate of the viewing volume\n * @param bottom - Bottom coordinate of the viewing volume\n * @param top - Top coordinate of the viewing volume\n * @param near - Near clipping plane of the viewing volume\n * @param far - Far clipping plane of the viewing volume\n * @returns A Matrix4 representing an orthographic projection\n */\n    public static makeOrthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setOrthographic(left, right, bottom, top, near, far);\n        return matrix;\n    }\n\n/**\n * Create a perspective projection Matrix4 \n * \n * @param fov - Field of view of the projection in radians\n * @param aspectRatio - Aspect ratio of the viewport (width / height)\n * @param near - Near clipping plane of the viewing volume\n * @param far - Far clipping plane of the viewing volume\n * @returns A Matrix4 representing a perspective projection\n */\n    public static makePerspective(fov: number, aspectRatio: number, near: number, far: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setPerspective(fov, aspectRatio, near, far);\n        return matrix;\n    }\n\n/**\n * Create a frustum projection Matrix4 \n * \n * @param left - Left coordinate of the viewing volume\n * @param right - Right coordinate of the viewing volume\n * @param bottom - Bottom coordinate of the viewing volume\n * @param top - Top coordinate of the viewing volume\n * @param near - Near clipping plane of the viewing volume\n * @param far - Far clipping plane of the viewing volume\n * @returns A Matrix4 representing a frustum projection\n */\n    public static makeFrustum(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setFrustum(left, right, bottom, top, near, far);\n        return matrix;\n    }\n\n\n/**\n * Constructs a Matrix4 object with a 4x4 identity matrix\n */    \n    constructor()\n    {\n        this.mat = [ \n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        ];\n    }\n\n/**\n * Set the values of the Matrix4 in column-major order\n * \n * @param n1 - Column 1, Row 1 value\n * @param n2 - Column 1, Row 2 value\n * @param n3 - Column 1, Row 3 value\n * @param n4 - Column 1, Row 4 value\n * @param n5 - Column 2, Row 1 value\n * @param n6 - Column 2, Row 2 value\n * @param n7 - Column 2, Row 3 value\n * @param n8 - Column 2, Row 4 value\n * @param n9 - Column 3, Row 1 value\n * @param n10 - Column 3, Row 2 value\n * @param n11 - Column 3, Row 3 value\n * @param n12 - Column 3, Row 4 value\n * @param n13 - Column 4, Row 1 value\n * @param n14 - Column 4, Row 2 value\n * @param n15 - Column 4, Row 3 value\n * @param n16 - Column 4, Row 4 value\n */\n    setColumnMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n2;\n        this.mat[2] = n3;\n        this.mat[3] = n4;\n        this.mat[4] = n5;\n        this.mat[5] = n6;\n        this.mat[6] = n7;\n        this.mat[7] = n8;\n        this.mat[8] = n9;\n        this.mat[9] = n10;\n        this.mat[10] = n11;\n        this.mat[11] = n12;\n        this.mat[12] = n13;\n        this.mat[13] = n14;\n        this.mat[14] = n15;\n        this.mat[15] = n16;\n    }\n\n/**\n * Set the values of the Matrix4 in row-major order\n * \n * @param n1 - Column 1, Row 1 value\n * @param n2 - Column 1, Row 2 value\n * @param n3 - Column 1, Row 3 value\n * @param n4 - Column 1, Row 4 value\n * @param n5 - Column 2, Row 1 value\n * @param n6 - Column 2, Row 2 value\n * @param n7 - Column 2, Row 3 value\n * @param n8 - Column 2, Row 4 value\n * @param n9 - Column 3, Row 1 value\n * @param n10 - Column 3, Row 2 value\n * @param n11 - Column 3, Row 3 value\n * @param n12 - Column 3, Row 4 value\n * @param n13 - Column 4, Row 1 value\n * @param n14 - Column 4, Row 2 value\n * @param n15 - Column 4, Row 3 value\n * @param n16 - Column 4, Row 4 value\n */\n    setRowMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n5;\n        this.mat[2] = n9;\n        this.mat[3] = n13;\n        this.mat[4] = n2;\n        this.mat[5] = n6;\n        this.mat[6] = n10;\n        this.mat[7] = n14;\n        this.mat[8] = n3;\n        this.mat[9] = n7;\n        this.mat[10] = n11;\n        this.mat[11] = n15;\n        this.mat[12] = n4;\n        this.mat[13] = n8;\n        this.mat[14] = n12;\n        this.mat[15] = n16;\n    }\n\n\n/**\n * Copy the values of another Matrix4 into this one\n * \n * @param m - The Matrix4 object to copy from\n */\n    copy(m: Matrix4): void\n    {\n        for(let i=0; i < 16; i++)\n            this.mat[i] = m.mat[i];\n    }\n\n\n/**\n * Creates a new Matrix4 object with the same values as this Matrix4.\n * \n * @returns A new Matrix4 object with the same values as this Matrix4.\n */\n    clone(): Matrix4\n    {\n        const matrix = new Matrix4();\n        \n        for(let i=0; i < 16; i++)\n            matrix.mat[i] = this.mat[i];\n\n        return matrix;\n    }\n\n /** \n * Returns the element at the given row and column in this Matrix4.\n * \n * @param row - The row of the element to return.\n * @param col - The column of the element to return.\n * @returns The element at the given row and column.\n */   \n    element(row: number, col: number): number\n    {\n        return this.mat[col*4 + row];\n    }\n\n/**\n * Sets the element at the given row and column in this Matrix4.\n * \n * @param value - The value to set at the given row and column.\n * @param row - The row of the element to set.\n * @param col - The column of the element to set.\n */    \n    set(value: number, row: number, col: number): void\n    {\n       this.mat[col*4 + row] = value;\n    }\n\n/**\n * Multiplies this Matrix4 with the given Matrix4, and sets this Matrix4 to the result.\n * \n * @param m - The Matrix4 to multiply with.\n */\n    multiply(m: Matrix4): void\n    {\n        const temp = Matrix4.multiply(m, this);\n        this.copy(temp);\n    }\n\n/**\n * Multiplies the given Matrix4 with this Matrix4, and sets this Matrix4 to the result.\n * \n * @param m - The Matrix4 to multiply with.\n */    \n    premultiply(m: Matrix4): void\n    {\n        const temp = Matrix4.multiply(this, m);\n        this.copy(temp);\n    }\n\n/**\n * Sets this Matrix4 to the identity matrix.\n */    \n    setIdentity(): void\n    {\n        this.setRowMajor(\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Sets this Matrix4 to a translation matrix given a translation Vector3.\n * \n * @param v - The translation Vector3.\n */    \n    setTranslation(v: Vector3): void\n    {\n        this.setRowMajor(\n            1, 0, 0, v.x,\n            0, 1, 0, v.y,\n            0, 0, 1, v.z,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Sets this Matrix4 to a rotation matrix given a Quaternion.\n * \n * @param rotation - The Quaternion to construct the rotation matrix with.\n */\n    // based on http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n    setRotation(rotation: Quaternion): void\n    {\n        const sqw = rotation.w*rotation.w;\n        const sqx = rotation.x*rotation.x;\n        const sqy = rotation.y*rotation.y;\n        const sqz = rotation.z*rotation.z;\n\n        // invs (inverse square length) is only required if quaternion is not already normalised\n        const invs = 1 / (sqx + sqy + sqz + sqw);\n\n        const tmp1 = rotation.x*rotation.y;\n        const tmp2 = rotation.z*rotation.w;\n        const tmp3 = rotation.x*rotation.z;\n        const tmp4 = rotation.y*rotation.w;\n        const tmp5 = rotation.y*rotation.z;\n        const tmp6 = rotation.x*rotation.w;\n        \n        this.setRowMajor(\n            ( sqx - sqy - sqz + sqw)*invs, 2 * (tmp1 - tmp2)*invs, 2 * (tmp3 + tmp4)*invs, 0,\n            2 * (tmp1 + tmp2)*invs, (-sqx + sqy - sqz + sqw)*invs, 2 * (tmp5 - tmp6)*invs, 0,\n            2 * (tmp3 - tmp4)*invs, 2 * (tmp5 + tmp6)*invs, (-sqx - sqy + sqz + sqw), 0,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Sets this Matrix4 to a rotation matrix around the X axis with the given angle in radians.\n * \n * @param angle - The angle in radians.\n */\n    setRotationX(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n        \n        this.setRowMajor(\n            1, 0, 0, 0,\n            0, cosTheta, -sinTheta, 0,\n            0, sinTheta, cosTheta, 0,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Sets this Matrix4 to a rotation matrix around the Y axis with the given angle in radians.\n * \n * @param angle - The angle in radians.\n */\n    setRotationY(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n   \n        this.setRowMajor(\n            cosTheta, 0, sinTheta, 0,\n            0, 1, 0, 0,\n            -sinTheta, 0, cosTheta, 0,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Sets this Matrix4 to a rotation matrix around the Z axis with the given angle in radians.\n * \n * @param angle - The angle in radians.\n */    \n    setRotationZ(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n        this.setRowMajor(\n            cosTheta, -sinTheta, 0, 0,\n            sinTheta, cosTheta, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        );\n    }\n\n/**\n * Set the axis angle for this Matrix4 object\n * \n * @param axis - The Vector3 representing the axis\n * @param angle - The angle to set the axis to\n */    \n    setAxisAngle(axis: Vector3, angle: number): void\n    {\n        const c = Math.cos(angle);\n\t\tconst s = Math.sin(angle);\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\t\tthis.setRowMajor(\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n    }\n\n/**\n * Set the scale of this Matrix4 object\n * \n * @param scale - The Vector3 representing the scale to set\n */\n    setScale(scale: Vector3): void\n    {\n        this.setRowMajor(\n            scale.x, 0, 0, 0,\n            0, scale.y, 0, 0,\n            0, 0, scale.z, 0,\n            0, 0, 0, 1    \n        );\n    }\n\n/**\n * Gets the translation vector of this Matrix4 object\n * \n * @returns The Vector3 representing the translation vector\n */\n    getTranslation(): Vector3\n    {\n        return new Vector3(this.mat[12], this.mat[13], this.mat[14]);\n    }\n\n/**\n * Gets the rotation quaternion of this Matrix4 object\n * \n * @returns The Quaternion representing the rotation\n */\n    getRotation(): Quaternion\n    {\n        return Quaternion.makeMatrix(this);\n    }\n\n/**\n * Gets the scale vector of this Matrix4 object\n * \n * @returns The Vector3 representing the scale vector\n */\n    getScale(): Vector3\n    {\n        return new Vector3(\n            Math.sqrt(this.mat[0]*this.mat[0] + this.mat[1]*this.mat[1] + this.mat[2]*this.mat[2]),\n            Math.sqrt(this.mat[4]*this.mat[4] + this.mat[5]*this.mat[5] + this.mat[6]*this.mat[6]),\n            Math.sqrt(this.mat[8]*this.mat[8] + this.mat[9]*this.mat[9] + this.mat[10]*this.mat[10])\n        );\n    }\n\n/**\n * Sets an orthographic projection matrix on this Matrix4 object\n * \n * @param left - The leftmost coordinate\n * @param right - The rightmost coordinate\n * @param bottom - The bottom coordinate\n * @param top - The top coordinate\n * @param near - The near coordinate\n * @param far - The far coordinate\n */\n    setOrthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): void\n    {\n        this.setRowMajor(\n            2/(right-left), 0, 0, -(right+left)/(right-left),\n            0, 2/(top-bottom), 0, -(top+bottom)/(top-bottom),\n            0, 0, -2/(far-near), -(far+near)/(far-near),\n            0, 0, 0, 1\n        );\n    }\n\n\n/**\n * Sets a perspective projection matrix on this Matrix4 object\n * \n * @param fov - The field of view angle\n * @param aspectRatio - The aspect ratio of the view\n * @param near - The near coordinate\n * @param far - The far coordinate\n */\n    setPerspective(fov: number, aspectRatio: number, near: number, far: number): void\n    {\n        const yMax = near * Math.tan(fov * Math.PI / 360);\n        const xMax = yMax * aspectRatio;\n        this.setFrustum(-xMax, xMax, -yMax, yMax, near, far); \n    }\n\n/**\n * Sets a frustum projection matrix on this Matrix4 object\n * \n * @param left - The leftmost coordinate\n * @param right - The rightmost coordinate\n * @param bottom - The bottom coordinate\n * @param top - The top coordinate\n * @param near - The near coordinate\n * @param far - The far coordinate\n */\n    setFrustum(left: number, right: number, bottom: number, top: number, near: number, far: number): void\n    {\n        this.setRowMajor(\n            2*near/(right-left), 0, (right+left)/(right-left), 0,\n            0, 2*near/(top-bottom), (top+bottom)/(top-bottom), 0,\n            0, 0, -(far+near)/(far-near), -2*far*near/(far-near),\n            0, 0, -1, 0\n        );\n    }\n\n/**\n * Sets the Matrix4 object to a look-at transformation\n * \n * @param eye - The position of the eye\n * @param target - The target of the eye\n * @param up - The vector defining \"up\" (default Vector3.UP)\n */\n    lookAt(eye: Vector3, target: Vector3, up = Vector3.UP): void\n    {\n        const z = Vector3.subtract(eye, target);\n        z.normalize();\n\n        const x = Vector3.cross(up, z);\n        x.normalize();\n\n        const y = Vector3.cross(z, x);\n        y.normalize();\n\n        const rotation = Matrix4.fromRowMajor(\n            x.x, y.x, z.x, 0,\n            x.y, y.y, z.y, 0,\n            x.z, y.z, z.z, 0,\n            0, 0, 0, 1\n        );\n\n        const translation = Matrix4.makeTranslation(eye);\n        this.copy(Matrix4.multiply(rotation, translation));\n    }\n\n/**\n * Multiplies all elements of this Matrix4 object by a scalar\n * \n * @param x - The scalar to multiply by\n */\n    multiplyScalar(x: number): void\n    {\n        for(let i=0; i < 16; i++)\n            this.mat[i] *= x;\n    }\n\n/**\n * Computes the determinant of the Matrix4 object \n * \n * @returns The determinant of the Matrix4 object\n */    \n    // Code from http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    determinant(): number\n    {\n        const determinant = \n            this.mat[3] * this.mat[6] * this.mat[9] * this.mat[12]-\n            this.mat[2] * this.mat[7] * this.mat[9] * this.mat[12]-\n            this.mat[3] * this.mat[5] * this.mat[10] * this.mat[12]+\n            this.mat[1] * this.mat[7] * this.mat[10] * this.mat[12]+\n            this.mat[2] * this.mat[5] * this.mat[11] * this.mat[12]-\n            this.mat[1] * this.mat[6] * this.mat[11] * this.mat[12]-\n            this.mat[3] * this.mat[6] * this.mat[8] * this.mat[13]+\n            this.mat[2] * this.mat[7] * this.mat[8] * this.mat[13]+\n            this.mat[3] * this.mat[4] * this.mat[10] * this.mat[13]-\n            this.mat[0] * this.mat[7] * this.mat[10] * this.mat[13]-\n            this.mat[2] * this.mat[4] * this.mat[11] * this.mat[13]+\n            this.mat[0] * this.mat[6] * this.mat[11] * this.mat[13]+\n            this.mat[3] * this.mat[5] * this.mat[8] * this.mat[14]-\n            this.mat[1] * this.mat[7] * this.mat[8] * this.mat[14]-\n            this.mat[3] * this.mat[4] * this.mat[9] * this.mat[14]+\n            this.mat[0] * this.mat[7] * this.mat[9] * this.mat[14]+\n            this.mat[1] * this.mat[4] * this.mat[11] * this.mat[14]-\n            this.mat[0] * this.mat[5] * this.mat[11] * this.mat[14]-\n            this.mat[2] * this.mat[5] * this.mat[8] * this.mat[15]+\n            this.mat[1] * this.mat[6] * this.mat[8] * this.mat[15]+\n            this.mat[2] * this.mat[4] * this.mat[9] * this.mat[15]-\n            this.mat[0] * this.mat[6] * this.mat[9] * this.mat[15]-\n            this.mat[1] * this.mat[4] * this.mat[10] * this.mat[15]+\n            this.mat[0] * this.mat[5] * this.mat[10] * this.mat[15];\n\n        return determinant;\n    }\n\n/**\n * Calculates the inverse of a Matrix4 object\n * \n * @returns A Matrix4 object that is the inverse of the current Matrix4 object\n */\n    // Code from http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    inverse(): Matrix4\n    {\n        // Check for singular matrix\n        const determinant = this.determinant();\n        if (Math.abs(determinant) < 1e-8)\n            return new Matrix4();\n\n        const inverse = new Matrix4();\n\n        inverse.mat[0] = (this.mat[6]*this.mat[11]*this.mat[13] -\n            this.mat[7]*this.mat[10]*this.mat[13] +\n            this.mat[7]*this.mat[9]*this.mat[14] -\n            this.mat[5]*this.mat[11]*this.mat[14] -\n            this.mat[6]*this.mat[9]*this.mat[15] +\n            this.mat[5]*this.mat[10]*this.mat[15])/determinant;\n\n        inverse.mat[1] = (this.mat[3]*this.mat[10]*this.mat[13] -\n            this.mat[2]*this.mat[11]*this.mat[13] -\n            this.mat[3]*this.mat[9]*this.mat[14] +\n            this.mat[1]*this.mat[11]*this.mat[14] +\n            this.mat[2]*this.mat[9]*this.mat[15] -\n            this.mat[1]*this.mat[10]*this.mat[15])/determinant;\n        \n        inverse.mat[2] = (this.mat[2]*this.mat[7]*this.mat[13] -\n            this.mat[3]*this.mat[6]*this.mat[13] +\n            this.mat[3]*this.mat[5]*this.mat[14] -\n            this.mat[1]*this.mat[7]*this.mat[14] -\n            this.mat[2]*this.mat[5]*this.mat[15] +\n            this.mat[1]*this.mat[6]*this.mat[15])/determinant;\n        \n        inverse.mat[3] = (this.mat[3]*this.mat[6]*this.mat[9] -\n            this.mat[2]*this.mat[7]*this.mat[9] -\n            this.mat[3]*this.mat[5]*this.mat[10] +\n            this.mat[1]*this.mat[7]*this.mat[10] +\n            this.mat[2]*this.mat[5]*this.mat[11] -\n            this.mat[1]*this.mat[6]*this.mat[11])/determinant;\n\n        inverse.mat[4] = (this.mat[7]*this.mat[10]*this.mat[12] -\n            this.mat[6]*this.mat[11]*this.mat[12] -\n            this.mat[7]*this.mat[8]*this.mat[14] +\n            this.mat[4]*this.mat[11]*this.mat[14] +\n            this.mat[6]*this.mat[8]*this.mat[15] -\n            this.mat[4]*this.mat[10]*this.mat[15])/determinant;\n            \n        inverse.mat[5] = (this.mat[2]*this.mat[11]*this.mat[12] -\n            this.mat[3]*this.mat[10]*this.mat[12] +\n            this.mat[3]*this.mat[8]*this.mat[14] -\n            this.mat[0]*this.mat[11]*this.mat[14] -\n            this.mat[2]*this.mat[8]*this.mat[15] +\n            this.mat[0]*this.mat[10]*this.mat[15])/determinant;\n            \n        inverse.mat[6] = (this.mat[3]*this.mat[6]*this.mat[12] -\n            this.mat[2]*this.mat[7]*this.mat[12] -\n            this.mat[3]*this.mat[4]*this.mat[14] +\n            this.mat[0]*this.mat[7]*this.mat[14] +\n            this.mat[2]*this.mat[4]*this.mat[15] -\n            this.mat[0]*this.mat[6]*this.mat[15])/determinant;\n            \n        inverse.mat[7] = (this.mat[2]*this.mat[7]*this.mat[8] -\n            this.mat[3]*this.mat[6]*this.mat[8] +\n            this.mat[3]*this.mat[4]*this.mat[10] -\n            this.mat[0]*this.mat[7]*this.mat[10] -\n            this.mat[2]*this.mat[4]*this.mat[11] +\n            this.mat[0]*this.mat[6]*this.mat[11])/determinant;\n            \n        inverse.mat[8] = (this.mat[5]*this.mat[11]*this.mat[12] -\n            this.mat[7]*this.mat[9]*this.mat[12] +\n            this.mat[7]*this.mat[8]*this.mat[13] -\n            this.mat[4]*this.mat[11]*this.mat[13] -\n            this.mat[5]*this.mat[8]*this.mat[15] +\n            this.mat[4]*this.mat[9]*this.mat[15])/determinant;\n            \n        inverse.mat[9] = (this.mat[3]*this.mat[9]*this.mat[12] -\n            this.mat[1]*this.mat[11]*this.mat[12] -\n            this.mat[3]*this.mat[8]*this.mat[13] +\n            this.mat[0]*this.mat[11]*this.mat[13] +\n            this.mat[1]*this.mat[8]*this.mat[15] -\n            this.mat[0]*this.mat[9]*this.mat[15])/determinant;\n            \n        inverse.mat[10] = (this.mat[1]*this.mat[7]*this.mat[12] -\n            this.mat[3]*this.mat[5]*this.mat[12] +\n            this.mat[3]*this.mat[4]*this.mat[13] -\n            this.mat[0]*this.mat[7]*this.mat[13] -\n            this.mat[1]*this.mat[4]*this.mat[15] +\n            this.mat[0]*this.mat[5]*this.mat[15])/determinant;\n            \n        inverse.mat[11] = (this.mat[3]*this.mat[5]*this.mat[8] -\n            this.mat[1]*this.mat[7]*this.mat[8] -\n            this.mat[3]*this.mat[4]*this.mat[9] +\n            this.mat[0]*this.mat[7]*this.mat[9] +\n            this.mat[1]*this.mat[4]*this.mat[11] -\n            this.mat[0]*this.mat[5]*this.mat[11])/determinant;\n            \n        inverse.mat[12] = (this.mat[6]*this.mat[9]*this.mat[12] -\n            this.mat[5]*this.mat[10]*this.mat[12] -\n            this.mat[6]*this.mat[8]*this.mat[13] +\n            this.mat[4]*this.mat[10]*this.mat[13] +\n            this.mat[5]*this.mat[8]*this.mat[14] -\n            this.mat[4]*this.mat[9]*this.mat[14])/determinant;\n            \n        inverse.mat[13] = (this.mat[1]*this.mat[10]*this.mat[12] -\n            this.mat[2]*this.mat[9]*this.mat[12] +\n            this.mat[2]*this.mat[8]*this.mat[13] -\n            this.mat[0]*this.mat[10]*this.mat[13] -\n            this.mat[1]*this.mat[8]*this.mat[14] +\n            this.mat[0]*this.mat[9]*this.mat[14])/determinant;\n        \n        inverse.mat[14] = (this.mat[2]*this.mat[5]*this.mat[12] -\n            this.mat[1]*this.mat[6]*this.mat[12] -\n            this.mat[2]*this.mat[4]*this.mat[13] +\n            this.mat[0]*this.mat[6]*this.mat[13] +\n            this.mat[1]*this.mat[4]*this.mat[14] -\n            this.mat[0]*this.mat[5]*this.mat[14])/determinant;\n        \n        inverse.mat[15] = (this.mat[1]*this.mat[6]*this.mat[8] -\n            this.mat[2]*this.mat[5]*this.mat[8] +\n            this.mat[2]*this.mat[4]*this.mat[9] -\n            this.mat[0]*this.mat[6]*this.mat[9] -\n            this.mat[1]*this.mat[4]*this.mat[10] +\n            this.mat[0]*this.mat[5]*this.mat[10])/determinant;\n\n        return inverse;\n    }\n\n/**\n* Computes the inverse of the Matrix4 object and sets the values of the current object\n */\n    invert(): void\n    {\n        const inverseMatrix = this.inverse();\n        this.copy(inverseMatrix);\n    }\n\n    /**\n     * Transposes the Matrix4 object and returns a new Matrix4 object\n     * \n     * @returns A new Matrix4 object which is the transposed version of the current object\n     */\n    transpose(): Matrix4\n    {\n        return Matrix4.fromRowMajor(\n            this.mat[0], this.mat[1], this.mat[2], this.mat[3],\n            this.mat[4], this.mat[5], this.mat[6], this.mat[7],\n            this.mat[8], this.mat[9], this.mat[10], this.mat[11],\n            this.mat[12], this.mat[13], this.mat[14], this.mat[15]\n        );\n    }\n\n/**\n * Sets the matrix's euler angles according to the specified order\n * \n * @param x - The x-axis euler angle\n * @param y - The y-axis euler angle\n * @param z - The z-axis euler angle\n * @param order - The order in which the euler angles should be applied\n */\n    // based on the implementation in three.js\n    setEulerAngles(x: number, y: number, z: number, order = 'YZX'): void\n    {\n\t\tconst a = Math.cos(x)\n        const b = Math.sin(x);\n\t\tconst c = Math.cos(y);\n        const d = Math.sin(y);\n\t\tconst e = Math.cos(z);\n        const f = Math.sin(z);\n\n\t\tif (order == 'XYZ')\n        {\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tthis.mat[ 0 ] = c * e;\n\t\t\tthis.mat[ 4 ] = - c * f;\n\t\t\tthis.mat[ 8 ] = d;\n\n\t\t\tthis.mat[ 1 ] = af + be * d;\n\t\t\tthis.mat[ 5 ] = ae - bf * d;\n\t\t\tthis.mat[ 9 ] = - b * c;\n\n\t\t\tthis.mat[ 2 ] = bf - ae * d;\n\t\t\tthis.mat[ 6 ] = be + af * d;\n\t\t\tthis.mat[ 10 ] = a * c;\n\t\t} \n        else if(order == 'YXZ')\n        {\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tthis.mat[ 0 ] = ce + df * b;\n\t\t\tthis.mat[ 4 ] = de * b - cf;\n\t\t\tthis.mat[ 8 ] = a * d;\n\n\t\t\tthis.mat[ 1 ] = a * f;\n\t\t\tthis.mat[ 5 ] = a * e;\n\t\t\tthis.mat[ 9 ] = - b;\n\n\t\t\tthis.mat[ 2 ] = cf * b - de;\n\t\t\tthis.mat[ 6 ] = df + ce * b;\n\t\t\tthis.mat[ 10 ] = a * c;\n        }\n        else if(order == 'ZXY')\n        {\n            const ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n            this.mat[ 0 ] = ce - df * b;\n            this.mat[ 4 ] = - a * f;\n            this.mat[ 8 ] = de + cf * b;\n\n            this.mat[ 1 ] = cf + de * b;\n            this.mat[ 5 ] = a * e;\n            this.mat[ 9 ] = df - ce * b;\n\n            this.mat[ 2 ] = - a * d;\n            this.mat[ 6 ] = b;\n            this.mat[ 10 ] = a * c;\n\t\t} \n        else if(order === 'ZYX')\n        {\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tthis.mat[ 0 ] = c * e;\n\t\t\tthis.mat[ 4 ] = be * d - af;\n\t\t\tthis.mat[ 8 ] = ae * d + bf;\n\n\t\t\tthis.mat[ 1 ] = c * f;\n\t\t\tthis.mat[ 5 ] = bf * d + ae;\n\t\t\tthis.mat[ 9 ] = af * d - be;\n\n\t\t\tthis.mat[ 2 ] = - d;\n\t\t\tthis.mat[ 6 ] = b * c;\n\t\t\tthis.mat[ 10 ] = a * c;\n\t\t}\n        else if(order === 'YZX')\n        {\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tthis.mat[ 0 ] = c * e;\n\t\t\tthis.mat[ 4 ] = bd - ac * f;\n\t\t\tthis.mat[ 8 ] = bc * f + ad;\n\n\t\t\tthis.mat[ 1 ] = f;\n\t\t\tthis.mat[ 5 ] = a * e;\n\t\t\tthis.mat[ 9 ] = - b * e;\n\n\t\t\tthis.mat[ 2 ] = - d * e;\n\t\t\tthis.mat[ 6 ] = ad * f + bc;\n\t\t\tthis.mat[ 10 ] = ac - bd * f;\n\t\t} \n        else if(order === 'XZY') \n        {\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tthis.mat[ 0 ] = c * e;\n\t\t\tthis.mat[ 4 ] = - f;\n\t\t\tthis.mat[ 8 ] = d * e;\n\n\t\t\tthis.mat[ 1 ] = ac * f + bd;\n\t\t\tthis.mat[ 5 ] = a * e;\n\t\t\tthis.mat[ 9 ] = ad * f - bc;\n\n\t\t\tthis.mat[ 2 ] = bc * f - ad;\n\t\t\tthis.mat[ 6 ] = b * e;\n\t\t\tthis.mat[ 10 ] = bd * f + ac;\n\t\t}\n\n\t\t// bottom row\n\t\tthis.mat[ 3 ] = 0;\n\t\tthis.mat[ 7 ] = 0;\n\t\tthis.mat[ 11 ] = 0;\n\n\t\t// last column\n\t\tthis.mat[ 12 ] = 0;\n\t\tthis.mat[ 13 ] = 0;\n\t\tthis.mat[ 14 ] = 0;\n\t\tthis.mat[ 15 ] = 1;\n    }\n\n    \n/**\n * Compose a Matrix4 object from a position, rotation, and scale\n * \n * @param position - The position of the Matrix4 object (default Vector3.ZERO)\n * @param rotation - The rotation of the Matrix4 object (default Quaternion.IDENTITY)\n * @param scale - The scale of the Matrix4 object (default Vector3.ONE)\n */\n    compose(position = Vector3.ZERO, rotation = Quaternion.IDENTITY, scale = Vector3.ONE): void\n    {\n        this.setTranslation(position);\n        this.multiply(rotation.getMatrix());\n        this.multiply(Matrix4.makeScale(scale));\n    }\n\n/**\n * Decompose a Matrix4 object into a position, rotation, and scale\n * \n * @returns A tuple containing the position, rotation, and scale of the Matrix4 object\n */\n    decompose(): [Vector3, Quaternion, Vector3]\n    {\n        const position = new Vector3();\n        const rotation = new Quaternion();\n        const scale = new Vector3();\n\n        position.setPositionFromMatrix(this);\n        scale.setScaleFromMatrix(this);\n\n        const rotationMatrix = new Matrix4();\n        rotationMatrix.mat[0] = this.mat[0] / scale.x;\n        rotationMatrix.mat[1] = this.mat[1] / scale.x;\n        rotationMatrix.mat[2] = this.mat[2] / scale.x;\n        rotationMatrix.mat[3] = 0;\n\n        rotationMatrix.mat[4] = this.mat[4] / scale.y;\n        rotationMatrix.mat[5] = this.mat[5] / scale.y;\n        rotationMatrix.mat[6] = this.mat[6] / scale.y;\n        rotationMatrix.mat[7] = 0;\n\n        rotationMatrix.mat[8] = this.mat[8] / scale.z;\n        rotationMatrix.mat[9] = this.mat[9] / scale.z;\n        rotationMatrix.mat[10] = this.mat[10] / scale.z;\n        rotationMatrix.mat[11] = 0;\n\n        rotationMatrix.mat[12] = 0;\n        rotationMatrix.mat[13] = 0;\n        rotationMatrix.mat[14] = 0;\n        rotationMatrix.mat[15] = 1;\n\n        rotation.setMatrix(rotationMatrix);\n\n        return [position, rotation, scale];\n    }\n}", "import { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\"\n\nexport class BoundingBox3 \n{\n    public min: Vector3;\n    public max: Vector3;\n\n/**\n * Constructs a BoundingBox3 object.\n */\n    constructor()\n    {\n        this.min = new Vector3();\n        this.max = new Vector3();\n    }\n\n/**\n * Copies the minimum and maximum values of another BoundingBox3 object into this one.\n * \n * @param box - The BoundingBox3 object to copy\n */\n    copy(box: BoundingBox3): void\n    {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n    }\n\n/**\n * Transforms the min and max properties of the BoundingBox3 object by scaling, rotating and translating the box\n * \n * @param translation - The Vector3 object representing the translation\n * @param rotation - The Quaternion object representing the rotation\n * @param scale - The Vector3 object representing the scale\n */\n    transform(translation: Vector3, rotation: Quaternion, scale: Vector3)\n    {\n        this.min.multiply(scale);\n        this.max.multiply(scale);\n\n        const corners: Vector3[] = [];\n        corners.push(new Vector3(this.min.x, this.min.y, this.min.z));\n        corners.push(new Vector3(this.min.x, this.min.y, this.max.z));\n        corners.push(new Vector3(this.min.x, this.max.y, this.min.z));\n        corners.push(new Vector3(this.min.x, this.max.y, this.max.z));\n        corners.push(new Vector3(this.max.x, this.min.y, this.min.z));\n        corners.push(new Vector3(this.max.x, this.min.y, this.max.z));\n        corners.push(new Vector3(this.max.x, this.max.y, this.min.z));\n        corners.push(new Vector3(this.max.x, this.max.y, this.max.z));\n\n        corners.forEach((v: Vector3)=>{\n            v.rotate(rotation);\n        });\n\n        this.min.copy(corners[0]);\n        this.max.copy(corners[0]);\n\n        for(let i=1; i < corners.length; i++)\n        {\n            this.min.x = Math.min(this.min.x, corners[i].x);\n            this.min.y = Math.min(this.min.y, corners[i].y);\n            this.min.z = Math.min(this.min.z, corners[i].z);\n\n            this.max.x = Math.max(this.max.x, corners[i].x);\n            this.max.y = Math.max(this.max.y, corners[i].y);\n            this.max.z = Math.max(this.max.z, corners[i].z);\n        }\n        \n        this.min.add(translation);\n        this.max.add(translation);\n    }\n\n/**\n * Checks if this BoundingBox3 object intersects with the provided BoundingBox3 object\n * \n * @param box - The BoundingBox3 object to check intersection against\n * @returns True if the boxes intersect, false otherwise\n */\n    intersects(box: BoundingBox3): boolean\n    {\n        const thisCenter = Vector3.add(this.max, this.min);\n        thisCenter.multiplyScalar(0.5);\n\n        const otherCenter = Vector3.add(box.max, box.min);\n        otherCenter.multiplyScalar(0.5);\n\n        const thisHalfWidth = Vector3.subtract(this.max, this.min);\n        thisHalfWidth.multiplyScalar(0.5);\n\n        const otherHalfWidth = Vector3.subtract(box.max, box.min);\n        otherHalfWidth.multiplyScalar(0.5);\n\n        if(Math.abs(thisCenter.x - otherCenter.x) > (thisHalfWidth.x + otherHalfWidth.x))\n            return false;\n        else if(Math.abs(thisCenter.y - otherCenter.y) > (thisHalfWidth.y + otherHalfWidth.y))\n            return false;\n        else if(Math.abs(thisCenter.z - otherCenter.z) > (thisHalfWidth.z + otherHalfWidth.z))\n            return false;\n        else\n            return true;\n    }\n\n    \n/**\n * Computes the minimum and maximum Vector3 objects for the BoundingBox3 from a given array of vertices\n * \n * @param vertices - An array of Vector3 or number objects with the vertices\n */\n    computeBounds(vertices: Vector3[] | number[]): void\n    {\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n\n            this.max.set(vArray[0], vArray[1], vArray[2]);\n            this.min.set(vArray[0], vArray[1], vArray[2]);\n            \n            for(let i=0; i < vArray.length; i+=3)\n            {\n                if(vArray[i] > this.max.x)\n                    this.max.x = vArray[i];\n                if(vArray[i] < this.min.x)\n                    this.min.x = vArray[i];\n\n                if(vArray[i+1] > this.max.y)\n                    this.max.y = vArray[i+1];\n                if(vArray[i+1] < this.min.y)\n                    this.min.y = vArray[i+1];\n\n                if(vArray[i+2] > this.max.z)\n                    this.max.z = vArray[i+2];\n                if(vArray[i+2] < this.min.z)\n                    this.min.z = vArray[i+2];    \n            }\n        }\n        else\n        {\n            this.max.copy((vertices as Vector3[])[0]);\n            this.min.copy((vertices as Vector3[])[0]);\n\n            (vertices as Vector3[]).forEach((elem: Vector3) =>\n            {\n                if(elem.x > this.max.x)\n                    this.max.x = elem.x;\n                if(elem.x < this.min.x)\n                    this.min.x = elem.x;\n\n                if(elem.y > this.max.y)\n                    this.max.y = elem.y;\n                if(elem.y < this.min.y)\n                    this.min.y =elem.y;\n\n                if(elem.z > this.max.z)\n                    this.max.z = elem.z;\n                if(elem.z < this.min.z)\n                    this.min.z = elem.z;\n            });\n        }\n    }\n}", "import { BoundingBox3 } from \"./BoundingBox3\";\nimport { Vector3 } from \"./Vector3\"\n\nexport class BoundingSphere \n{\n    public center: Vector3;\n    public radius: number;\n\n/**\n * Constructs a BoundingSphere\n */    \n    constructor()\n    {\n        this.center = new Vector3();\n        this.radius = 0;\n    }\n\n/**\n * Copies the given BoundingSphere into the current one\n * \n * @param circle - The BoundingSphere object to copy\n */\n    copy(circle: BoundingSphere): void\n    {\n        this.center.copy(circle.center);\n        this.radius = circle.radius;\n    }\n\n/**\n * Transforms the BoundingSphere by the given translation and scale\n * \n * @param translation - The translation Vector3\n * @param scale - The scale Vector3\n */\n    transform(translation: Vector3, scale: Vector3)\n    {\n        this.center.multiply(scale);\n        this.center.add(translation);\n        \n        if(scale.x >= scale.y)\n            this.radius *= scale.x;\n        else\n            this.radius *= scale.y;\n    }\n\n /**\n * Checks if the given BoundingSphere intersects with the current one\n * \n * @param circle - The BoundingSphere to check against\n * @returns True if the two BoundingSpheres intersect, false otherwise\n */\n   intersects(circle: BoundingSphere): boolean\n    {\n        const distance = this.center.distanceTo(circle.center);\n\n        if(distance < (this.radius + circle.radius))\n            return true;\n        else\n            return false;\n    }\n\n/**\n * Computes the bounds of the BoundingSphere from the given vertices\n * \n * @param vertices - The array of Vector3 or number objects representing the vertices\n * @param boundingBox - The BoundingBox3 object to use when computing the bounds\n */\n    computeBounds(vertices: Vector3[] | number[], boundingBox: BoundingBox3): void\n    {\n        this.center.copy(boundingBox.min);\n        this.center.add(boundingBox.max);\n        this.center.multiplyScalar(0.5);\n        this.radius = 0;\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n            for(let i=0; i < vArray.length; i+=3)\n            {\n                const distance = Math.sqrt(\n                    (vArray[i] - this.center.x) * (vArray[i] - this.center.x) +\n                    (vArray[i+1] - this.center.y) * (vArray[i+1] - this.center.y) +\n                    (vArray[i+2] - this.center.z) * (vArray[i+2] - this.center.z)\n                );\n                \n                if(distance > this.radius)\n                    this.radius = distance;\n            }\n        }\n        else\n        {\n            (vertices as Vector3[]).forEach((elem: Vector3) =>\n            {\n                const distance = elem.distanceTo(this.center);\n\n                if(distance > this.radius)\n                    this.radius = distance;\n            });\n        }\n    }\n}", "import { Matrix4 } from \"../math/Matrix4\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Camera } from \"./Camera\";\nimport { LightManager } from \"../lights/LightManager\";\nimport { BoundingBox3 } from \"../math/BoundingBox3\";\nimport { BoundingSphere } from \"../math/BoundingSphere\"\n\nexport enum IntersectionMode3\n{\n    BOUNDING_SPHERE,\n    AXIS_ALIGNED_BOUNDING_BOX\n}\n\nexport class Transform3\n{\n    public children: Array<Transform3>;\n\n    public position: Vector3;\n    public rotation: Quaternion;\n    public scale: Vector3;\n    public visible: boolean;\n\n    public autoUpdateMatrix: boolean;\n    public matrix: Matrix4;\n    public worldMatrix: Matrix4;\n\n    public parent: Transform3 | null;\n\n    public boundingBox: BoundingBox3;\n    public boundingSphere: BoundingSphere;\n\n    constructor()\n    {\n        this.children = [];\n        this.position = new Vector3();\n        this.rotation = new Quaternion();\n        this.scale = new Vector3(1, 1, 1);\n        this.visible = true;\n\n        this.autoUpdateMatrix = true;\n        this.matrix = new Matrix4();\n        this.worldMatrix = new Matrix4();\n\n        this.parent = null;\n\n        this.boundingBox = new BoundingBox3();\n        this.boundingSphere = new BoundingSphere();\n    }\n\n    draw(parent: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible)\n            return;\n\n        this.children.forEach((elem: Transform3) => {\n            elem.draw(this, camera, lightManager);\n        });\n    }\n\n    // forward traversal\n    traverseSceneGraph(): void\n    {\n        if(this.autoUpdateMatrix)\n        {\n            this.matrix.compose(this.position, this.rotation, this.scale);\n        }\n        \n        if(this.parent)\n        {\n            this.worldMatrix.copy(this.parent.worldMatrix);\n            this.worldMatrix.multiply(this.matrix);\n        }\n        else\n        {\n            this.worldMatrix.copy(this.matrix);\n        }\n\n        this.children.forEach((elem: Transform3) => {\n            elem.traverseSceneGraph();\n        });\n    }\n\n    // backwards traversal\n    updateWorldMatrix(): void\n    {\n        if(this.autoUpdateMatrix)\n        {\n            this.matrix.compose(this.position, this.rotation, this.scale);\n        }\n        \n        if(this.parent)\n        {\n            this.parent.updateWorldMatrix();\n            this.worldMatrix.copy(this.parent.worldMatrix);\n            this.worldMatrix.multiply(this.matrix);\n        }\n        else\n        {\n            this.worldMatrix.copy(this.matrix);\n        }\n    }\n\n    add(child: Transform3) \n    {\n        this.children.push(child);\n        child.parent = this;\n    }\n\n    remove(): boolean\n    {\n        if(this.parent == null)\n            return false;\n        else\n            return this.parent.removeChild(this) != null;\n    }\n\n    removeChild(child: Transform3): Transform3 | null\n    {\n        const index = this.children.indexOf(child);\n\n        if(index == -1)\n        {\n            return null;\n        }\n        else\n        {\n            const removedElement = this.children.splice(index, 1);\n            removedElement[0].parent = null;\n            return removedElement[0];\n        }\n    }\n\n    setLights(lightManager: LightManager): void\n    {\n        this.children.forEach((elem) => {\n            elem.setLights(lightManager);\n        });\n    }\n\n    translate(translation: Vector3): void\n    {\n        this.position.add(Vector3.rotate(translation, this.rotation));\n    }\n\n    translateX(distance: number): void\n    {\n        this.position.add(Vector3.rotate(new Vector3(distance, 0, 0), this.rotation));\n    }\n\n    translateY(distance: number): void\n    {\n        this.position.add(Vector3.rotate(new Vector3(0, distance, 0), this.rotation));\n    }\n\n    translateZ(distance: number): void\n    {\n        this.position.add(Vector3.rotate(new Vector3(0, 0, distance), this.rotation));\n    }\n\n    rotate(rotation: Vector3): void\n    {\n        this.rotation.multiply(Quaternion.makeEulerAngles(rotation.x, rotation.y, rotation.z));\n    }\n\n    rotateX(angle: number): void\n    {\n        this.rotation.multiply(Quaternion.makeRotationX(angle));\n    }\n\n    rotateY(angle: number): void\n    {\n        this.rotation.multiply(Quaternion.makeRotationY(angle));\n    }\n\n    rotateZ(angle: number): void\n    {\n        this.rotation.multiply(Quaternion.makeRotationZ(angle));\n    }\n\n    lookAt(target: Vector3, up = Vector3.UP): void\n    {\n        this.updateWorldMatrix();\n        const [worldPosition, worldRotation, worldScale] = this.worldMatrix.decompose();\n        this.rotation.lookAt(worldPosition, target, up);\n    }\n\n    intersects(other: Transform3, mode = IntersectionMode3.BOUNDING_SPHERE): boolean\n    {\n        if(mode == IntersectionMode3.BOUNDING_SPHERE)\n        {\n            const thisSphere = new BoundingSphere();\n            thisSphere.copy(this.boundingSphere);\n            thisSphere.transform(this.position, this.scale);\n\n            const otherSphere = new BoundingSphere();\n            otherSphere.copy(other.boundingSphere);\n            otherSphere.transform(other.position, other.scale);\n\n            return thisSphere.intersects(otherSphere);\n        }\n        else if(mode == IntersectionMode3.AXIS_ALIGNED_BOUNDING_BOX)\n        {\n            const thisBox = new BoundingBox3();\n            thisBox.copy(this.boundingBox);\n            thisBox.transform(this.position, this.rotation, this.scale);\n\n            const otherBox = new BoundingBox3();\n            otherBox.copy(other.boundingBox);\n            otherBox.transform(other.position, other.rotation, other.scale);\n\n            return thisBox.intersects(otherBox);\n        }\n        else\n        {\n            return false;\n        }\n    }\n}", "import { Transform3 } from './Transform3'\nimport { Matrix4 } from '../math/Matrix4'\n\n\n/**\n * Camera class that extends Transform3.\n*/\nexport class Camera extends Transform3\n{\n    protected aspectRatio: number;\n    protected fov: number;\n    protected near: number;\n    protected far: number;\n    protected left: number;\n    protected right: number;\n    \n    /**\n     * The projection matrix of the camera.\n    */\n    public projectionMatrix: Matrix4;\n\n    /**\n     * The view matrix of the camera.\n    */\n    public viewMatrix: Matrix4;\n\n    /**\n     * Indicates if the projection matrix needs to be updated.\n    */\n    public projectionMatrixDirty: boolean;\n\n    constructor()\n    {\n        super();\n\n        this.fov = 0;\n        this.aspectRatio = 0;\n        this.near = 0;\n        this.far = 0;\n        this.left = 0;\n        this.right = 0;\n        this.projectionMatrixDirty = true;\n\n        this.projectionMatrix = new Matrix4();\n        this.viewMatrix = new Matrix4();\n    }\n\n    /**\n     * Sets the camera parameters for a perspective view\n     * \n     * @param fov - The field of view\n     * @param aspectRatio - The aspect ratio\n     * @param near - The near plane\n     * @param far - The far plane\n     */\n    public setPerspectiveCamera(fov: number, aspectRatio: number, near: number, far: number): void\n    {\n        this.fov = fov;\n        this.aspectRatio = aspectRatio;\n        this.near = near;\n        this.far = far;\n        this.projectionMatrixDirty = true;\n\n        this.projectionMatrix.setPerspective(fov, aspectRatio, near, far);\n    }\n\n    /**\n     * Sets the camera parameters for an orthographic view\n     * \n     * @param left - The left plane\n     * @param right - The right plane\n     * @param bottom - The bottom plane\n     * @param top - The top plane\n     * @param near - The near plane\n     * @param far - The far plane\n     */\n    public setOrthographicCamera(left: number, right: number, bottom: number, top: number, near: number, far: number): void\n    {\n        this.left = left;\n        this.right = right;\n        this.aspectRatio = Math.abs((right-left) / (top-bottom));\n        this.near = near;\n        this.far = far;\n        this.projectionMatrixDirty = true;\n\n        this.projectionMatrix.setOrthographic(left, right, bottom, top, near, far);\n    }\n    \n    /**\n     * Updates the camera's world matrix and view matrix\n     */\n    public updateWorldMatrix(): void\n    {\n        super.updateWorldMatrix();\n        this.viewMatrix = this.worldMatrix.inverse();\n    }\n\n    /**\n     * Gets the aspect ratio of the camera\n     * \n     * @returns The aspect ratio of the camera\n     */\n    public getAspectRatio(): number\n    {\n        return this.aspectRatio;\n    }\n\n    /**\n     * Gets the distance from the camera to the near clipping plane\n     * \n     * @returns The distance from the camera to the near clipping plane\n     */\n    public getNear(): number\n    {\n        return this.near;\n    }\n\n    /**\n     * Gets the distance from the camera to the far clipping plane\n     * \n     * @returns The distance from the camera to the far clipping plane\n     */\n    public getFar(): number\n    {\n        return this.far;\n    }\n\n    /**\n     * Gets the leftmost x position an orthographic camera's view frustum\n     * \n     * @returns The leftmost x position for the camera's view frustum\n     */\n    public getLeft(): number\n    {\n        return this.left;\n    }\n\n    /**\n     * Gets the rightmost x position for an orthographic camera's view frustum\n     * \n     * @returns The rightmost x position for the camera's view frustum\n     */\n    public getRight(): number\n    {\n        return this.right;\n    }\n\n}", "import { Vector2 } from './Vector2'\n\nexport class Matrix3\n{\n/**\n *  A static Matrix3 object representing the identity matrix\n */\n    public static readonly IDENTITY = new Matrix3();\n\n/**\n * An array of 9 numbers representing a 3x3 matrix\n */\n    public mat: Array<number>;\n\n/**\n * Multiplies two 3x3 matrices, m1 and m2, and returns the result as a new Matrix3\n * \n * @param m1 - The first Matrix3 object to be multiplied\n * @param m2 - The second Matrix3 object to be multiplied\n * @returns A new Matrix3 object representing the product of m1 and m2\n */\n    // Code from https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\n    static multiply(m1: Matrix3, m2: Matrix3): Matrix3\n    {\n        const m = new Matrix3();\n        \n        m.mat[0] = m1.mat[0] * m2.mat[0] + m1.mat[1] * m2.mat[3] + m1.mat[2] * m2.mat[6];\n        m.mat[1] = m1.mat[0] * m2.mat[1] + m1.mat[1] * m2.mat[4] + m1.mat[2] * m2.mat[7];\n        m.mat[2] = m1.mat[0] * m2.mat[2] + m1.mat[1] * m2.mat[5] + m1.mat[2] * m2.mat[8];\n        m.mat[3] = m1.mat[3] * m2.mat[0] + m1.mat[4] * m2.mat[3] + m1.mat[5] * m2.mat[6];\n        m.mat[4] = m1.mat[3] * m2.mat[1] + m1.mat[4] * m2.mat[4] + m1.mat[5] * m2.mat[7];\n        m.mat[5] = m1.mat[3] * m2.mat[2] + m1.mat[4] * m2.mat[5] + m1.mat[5] * m2.mat[8];\n        m.mat[6] = m1.mat[6] * m2.mat[0] + m1.mat[7] * m2.mat[3] + m1.mat[8] * m2.mat[6];\n        m.mat[7] = m1.mat[6] * m2.mat[1] + m1.mat[7] * m2.mat[4] + m1.mat[8] * m2.mat[7];\n        m.mat[8] = m1.mat[6] * m2.mat[2] + m1.mat[7] * m2.mat[5] + m1.mat[8] * m2.mat[8];\n\n        return m;\n    }\n\n/**\n * Creates a copy of a Matrix3 object\n * \n * @param m - The Matrix3 object to be copied\n * @returns A new Matrix3 object representing a copy of the input Matrix3\n */\n    static copy(m: Matrix3): Matrix3\n    {\n        const mat = new Matrix3();\n        mat.copy(m);\n        return mat;\n    }\n\n/**\n * Creates a new Matrix3 object from 9 numbers representing a row-major matrix\n * \n * @param n1 - Number in row 1, column 1\n * @param n2 - Number in row 1, column 2\n * @param n3 - Number in row 1, column 3\n * @param n4 - Number in row 2, column 1\n * @param n5 - Number in row 2, column 2\n * @param n6 - Number in row 2, column 3\n * @param n7 - Number in row 3, column 1\n * @param n8 - Number in row 3, column 2\n * @param n9 - Number in row 3, column 3\n * @returns A new Matrix3 object created from the given numbers\n */\n    public static fromRowMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): Matrix3\n    {\n        const matrix = new Matrix3();\n        matrix.setRowMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix3 object from 9 numbers representing a column-major matrix\n * \n * @param n1 - Number in column 1, row 1\n * @param n2 - Number in column 2, row 1\n * @param n3 - Number in column 3, row 1\n * @param n4 - Number in column 1, row 2\n * @param n5 - Number in column 2, row 2\n * @param n6 - Number in column 3, row 2\n * @param n7 - Number in column 1, row 3\n * @param n8 - Number in column 2, row 3\n * @param n9 - Number in column 3, row 3\n * @returns A new Matrix3 object created from the given numbers\n */\n    public static fromColumnMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): Matrix3\n    {\n        const matrix = new Matrix3();\n        matrix.setColumnMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix3 object representing a translation matrix\n * \n * @param v - The Vector2 object representing the translation vector\n * @returns A new Matrix3 object representing a translation matrix\n */\n    public static makeTranslation(v: Vector2): Matrix3\n    {\n        return Matrix3.fromRowMajor(\n            1, 0, v.x,\n            0, 1, v.y,\n            0, 0, 1\n        );\n    }\n\n/**\n * Creates a new Matrix3 object representing a rotation matrix\n * \n * @param angle - The angle of rotation, in radians\n * @returns A new Matrix3 object representing a rotation matrix\n */\n    public static makeRotation(angle: number): Matrix3\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n        \n        return Matrix3.fromRowMajor(\n            cosTheta, -sinTheta, 0,\n            sinTheta, cosTheta, 0,\n            0, 0, 1\n        );\n    }\n\n/**\n * Creates a new Matrix3 object representing a scaling matrix\n * \n * @param scale - The Vector2 object representing the x and y scaling factors\n * @returns A new Matrix3 object representing a scaling matrix\n */\n    public static makeScale(scale: Vector2): Matrix3\n    {\n        return Matrix3.fromRowMajor(\n            scale.x, 0, 0,\n            0, scale.y, 0,\n            0, 0, 1 \n        );\n    }\n\n/**\n * Creates a Matrix3 object from position, rotation, and scale\n * \n * @param position - The Vector2 representing the position\n * @param rotation - The angle to rotate by, in radians\n * @param scale - The Vector2 representing the scale to apply\n * @returns The resulting Matrix3 object\n */ \n    public static compose(position = Vector2.ZERO, rotation = 0, scale = Vector2.ONE): Matrix3\n    {\n        const matrix = new Matrix3();\n        matrix.compose(position, rotation, scale);\n        return matrix;\n    }\n\n/**\n * Creates a new Matrix3 object and initializes the mat array with the given values.\n */\n    constructor()\n    {\n        this.mat = [ \n            1, 0, 0,\n            0, 1, 0,\n            0, 0, 1\n        ];\n    }\n\n/**\n * Sets the elements of the Matrix3 in column major order.\n * \n * @param n1 - The first element in the first column\n * @param n2 - The second element in the first column\n * @param n3 - The third element in the first column\n * @param n4 - The first element in the second column\n * @param n5 - The second element in the second column\n * @param n6 - The third element in the second column\n * @param n7 - The first element in the third column\n * @param n8 - The second element in the third column\n * @param n9 - The third element in the third column\n */\n    setColumnMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n2;\n        this.mat[2] = n3;\n        this.mat[3] = n4;\n        this.mat[4] = n5;\n        this.mat[5] = n6;\n        this.mat[6] = n7;\n        this.mat[7] = n8;\n        this.mat[8] = n9;\n    }\n\n/**\n * Sets the elements of the Matrix3 in row major order.\n * \n * @param n1 - The first element in the first row\n * @param n2 - The second element in the first row\n * @param n3 - The third element in the first row\n * @param n4 - The first element in the second row\n * @param n5 - The second element in the second row\n * @param n6 - The third element in the second row\n * @param n7 - The first element in the third row\n * @param n8 - The second element in the third row\n * @param n9 - The third element in the third row\n */\n    setRowMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n4;\n        this.mat[2] = n7;\n        this.mat[3] = n2;\n        this.mat[4] = n5;\n        this.mat[5] = n8;\n        this.mat[6] = n3;\n        this.mat[7] = n6;\n        this.mat[8] = n9;\n    }\n\n/**\n * Copies the values of the specified Matrix3 into this Matrix3.\n * \n * @param m - The Matrix3 to copy the values from\n */\n    copy(m: Matrix3): void\n    {\n        for(let i=0; i < 9; i++)\n            this.mat[i] = m.mat[i];\n    }\n\n/**\n * Returns the element at the specified row and column of the Matrix3.\n * \n * @param row - The row of the element to return\n * @param col - The column of the element to return\n * @returns The element at the specified row and column of the Matrix3\n */\n    element(row: number, col: number): number\n    {\n        return this.mat[col*3 + row];\n    }\n\n/**\n * Sets the value of the specified element in the Matrix3.\n * \n * @param value - The value to set\n * @param row - The row of the element to set\n * @param col - The column of the element to set\n */\n    set(value: number, row: number, col: number): void\n    {\n       this.mat[col*3 + row] = value;\n    }\n\n/**\n * Multiplies the current matrix with another Matrix3\n * \n * @param m - The Matrix3 to be multiplied with the current matrix\n */\n    multiply(m: Matrix3): void\n    {\n        const temp = Matrix3.multiply(m, this);\n        this.copy(temp);\n    }\n\n/**\n * Sets the translation of this matrix from a Vector2.\n * \n * @param v - The Vector2 to set the translation from.\n */\n    setTranslation(v: Vector2): void\n    { \n        this.setRowMajor(\n            1, 0, v.x,\n            0, 1, v.y,\n            0, 0, 1\n        );\n    }\n\n /**\n * Sets the rotation of this matrix from a given angle.\n * \n * @param angle - The angle in radians to set the rotation from.\n */   \n    setRotation(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n        \n        this.setRowMajor(\n            cosTheta, -sinTheta, 0,\n            sinTheta, cosTheta, 0,\n            0, 0, 1\n        );\n    }\n\n/**\n * Sets the scale of this matrix from a Vector2.\n * \n * @param scale - The Vector2 to set the scale from.\n */\n    setScale(scale: Vector2): void\n    {\n        this.setRowMajor(\n            scale.x, 0, 0,\n            0, scale.y, 0,\n            0, 0, 1 \n        );\n    }\n\n    multiplyScalar(x: number): void\n    {\n        for(let i=0; i < 9; i++)\n            this.mat[i] *= x;\n    }\n    \n/**\n * Computes the inverse of this matrix.\n * \n * @returns The inverse of this matrix\n */\n    // Code from http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/threeD/index.htm\n    inverse(): Matrix3\n    {\n        const inverse = new Matrix3();\n\n        const det = this.mat[0]*this.mat[4]*this.mat[8] + \n            this.mat[1]*this.mat[5]*this.mat[6] + \n            this.mat[2]*this.mat[3]*this.mat[7] - \n            this.mat[0]*this.mat[5]*this.mat[7] -\n             this.mat[1]*this.mat[3]*this.mat[8] - \n             this.mat[2]*this.mat[4]*this.mat[6];\n\n        this.mat[0] = (this.mat[4]*this.mat[8] - this.mat[5]*this.mat[7])/det;\n        this.mat[1] = (this.mat[2]*this.mat[7] - this.mat[1]*this.mat[8])/det;\n        this.mat[2] = (this.mat[1]*this.mat[5] - this.mat[2]*this.mat[4])/det;\n        this.mat[3] = (this.mat[5]*this.mat[6] - this.mat[3]*this.mat[8])/det;\n        this.mat[4] = (this.mat[0]*this.mat[8] - this.mat[2]*this.mat[6])/det;\n        this.mat[5] = (this.mat[2]*this.mat[3] - this.mat[0]*this.mat[5])/det;\n        this.mat[6] = (this.mat[3]*this.mat[7] - this.mat[4]*this.mat[6])/det;\n        this.mat[7] = (this.mat[1]*this.mat[6] - this.mat[0]*this.mat[7])/det;\n        this.mat[8] = (this.mat[0]*this.mat[4] - this.mat[1]*this.mat[3])/det;\n\n        return inverse;\n    }\n\n/**\n * Inverts this matrix in place.\n */\n    invert(): void\n    {\n        const inverseMatrix = this.inverse();\n        this.copy(inverseMatrix);\n    }\n\n/**\n * Transposes this matrix.\n * \n * @returns The transposed matrix.\n */\n    transpose(): Matrix3\n    {\n        return Matrix3.fromRowMajor(\n            this.mat[0], this.mat[1], this.mat[2], \n            this.mat[3], this.mat[4], this.mat[5], \n            this.mat[6], this.mat[7], this.mat[8]\n        );\n    }\n\n/**\n * Compose the current Matrix3 object from position, rotation, and scale\n * \n * @param position - The Vector2 representing the position\n * @param rotation - The angle to rotate by, in radians\n * @param scale - The Vector2 representing the scale to apply\n */\n    compose(position = Vector2.ZERO, rotation = 0, scale = Vector2.ONE): void\n    {\n        this.setTranslation(position);\n        this.multiply(Matrix3.makeRotation(rotation));\n        this.multiply(Matrix3.makeScale(scale));\n    }\n\n/**\n * Decomposes this matrix into a position, rotation and scale.\n * \n * @returns An array containing the position, rotation and scale of this matrix.\n */\n    decompose(): [Vector2, number, Vector2]\n    {\n        const position = new Vector2();\n        const scale = new Vector2();\n        \n        position.setPositionFromMatrix(this);\n        scale.setScaleFromMatrix(this);\n\n        return [position, Math.atan2(this.mat[1], this.mat[0]), scale];\n    }\n}", "import { Matrix3 } from \"./Matrix3\";\nimport { Vector2 } from \"./Vector2\"\n\nexport class BoundingBox2 \n{\n    public min: Vector2;\n    public max: Vector2;\n\n    /**\n    * Constructs a new BoundingBox2\n    */\n    constructor()\n    {\n        this.min = new Vector2();\n        this.max = new Vector2();\n    }\n\n    /**\n     * Copies an existing BoundingBox2 to this one\n     * \n     * @param box - The BoundingBox2 to copy\n     */\n    copy(box: BoundingBox2): void\n    {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n    }\n\n    /**\n     * Transforms the BoundingBox2 with a translation, rotation, and scale\n     * \n     * @param translation - The translation vector\n     * @param rotation - The rotation (in radians)\n     * @param scale - The scaling vector\n     */\n    transform(translation: Vector2, rotation: number, scale: Vector2)\n    {\n        this.min.multiply(scale);\n        this.max.multiply(scale);\n        \n        const topLeft = new Vector2(this.min.x, this.max.y);\n        const topRight = new Vector2(this.max.x, this.max.y);\n        const bottomLeft = new Vector2(this.min.x, this.min.y);\n        const bottomRight = new Vector2(this.max.x, this.min.y);\n        topLeft.rotate(rotation);\n        topRight.rotate(rotation);\n        bottomLeft.rotate(rotation);\n        bottomRight.rotate(rotation);\n\n        this.min.x = Math.min(topLeft.x, Math.min(topRight.x, Math.min(bottomLeft.x, bottomRight.x)));\n        this.min.y = Math.min(topLeft.y, Math.min(topRight.y, Math.min(bottomLeft.y, bottomRight.y)));\n        this.max.x = Math.max(topLeft.x, Math.max(topRight.x, Math.max(bottomLeft.x, bottomRight.x)));\n        this.max.y = Math.max(topLeft.y, Math.max(topRight.y, Math.max(bottomLeft.y, bottomRight.y)));\n\n        this.min.add(translation);\n        this.max.add(translation);\n    }\n\n    /**\n     * Checks if this BoundingBox2 intersects with another BoundingBox2\n     * \n     * @param box - The other BoundingBox2 to check against\n     * @returns True if the two BoundingBox2s intersect, false otherwise\n     */\n    intersects(box: BoundingBox2): boolean\n    {\n        const thisCenter = Vector2.add(this.max, this.min);\n        thisCenter.multiplyScalar(0.5);\n\n        const otherCenter = Vector2.add(box.max, box.min);\n        otherCenter.multiplyScalar(0.5);\n\n        const thisHalfWidth = Vector2.subtract(this.max, this.min);\n        thisHalfWidth.multiplyScalar(0.5);\n\n        const otherHalfWidth = Vector2.subtract(box.max, box.min);\n        otherHalfWidth.multiplyScalar(0.5);\n\n        if(Math.abs(thisCenter.x - otherCenter.x) > (thisHalfWidth.x + otherHalfWidth.x))\n            return false;\n        else if(Math.abs(thisCenter.y - otherCenter.y) > (thisHalfWidth.y + otherHalfWidth.y))\n            return false;\n        else\n            return true;\n    }\n}", "import { Vector2 } from \"./Vector2\"\n\nexport class BoundingCircle \n{\n    public center: Vector2;\n    public radius: number;\n\n/**\n * Constructor for the BoundingCircle class\n * \n * @returns A new instance of the BoundingCircle class\n */\n    constructor()\n    {\n        this.center = new Vector2();\n        this.radius = 0;\n    }\n\n/**\n * Copies the properties of a given circle to this instance\n * \n * @param circle - The circle whose properties will be copied\n */\n    copy(circle: BoundingCircle): void\n    {\n        this.center.copy(circle.center);\n        this.radius = circle.radius;\n    }\n\n /**\n * Transforms the BoundingCircle instance's center and radius\n * \n * @param translation - The Vector2 to translate the center of the circle by\n * @param scale - A Vector2 object representing the scaling to apply\n */   \n    transform(translation: Vector2, scale: Vector2)\n    {\n        this.center.multiply(scale);\n        this.center.add(translation);\n        \n        if(scale.x >= scale.y)\n            this.radius *= scale.x;\n        else\n            this.radius *= scale.y;\n    }\n\n/**\n * Returns whether this BoundingCircle intersects with the input BoundingCircle\n * \n * @param circle - The BoundingCircle object to check for intersection\n * @returns True if the two BoundingCircle objects intersect, false otherwise\n */\n    intersects(circle: BoundingCircle): boolean\n    {\n        const distance = this.center.distanceTo(circle.center);\n\n        if(distance < (this.radius + circle.radius))\n            return true;\n        else\n            return false;\n    }\n}", "import { Matrix3 } from \"../math/Matrix3\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { BoundingBox2 } from \"../math/BoundingBox2\";\nimport { BoundingCircle } from \"../math/BoundingCircle\";\n\nexport enum IntersectionMode2\n{\n    BOUNDING_CIRCLE,\n    AXIS_ALIGNED_BOUNDING_BOX\n}\n\n/**\n * The Transform2 class is used to represent an object in two-dimensional space. \n * It stores information such as position, rotation, scale, visibility, and a reference to its parent object. \n * It also contains a matrix to keep track of its transformation relative to its parent object.\n */\nexport class Transform2\n{\n    /**\n     * Array of children for this transform\n     */\n    public children: Array<Transform2>;\n\n    /**\n     * Parent transform for this transform\n     */\n    public parent: Transform2 | null;\n\n    /**\n     * Vector2 representing the position\n     */\n    public position: Vector2;\n\n    /**\n     * Rotation of the transform in radians\n     */\n    public rotation: number;\n\n    /**\n     * Vector2 representing the scale\n     */\n    public scale: Vector2;\n\n\n    /**\n     * Integer representing the layer of this transform\n     */\n    public layer: number;\n\n    /**\n     * Boolean indicating whether the matrix should be automatically updated\n     */\n    public autoUpdateMatrix: boolean;\n\n    /**\n     * Matrix3 representing the transformation matrix in local space\n     */\n    public matrix: Matrix3;\n\n    /**\n     * Matrix3 representing the transformation matrix in world space\n     */\n    public worldMatrix: Matrix3;\n    \n    /**\n     * Boolean indicating whether this transform should be rendered\n     */\n    public visible: boolean;\n\n    /**\n     * Bounding box for this transform\n     */\n    public boundingBox: BoundingBox2;\n\n    /**\n     * Bounding circle object for this transform\n     */\n    public boundingCircle: BoundingCircle;\n\n    /**\n     * Constructor for Transform2 class\n     * \n     */\n    constructor()\n    {\n        this.children = [];\n\n        this.position = new Vector2();\n        this.rotation = 0;\n        this.scale = new Vector2(1, 1);\n\n        this.autoUpdateMatrix = true;\n        this.matrix = new Matrix3();\n        this.worldMatrix = new Matrix3();\n\n        // default layer\n        this.layer = 0;\n\n        this.visible = true;\n\n        this.parent = null;\n\n        this.boundingBox = new BoundingBox2();\n        this.boundingCircle = new BoundingCircle();\n    }\n\n    /**\n     * Recursively draws the Transform2 object and its children\n     */\n    draw(): void\n    {\n        if(!this.visible)\n            return;\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw();\n        });\n    }\n\n    /**\n     * Traverses the scene graph starting from the current Transform2 object\n     */\n    traverseSceneGraph(): void\n    {\n        if(this.autoUpdateMatrix)\n        {\n            this.matrix.compose(this.position, this.rotation, this.scale);\n        }\n\n        if(this.parent)\n        {\n            this.worldMatrix.copy(this.parent.worldMatrix);\n            this.worldMatrix.multiply(this.matrix);\n        }\n        else\n        {\n            this.worldMatrix.copy(this.matrix);\n        }\n\n        this.children.forEach((elem: Transform2) => {\n            elem.traverseSceneGraph();\n        });\n    }\n\n    /**\n     * Updates the world matrix of the current Transform2 object and its parent\n     */\n    updateWorldMatrix(): void\n    {\n        if(this.autoUpdateMatrix)\n        {\n            this.matrix.compose(this.position, this.rotation, this.scale);\n        }\n        \n        if(this.parent)\n        {\n            this.parent.updateWorldMatrix();\n            this.worldMatrix.copy(this.parent.worldMatrix);\n            this.worldMatrix.multiply(this.matrix);\n        }\n        else\n        {\n            this.worldMatrix.copy(this.matrix);\n        }\n    }\n\n    /**\n     * Adds a child Transform2 to the current Transform2\n     * \n     * @param child - The child Transform2 to add\n     */\n    add(child: Transform2) \n    {\n        this.children.push(child);\n        child.parent = this;\n    }\n\n    /**\n     * Removes the current Transform2 from its parent\n     * \n     * @returns True if the Transform2 was successfully removed, false otherwise\n     */\n    remove(): boolean\n    {\n        if(this.parent == null)\n            return false;\n        else\n            return this.parent.removeChild(this) != null;\n    }\n\n    /**\n     * Removes the specified child Transform2 from the current Transform2\n     * \n     * @param child - The child Transform2 to remove\n     * @returns The removed Transform2, or null if it was not found\n     */\n    removeChild(child: Transform2): Transform2 | null\n    {\n        const index = this.children.indexOf(child);\n\n        if(index == -1)\n        {\n            return null;\n        }\n        else\n        {\n            const removedElement = this.children.splice(index, 1);\n            removedElement[0].parent = null;\n            return removedElement[0];\n        }\n    }\n\n    /**\n     * Translates the current Transform2 by the specified Vector2\n     * \n     * @param translation - The Vector2 to translate the Transform2\n     */\n    translate(translation: Vector2): void\n    {\n        const localVector = Vector2.rotate(translation, this.rotation);\n        this.position.add(localVector);\n    }\n\n    /**\n     * Translates the position of a Transform2 along the X-axis\n     * \n     * @param distance - The distance to translate the Transform2 by\n     */\n    translateX(distance: number): void\n    {\n        const localVector = Vector2.rotate(new Vector2(distance, 0), this.rotation);\n        this.position.add(localVector);\n    }\n\n    /**\n     * Translates the position of a Transform2 along the Y-axis\n     * \n     * @param distance - The distance to translate the Transform2 by\n     */\n    translateY(distance: number): void\n    {\n        const localVector = Vector2.rotate(new Vector2(0, distance), this.rotation);\n        this.position.add(localVector);\n    }\n\n    /**\n     * Looks at a target vector with the given look vector\n     * \n     * @param target - The vector to look at\n     * @param lookVector - The vector used to determine the look direction (defaults to Vector2.UP)\n     */\n    lookAt(target: Vector2, lookVector = Vector2.UP): void\n    {\n        this.updateWorldMatrix();\n        \n        const [worldPosition, worldRotation, worldScale] = this.worldMatrix.decompose();\n        const targetVector = Vector2.subtract(target, worldPosition);\n\n        if(targetVector.length() > 0)\n        {\n            const worldLookVector = Vector2.rotate(lookVector, worldRotation);\n            this.rotation += worldLookVector.angleBetweenSigned(targetVector);\n        }\n    }\n\n    /**\n     * Checks if this Transform2 intersects another Transform2, using either a BoundingCircle or AxisAlignedBoundingBox\n     * \n     * @param other - The Transform2 to check for intersection with \n     * @param mode - The mode to use for intersection (defaults to BOUNDING_CIRCLE)\n     * @returns A boolean indicating whether the two objects intersect\n     */\n    intersects(other: Transform2, mode = IntersectionMode2.BOUNDING_CIRCLE): boolean\n    {\n        if(mode == IntersectionMode2.BOUNDING_CIRCLE)\n        {\n            const thisCircle = new BoundingCircle();\n            thisCircle.copy(this.boundingCircle);\n            thisCircle.transform(this.position, this.scale);\n\n            const otherCircle = new BoundingCircle();\n            otherCircle.copy(other.boundingCircle);\n            otherCircle.transform(other.position, other.scale);\n\n            return thisCircle.intersects(otherCircle);\n        }\n        else if(mode == IntersectionMode2.AXIS_ALIGNED_BOUNDING_BOX)\n        {\n            const thisBox = new BoundingBox2();\n            thisBox.copy(this.boundingBox);\n            thisBox.transform(this.position, this.rotation, this.scale);\n\n            const otherBox = new BoundingBox2();\n            otherBox.copy(other.boundingBox);\n            otherBox.transform(other.position, other.rotation, other.scale);\n\n            return thisBox.intersects(otherBox);\n        }\n        else\n        {\n            return false;\n        }\n    }\n}", "import { Light } from './Light'\n\nexport class LightManager\n{\n    public lights: Light[];\n    public lightTypes: number[];\n    public lightPositions: number[];\n    public ambientIntensities: number[];\n    public diffuseIntensities: number[];\n    public specularIntensities: number[];\n\n    constructor()\n    {\n        this.lights = [];\n        this.lightTypes = [];\n        this.lightPositions = [];\n        this.ambientIntensities = [];\n        this.diffuseIntensities = [];\n        this.specularIntensities = [];\n    }\n\n    clear(): void\n    {\n        this.lights = [];\n        this.lightTypes = [];\n        this.lightPositions = [];\n        this.ambientIntensities = [];\n        this.diffuseIntensities = [];\n        this.specularIntensities = [];\n    }\n\n    addLight(light: Light): void\n    {\n        const alreadyAdded = this.lights.some((elem: Light)=>{\n            return elem==light;\n        });\n\n        if(!alreadyAdded)\n            this.lights.push(light)\n    }\n\n    getNumLights(): number\n    {\n        return this.lights.length;\n    }\n\n    updateLights(): void\n    {\n        this.lights.forEach((light: Light) => {\n\n            const [worldPosition, worldRotation, worldScale] = light.worldMatrix.decompose();\n            this.lightPositions.push(worldPosition.x, worldPosition.y, worldPosition.z);\n            this.lightTypes.push(light.getType());\n\n            if(light.visible)\n            {\n                this.ambientIntensities.push(light.ambientIntensity.x, light.ambientIntensity.y, light.ambientIntensity.z);\n                this.diffuseIntensities.push(light.diffuseIntensity.x, light.diffuseIntensity.y, light.diffuseIntensity.z);\n                this.specularIntensities.push(light.specularIntensity.x, light.specularIntensity.y, light.specularIntensity.z);\n            }\n            else\n            {\n                this.ambientIntensities.push(0, 0, 0);\n                this.diffuseIntensities.push(0, 0, 0);\n                this.specularIntensities.push(0, 0, 0);\n            }\n        });\n    }\n}", "import { Camera } from \"./Camera\";\nimport { Transform2 } from \"./Transform2\";\nimport { Transform3 } from \"./Transform3\";\nimport { LightManager } from \"../lights/LightManager\";\n\n/**\n * The Scene class represents a container for 3D and 2D objects.\n */\nexport class Scene\n{\n    /**\n     * The root node for all 3D elements in the scene.\n     */\n    public root3d: Transform3;\n\n    /**\n     * The root node for all 2D elements in the scene.\n     */\n    public root2d: Transform2;\n\n    /**\n     * Manager for updating the lights in the scene.\n     */\n    private lightManager: LightManager;\n    \n    constructor()\n    {\n        this.root3d = new Transform3();\n        this.root2d = new Transform2();\n        this.lightManager = new LightManager();\n    }\n\n    /**\n     * Draws the scene by updating the camera's world transform, updating the lights, and drawing the 3D and 2D elements.\n     * @param camera - The camera used to draw the scene.\n     */\n    draw(camera: Camera): void\n    {\n        // Make sure the camera world transform is computed\n        camera.updateWorldMatrix();\n\n        // Update the scene lights\n        this.lightManager.clear();\n        this.root3d.setLights(this.lightManager);\n        this.lightManager.updateLights();\n\n        this.root3d.children.forEach((elem: Transform3) => {\n            elem.draw(this.root3d, camera, this.lightManager);\n        });\n\n        this.root2d.children.forEach((elem: Transform2) => {\n            elem.draw();\n        });\n    }\n\n    /**\n     * Adds a child element to the scene, either as a Transform3 or a Transform2.\n     * @param child - The child element to add to the scene.\n     */\n    add(child: Transform2 | Transform3): void\n    {\n        if(child instanceof Transform3)\n        {\n            this.root3d.add(child);\n        }\n        else\n        {\n            this.root2d.add(child);\n        }\n    }\n\n    /**\n     * Traverses the 3D and 2D elements of the scene, recursively calling the `traverseSceneGraph()` method on each element.\n     */\n    traverseSceneGraph(): void\n    {\n        this.root3d.children.forEach((elem: Transform3) => {\n            elem.traverseSceneGraph();\n        });\n\n        this.root2d.children.forEach((elem: Transform2) => {\n            elem.traverseSceneGraph();\n        });\n    }\n}", "export class AssetManager\n{\n    public requestedAssets: string[];\n    public loadedAssets: string[];\n    public errorAssets: string[];\n\n    constructor()\n    {\n        this.requestedAssets = [];\n        this.loadedAssets = [];\n        this.errorAssets = [];\n    }\n\n    allAssetsLoaded(): boolean\n    {\n        return this.requestedAssets.length == (this.loadedAssets.length + this.errorAssets.length);\n    }\n}", "import { Renderer } from './Renderer'\nimport { Camera } from './Camera'\nimport { Scene } from './Scene';\nimport { Vector2 } from '../math/Vector2'\nimport { AssetManager } from '../loaders/AssetManager';\n\n/**\n * The base class for a GopherGfx application.\n*/\nexport abstract class GfxApp \n{\n    /**\n     * The singleton instance of the GfxApp class.\n     */\n    private static instance: GfxApp;\n    \n    /**\n     * Gets the singleton instance of the GfxApp class.\n     * \n     * @returns The singleton instance of the GfxApp class.\n     */\n    public static getInstance(): GfxApp\n    {\n        return GfxApp.instance;\n    }\n\n    /**\n     * The renderer used by the GfxApp instance.\n     */\n    public renderer: Renderer;\n\n    /**\n     * The camera used by the GfxApp instance.\n     */\n    public camera: Camera;\n\n    /**\n     * The scene used by the GfxApp instance.\n     */\n    public scene: Scene;\n\n    /**\n     * Coordinates asynchronous loading of external assets.\n     */\n    public assetManager: AssetManager;\n\n    /**\n     * A boolean indicating whether the GfxApp should continue to run in the background.\n     */\n    public runInBackground: boolean;\n\n    /**\n     * The current game time in seconds.\n     */\n    private time: number;\n\n    /**\n     * A boolean indicating whether the GfxApp is currently paused.\n     */\n    private paused: boolean;\n\n    /**\n     * An array of the previous touches on the touch screen.\n     */\n    private previousTouches: Vector2[];\n\n    /**\n     * Constructor for the GfxApp class\n     * \n     * @param enableStencilBuffer - Boolean value to enable/disable the stencil buffer\n     */\n    constructor(enableStencilBuffer = false)\n    {\n        GfxApp.instance = this;\n\n        this.time = Date.now();\n        this.paused = false;\n\n        this.camera = new Camera();\n        this.scene = new Scene();\n        this.renderer = new Renderer(enableStencilBuffer);\n        this.assetManager = new AssetManager();\n        this.runInBackground = false;\n\n        this.previousTouches = [ new Vector2() ];\n  \n        // Register event handlers\n        window.addEventListener('resize', () => {this.resize()}, false);\n        window.addEventListener('mousedown', (event: MouseEvent) => {this.onMouseDown(event)});\n        window.addEventListener('mouseup', (event: MouseEvent) => {this.onMouseUp(event)});\n        window.addEventListener('mousemove', (event: MouseEvent) => {this.onMouseMove(event)});\n        window.addEventListener('wheel', (event: WheelEvent) => {this.onMouseWheel(event)});\n        window.addEventListener('keydown', (event: KeyboardEvent) => {this.onKeyDown(event)});\n        window.addEventListener('keyup', (event: KeyboardEvent) => {this.onKeyUp(event)});  \n        window.addEventListener('focus', (event: FocusEvent) => {this.onFocusReceived(event)});\n        window.addEventListener('blur', (event: FocusEvent) => {this.onFocusLost(event)});\n        window.addEventListener('touchstart', (event: TouchEvent) => {this.onTouchStart(event)}, {passive: false});\n        window.addEventListener('touchmove', (event: TouchEvent) => {this.onTouchMove(event)}, {passive: false});\n        window.addEventListener('touchend', (event: TouchEvent) => {this.onTouchEnd(event)}, {passive: false});\n        window.addEventListener('touchcancel', (event: TouchEvent) => {this.onTouchEnd(event)}, {passive: false});\n        window.addEventListener('contextmenu', event => event.preventDefault());\n\n        // default orthographic camera\n        this.camera.setOrthographicCamera(0, 1, 0, 1, 0.01, 1);\n    }\n\n    /**\n     * Creates the scene and starts the program\n     */\n    start(): void \n    {\n        this.createScene();\n        this.initializationLoop();\n    }\n\n    /**\n     * Initialization loop for loading assets before starting the main loop\n     */\n    private initializationLoop(): void\n    {\n        if(!this.assetManager.allAssetsLoaded())\n        {\n            window.requestAnimationFrame(() => this.initializationLoop());\n        }\n        else\n        {\n            this.onAssetsLoaded();\n            this.time = Date.now();\n            this.mainLoop();\n        }\n    }\n\n    /**\n     * Main loop for the GfxApp class\n     * \n     * @param deltaTime - The time difference between frames for calculating updates\n     */\n    private mainLoop(): void\n    {\n        if(this.runInBackground || !this.paused)\n        {\n            // Compute the delta time\n            const deltaTime =  (Date.now() - this.time) / 1000;\n\n            // Update the time\n            this.time = Date.now();\n\n            // Update the app\n            this.update(deltaTime);\n            \n            // Compute the world transforms for all objects in the scene graph\n            this.scene.traverseSceneGraph();\n\n            // Call the late update method\n            this.lateUpdate(deltaTime);\n\n            // Draw the graphics\n            this.renderer.render(this.scene, this.camera);\n        }\n\n        // Run the main loop function on the next frame\n        window.requestAnimationFrame(() => this.mainLoop());\n    }\n\n    /**\n     * Resizes the viewport of the GfxApp\n     */\n    resize(): void\n    {\n        this.renderer.resize(window.innerWidth, window.innerHeight, this.camera.getAspectRatio());\n    }\n\n    /**\n     * Creates a simulated mouse down event for touch input\n     */\n    onTouchStart(event: TouchEvent): void\n    {\n        event.preventDefault();\n        if(event.touches.length == 1)\n            this.simulateMouseEvent('mousedown', event);\n    }\n\n    /**\n     * Creates a simulated mouse move event for touch input\n     */\n    onTouchMove(event: TouchEvent): void\n    {\n        event.preventDefault();\n        if(event.touches.length == 1)\n            this.simulateMouseEvent('mousemove', event);\n        else\n            this.simulateWheelEvent(event);\n    }\n\n    /**\n     * Creates a simulated mouse up event for touch input\n     */\n    onTouchEnd(event: TouchEvent): void\n    {\n        event.preventDefault();\n        if(event.touches.length == 0)\n            this.simulateMouseEvent('mouseup', event);\n    }\n\n    /**\n     * Handles focus events to pause and resume the application\n     * \n     * @param event - The FocusEvent\n     */\n    onFocusReceived(event: FocusEvent): void \n    {\n        this.resume();\n    }\n\n    /**\n     * Handles focus events to pause and resume the application\n     * \n     * @param event - The FocusEvent\n     */\n    onFocusLost(event: FocusEvent): void \n    {\n        this.pause();\n    }\n\n    /**\n     * Pauses the application\n     */\n    pause(): void\n    {\n        this.paused = true;\n    }\n\n    /**\n     * Resumes the application\n     */\n    resume(): void\n    {\n        this.time = Date.now();\n        this.paused = false;\n    }\n\n    /**\n     * Returns true if the application is paused\n     * \n     * @returns True if the application is paused, false otherwise\n     */\n    isPaused(): boolean\n    {\n        return this.paused;\n    }\n\n    /**\n     * Converts mouse coordinates to normalized device coordinates\n     * \n     * @param mouseX - The x coordinate of the mouse\n     * @param mouseY - The y coordinate of the mouse\n     * @returns The normalized device coordinates\n     */\n    getNormalizedDeviceCoordinates(mouseX: number, mouseY: number): Vector2\n    {\n        return this.renderer.getNormalizedDeviceCoordinates(mouseX, mouseY);\n    }\n\n    /**\n     * Simulates a mouse event from a given TouchEvent\n     * \n     * @param type - The type of mouse event to simulate\n     * @param touchEvent - The touch event to use for simulating the mouse event\n     */\n    private simulateMouseEvent(type: string, touchEvent: TouchEvent): void\n    {\n        if(this.previousTouches.length == 1)\n        {\n            const mouseEvent = new MouseEvent(type, {\n                'button': 0,\n                'buttons': 1,\n                'clientX': touchEvent.changedTouches[0].clientX, \n                'clientY': touchEvent.changedTouches[0].clientY,\n                'screenX': touchEvent.changedTouches[0].screenX,\n                'screenY': touchEvent.changedTouches[0].screenY,\n                'movementX': touchEvent.changedTouches[0].clientX - this.previousTouches[0].x,\n                'movementY': touchEvent.changedTouches[0].clientY - this.previousTouches[0].y,\n                'view': touchEvent.view,\n                cancelable: true,\n                bubbles: true,\n            });\n\n            touchEvent.target!.dispatchEvent(mouseEvent);\n        }\n\n        this.previousTouches = [ new Vector2(touchEvent.changedTouches[0].clientX, touchEvent.changedTouches[0].clientY) ];\n    }\n\n    /**\n     * Simulates a mouse wheel event from a given TouchEvent\n     * \n     * @param touchEvent - The touch event to use for simulating the wheel event\n     */\n    private simulateWheelEvent(touchEvent: TouchEvent): void\n    {\n        if(this.previousTouches.length > 1)\n        {\n            const previousDistance = this.previousTouches[0].distanceTo(this.previousTouches[1]);\n            const currentDistance = Math.sqrt(\n                (touchEvent.touches[0].clientX -  touchEvent.touches[1].clientX) * (touchEvent.touches[0].clientX -  touchEvent.touches[1].clientX) +\n                (touchEvent.touches[0].clientY -  touchEvent.touches[1].clientY) * (touchEvent.touches[0].clientY -  touchEvent.touches[1].clientY)\n            );\n            \n            let scaleFactor = 0;\n            if(currentDistance > previousDistance)\n                scaleFactor = -currentDistance / previousDistance;\n            else if(currentDistance < previousDistance)\n                scaleFactor = previousDistance / currentDistance;\n\n            const wheelEvent = new WheelEvent('wheel', {\n                'clientX': (touchEvent.touches[0].clientX + touchEvent.touches[1].clientX) / 2, \n                'clientY': (touchEvent.touches[0].clientY + touchEvent.touches[1].clientY) / 2,\n                'screenX': (touchEvent.touches[0].screenX + touchEvent.touches[1].screenX) / 2,\n                'screenY': (touchEvent.touches[0].screenY + touchEvent.touches[1].screenY) / 2,\n                'movementX': (\n                    (touchEvent.touches[0].clientX - this.previousTouches[0].x) + \n                    (touchEvent.touches[1].clientX - this.previousTouches[1].x) ) / 2,\n                'movementY': (\n                    (touchEvent.touches[0].clientY - this.previousTouches[0].y) + \n                    (touchEvent.touches[1].clientY - this.previousTouches[1].y) ) / 2,\n                'deltaX': 0,\n                'deltaY': 50 * scaleFactor,\n                'deltaZ': 0,\n                'deltaMode': WheelEvent.DOM_DELTA_PIXEL,\n                'view': touchEvent.view,\n                cancelable: true,\n                bubbles: true,\n            });\n\n            touchEvent.target!.dispatchEvent(wheelEvent);\n        }  \n\n        this.previousTouches = [];\n        for(let i = 0; i < touchEvent.changedTouches.length; i++)\n        {\n            this.previousTouches.push(new Vector2(touchEvent.touches[i].clientX, touchEvent.touches[i].clientY));\n        }   \n    }\n\n    /**\n     * Abstract method to be implemented by any subclass of GfxApp.\n     * Creates the scene for the application.\n     */\n    abstract createScene(): void;\n\n    /**\n     * Abstract method to be implemented by any subclass of GfxApp.\n     * Updates the application's state with the given deltaTime.\n     * \n     * @param deltaTime - Time elapsed since the last update call (in seconds)\n     */\n    abstract update(deltaTime: number): void;\n\n    /**\n     * Late update method to be called just before drawing the scene.\n     * Optional method - subclasses do not need to override it.\n     * \n     * @param deltaTime - Time elapsed since the last update call (in seconds)\n     */\n    lateUpdate(deltaTime: number): void {}\n\n    /**\n     * Method called after all assets are loaded before entering main loop.\n     * Optional method - subclasses do not need to override it.\n     */\n    onAssetsLoaded(): void {}\n\n    /**\n     * Method called when the mouse is clicked. Subclasses can override this method to handle the event.\n     * \n     * @param event - The MouseEvent object associated with the mouse click\n     */\n    onMouseDown(event: MouseEvent): void {}\n\n    /**\n     * Method called when the mouse is released. Subclasses can override this method to handle the event.\n     * \n     * @param event - The MouseEvent object associated with the mouse release\n     */\n    onMouseUp(event: MouseEvent): void {}\n\n    /**\n     * Method called when the mouse is moved. Subclasses can override this method to handle the event.\n     * \n     * @param event - The MouseEvent object associated with the mouse movement\n     */\n    onMouseMove(event: MouseEvent): void {}\n\n    /**\n     * Method called when the mouse wheel is moved. Subclasses can override this method to handle the event.\n     * \n     * @param event - The WheelEvent object associated with the mouse wheel movement\n     */\n    onMouseWheel(event: WheelEvent): void {}\n\n    /**\n     * Method called when a key is pressed. Subclasses can override this method to handle the event.\n     * \n     * @param event - The KeyboardEvent object associated with the key press\n     */\n    onKeyDown(event: KeyboardEvent): void {}\n\n    /**\n     * Method called when a key is released. Subclasses can override this method to handle the event.\n     * \n     * @param event - The KeyboardEvent object associated with the key release\n     */\n    onKeyUp(event: KeyboardEvent): void {}\n}", "import { GfxApp } from '../core/GfxApp';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Color } from '../math/Color';\n\nexport enum Side\n{\n    FRONT,\n    BACK,\n    DOUBLE\n}\n\nexport abstract class Material3\n{\n    public visible: boolean;\n    public side: Side;\n\n    protected readonly gl: WebGL2RenderingContext;\n\n    constructor()\n    {\n        this.visible = true;\n        this.side = Side.FRONT;\n        this.gl  = GfxApp.getInstance().renderer.gl;\n    }\n\n    protected initialize(): void\n    {\n        if(this.side == Side.DOUBLE)\n        {\n            this.gl.disable(this.gl.CULL_FACE);\n            return;\n        }\n\n        this.gl.enable(this.gl.CULL_FACE);\n\n        if(this.side == Side.FRONT)\n             this.gl.cullFace(this.gl.BACK);\n        else\n            this.gl.cullFace(this.gl.FRONT);\n    }\n\n    abstract draw(object: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void;\n    abstract setColor(color: Color): void;\n}", "export class ShaderProgram\n{\n    private vertexShader: WebGLShader | null;\n    private fragmentShader: WebGLShader | null;\n    private shaderProgram: WebGLProgram | null;\n    private vertexSource: string;\n    private fragmentSource: string;\n\n    public initialized: boolean;\n\n    constructor(vertexSource: string, fragmentSource: string)\n    {\n        this.vertexSource = vertexSource;\n        this.fragmentSource = fragmentSource;\n        this.vertexShader = null;\n        this.fragmentShader = null;\n        this.shaderProgram = null;\n        this.initialized = false;\n    }\n\n    public initialize(gl: WebGL2RenderingContext): void \n    {\n        if(this.initialized)\n            return;\n\n        this.initialized = true;\n\n        this.vertexShader = this.createVertexShader(gl, this.vertexSource);\n        this.fragmentShader = this.createFragmentShader(gl, this.fragmentSource);\n\n        if(this.vertexShader && this.fragmentShader)\n            this.shaderProgram = this.createShaderProgram(gl, this.vertexShader, this.fragmentShader); \n    }\n\n    private createVertexShader(gl: WebGL2RenderingContext, source: string): WebGLShader | null \n    {\n        const shader = gl.createShader(gl.VERTEX_SHADER);\n\n        if(!shader)\n        {\n            console.error('Error: unable to create vertex shader');\n        }\n        else\n        {\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n\n            if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n            {\n                 console.error('Error: unable to load vertex shader');\n                 console.error(gl.getShaderInfoLog(shader));\n            }\n        }\n\n        return shader;\n    }\n\n    private createFragmentShader(gl: WebGL2RenderingContext, source: string): WebGLShader | null  \n    {\n        const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n        if(!shader)\n        {\n            console.error('Error: unable to create fragment shader');\n        }\n        else\n        {\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n\n            if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n            {\n                 console.error('Error: unable to load fragment shader');\n                 console.error(gl.getShaderInfoLog(shader));\n            }\n        }\n\n        return shader;\n    }\n\n    private createShaderProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram | null\n    {\n        let program: WebGLShader | null = null;\n\n        if(vertexShader && fragmentShader)\n        {\n            program = gl.createProgram();\n\n            if(!program)\n            {\n                console.error(\"Error: could not create shader program\");\n                return null;\n            }\n            \n\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n\n            if(!gl.getProgramParameter(program, gl.LINK_STATUS))\n            {\n                console.error(\"Error: could not link shader program\");\n                console.error(gl.getProgramInfoLog(program));\n                return null;\n            }\n        }\n\n        return program;\n    }\n\n    public getProgram(): WebGLProgram | null\n    {\n        return this.shaderProgram;\n    }\n\n    public getAttribute(gl: WebGL2RenderingContext, attribute: string): number\n    {\n        if(this.shaderProgram)\n            return gl.getAttribLocation(this.shaderProgram, attribute);\n        else\n            return -1;\n    }\n\n    public getUniform(gl: WebGL2RenderingContext, uniform: string): WebGLUniformLocation | null\n    {\n        \n        if(this.shaderProgram)\n            return gl.getUniformLocation(this.shaderProgram, uniform);\n        else\n            return null;\n    }\n}", "// @ts-ignore\nimport gouraudVertexShader from '../shaders/gouraud.vert'\n// @ts-ignore\nimport gouraudFragmentShader from '../shaders/gouraud.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Texture } from './Texture';\nimport { Vector3 } from '../math/Vector3'\nimport { Color } from '../math/Color' \n\nexport class GouraudMaterial extends Material3\n{\n    public texture: Texture | null;\n    public ambientColor: Color;\n    public diffuseColor: Color;\n    public specularColor: Color;\n    public shininess: number;\n\n    public static shader = new ShaderProgram(gouraudVertexShader, gouraudFragmentShader);\n\n    private kAmbientUniform: WebGLUniformLocation | null;\n    private kDiffuseUniform: WebGLUniformLocation | null;\n    private kSpecularUniform: WebGLUniformLocation | null;\n    private shininessUniform: WebGLUniformLocation | null;\n    \n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private eyePositionUniform: WebGLUniformLocation | null;\n    private modelUniform: WebGLUniformLocation | null;\n    private viewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n    private normalUniform: WebGLUniformLocation | null;\n\n    private numLightsUniform: WebGLUniformLocation | null;\n    private lightTypesUniform: WebGLUniformLocation | null;\n    private lightPositionsUniform: WebGLUniformLocation | null;\n    private ambientIntensitiesUniform: WebGLUniformLocation | null;\n    private diffuseIntensitiesUniform: WebGLUniformLocation | null;\n    private specularIntensitiesUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private normalAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    constructor()\n    {\n        super();\n\n        this.texture = null;\n        this.ambientColor = new Color(1, 1, 1);\n        this.diffuseColor = new Color(1, 1, 1);\n        this.specularColor = new Color(0, 0, 0);\n        this.shininess = 30;\n\n        GouraudMaterial.shader.initialize(this.gl);\n\n        this.kAmbientUniform = GouraudMaterial.shader.getUniform(this.gl, 'kAmbient');\n        this.kDiffuseUniform = GouraudMaterial.shader.getUniform(this.gl, 'kDiffuse');\n        this.kSpecularUniform = GouraudMaterial.shader.getUniform(this.gl, 'kSpecular');\n        this.shininessUniform = GouraudMaterial.shader.getUniform(this.gl, 'shininess');\n\n        this.textureUniform = GouraudMaterial.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = GouraudMaterial.shader.getUniform(this.gl, 'useTexture');\n\n        this.eyePositionUniform = GouraudMaterial.shader.getUniform(this.gl, 'eyePosition');\n        this.viewUniform = GouraudMaterial.shader.getUniform(this.gl, 'viewMatrix');\n        this.modelUniform = GouraudMaterial.shader.getUniform(this.gl, 'modelMatrix');\n        this.projectionUniform = GouraudMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n        this.normalUniform = GouraudMaterial.shader.getUniform(this.gl, 'normalMatrix');\n\n        this.numLightsUniform = GouraudMaterial.shader.getUniform(this.gl, 'numLights');\n        this.lightTypesUniform = GouraudMaterial.shader.getUniform(this.gl, 'lightTypes');\n        this.lightPositionsUniform = GouraudMaterial.shader.getUniform(this.gl, 'lightPositions');\n        this.ambientIntensitiesUniform = GouraudMaterial.shader.getUniform(this.gl, 'ambientIntensities');\n        this.diffuseIntensitiesUniform = GouraudMaterial.shader.getUniform(this.gl, 'diffuseIntensities');\n        this.specularIntensitiesUniform = GouraudMaterial.shader.getUniform(this.gl, 'specularIntensities');\n\n        this.positionAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'position');\n        this.normalAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'normal');\n        this.colorAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'texCoord');   \n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        this.initialize();\n\n        // Switch to this shader\n        this.gl.useProgram(GouraudMaterial.shader.getProgram());\n\n        // Set the camera uniforms\n        const cameraPosition = new Vector3();\n        cameraPosition.transform(camera.worldMatrix);\n        this.gl.uniform3f(this.eyePositionUniform, cameraPosition.x, cameraPosition.y, cameraPosition.z);\n        this.gl.uniformMatrix4fv(this.modelUniform, false, transform.worldMatrix.mat);\n        this.gl.uniformMatrix4fv(this.viewUniform, false, camera.viewMatrix.mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n        this.gl.uniformMatrix4fv(this.normalUniform, false, transform.worldMatrix.inverse().transpose().mat);\n\n        // Set the material property uniforms\n        this.gl.uniform3f(this.kAmbientUniform, this.ambientColor.r, this.ambientColor.g, this.ambientColor.b);\n        this.gl.uniform3f(this.kDiffuseUniform, this.diffuseColor.r, this.diffuseColor.g, this.diffuseColor.b);\n        this.gl.uniform3f(this.kSpecularUniform,this.specularColor.r, this.specularColor.g, this.specularColor.b);\n        this.gl.uniform1f(this.shininessUniform, this.shininess);\n\n        // Set the light uniforms\n        this.gl.uniform1i(this.numLightsUniform, lightManager.getNumLights());\n        this.gl.uniform1iv(this.lightTypesUniform, lightManager.lightTypes);\n        this.gl.uniform3fv(this.lightPositionsUniform, lightManager.lightPositions);\n        this.gl.uniform3fv(this.ambientIntensitiesUniform, lightManager.ambientIntensities);\n        this.gl.uniform3fv(this.diffuseIntensitiesUniform, lightManager.diffuseIntensities);\n        this.gl.uniform3fv(this.specularIntensitiesUniform, lightManager.specularIntensities);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex normals\n        this.gl.enableVertexAttribArray(this.normalAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.normalBuffer);\n        this.gl.vertexAttribPointer(this.normalAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        if(this.texture)\n        {\n            // Activate the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 1);\n\n            // Set the texture\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n            this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n            // Set the texture coordinates\n            this.gl.enableVertexAttribArray(this.texCoordAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.texCoordBuffer);\n            this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n            this.gl.disableVertexAttribArray(this.texCoordAttribute);\n        }\n\n        // Draw the triangles\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n        this.gl.drawElements(this.gl.TRIANGLES, mesh.triangleCount*3, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    setColor(color: Color): void\n    {\n        this.ambientColor.copy(color);\n        this.diffuseColor.copy(color);\n        this.specularColor.copy(color);\n    }\n}", "import { Transform3 } from \"../../core/Transform3\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Color } from \"../../math/Color\";\nimport { Material3 } from \"../../materials/Material3\";\nimport { GouraudMaterial } from \"../../materials/GouraudMaterial\";\nimport { Camera } from \"../../core/Camera\";\nimport { LightManager } from \"../../lights/LightManager\";\nimport { GfxApp } from \"../../core/GfxApp\";\nimport { BoundingBox3 } from \"../../math/BoundingBox3\";\nimport { BoundingSphere } from \"../../math/BoundingSphere\";\n\nexport class Mesh extends Transform3\n{\n    protected readonly gl: WebGL2RenderingContext;\n\n    public positionBuffer: WebGLBuffer | null;\n    public normalBuffer: WebGLBuffer | null;\n    public colorBuffer: WebGLBuffer | null;\n    public indexBuffer: WebGLBuffer | null;\n    public texCoordBuffer: WebGLBuffer | null;\n    public morphTargetPositionBuffer: WebGLBuffer | null;\n    public morphTargetNormalBuffer: WebGLBuffer | null;\n\n    public vertexCount: number;\n    public triangleCount: number;\n\n    public positionCache: number[] | null;\n    public normalCache: number[] | null;\n    public colorCache: number[] | null;\n    public indexCache: number[] | null;\n    public texCoordCache: number[] | null;\n\n    public material: Material3;\n    public morphTargetBoundingBox: BoundingBox3;\n    public morphTargetBoundingSphere: BoundingSphere;\n\n    constructor()\n    {\n        super();\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.positionBuffer = this.gl.createBuffer();\n        this.normalBuffer = this.gl.createBuffer();\n        this.colorBuffer = this.gl.createBuffer();\n        this.indexBuffer = this.gl.createBuffer();\n        this.texCoordBuffer = this.gl.createBuffer();\n        this.morphTargetPositionBuffer = this.gl.createBuffer();\n        this.morphTargetNormalBuffer = this.gl.createBuffer();\n\n        this.vertexCount = 0;\n        this.triangleCount = 0;\n\n        this.positionCache = null;\n        this.normalCache = null;\n        this.colorCache = null;\n        this.indexCache = null;\n        this.texCoordCache = null;\n\n        this.material = new GouraudMaterial();\n        this.morphTargetBoundingBox = new BoundingBox3();\n        this.morphTargetBoundingSphere = new BoundingSphere();\n    }\n\n    draw(parent: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this, this, camera, lightManager);\n\n        this.children.forEach((elem: Transform3) => {\n            elem.draw(this, camera, lightManager);\n        });\n    }\n\n    setVertices(vertices: Vector3[] | number[], dynamicDraw = false): void\n    {\n        this.positionCache = null;\n\n        if(vertices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n            if(typeof vertices[0] === 'number')\n            {\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices as number[]), this.gl.STATIC_DRAW);\n                \n                this.vertexCount = vertices.length / 3;\n                this.boundingBox.computeBounds(vertices);\n                this.boundingSphere.computeBounds(vertices, this.boundingBox);\n            }\n            else\n            {\n                const vArray: number[] = [];\n                (vertices as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    vArray.push(elem.x, elem.y, elem.z);\n                });\n\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), this.gl.STATIC_DRAW);\n\n                this.vertexCount = vertices.length;\n                this.boundingBox.computeBounds(vArray);\n                this.boundingSphere.computeBounds(vArray, this.boundingBox);\n            }      \n        }\n    }\n\n    setNormals(normals: Vector3[] | number[], dynamicDraw = false): void\n    {\n        this.normalCache = null;\n\n        if(normals.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.normalBuffer);\n\n            if(typeof normals[0] === 'number')\n            {\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(normals as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(normals as number[]), this.gl.STATIC_DRAW);\n            }\n            else\n            {\n                const nArray: number[] = [];\n                (normals as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    nArray.push(elem.x, elem.y, elem.z);\n                });\n                \n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), this.gl.STATIC_DRAW);\n            }\n        }\n    }\n\n    setColors(colors: Color[] | number[], dynamicDraw = false): void\n    {\n        this.colorCache = null;\n\n        if(colors.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n\n            if(typeof colors[0] === 'number')\n            {\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors as number[]), this.gl.STATIC_DRAW);\n            }\n            else\n            {\n                const cArray: number[] = [];\n                (colors as Color[]).forEach((elem: Color) =>\n                {\n                    cArray.push(elem.r, elem.g, elem.b, elem.a);\n                });\n                \n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cArray), this.gl.STATIC_DRAW);\n            }\n        }\n    }\n\n    setTextureCoordinates(texCoords: Vector2[] | number[], dynamicDraw = false): void\n    {\n        this.texCoordCache = null;\n\n        if(texCoords.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n\n            if(typeof texCoords[0] === 'number')\n            {\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texCoords as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texCoords as number[]), this.gl.STATIC_DRAW);\n            }\n            else\n            {\n                const tArray: number[] = [];\n                (texCoords as Vector2[]).forEach((elem: Vector2) =>\n                {\n                    tArray.push(elem.x, elem.y);\n                });\n                \n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(tArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(tArray), this.gl.STATIC_DRAW);\n            }\n        }\n    }\n\n    setIndices(indices: Vector3[] | number[], dynamicDraw = false): void\n    {\n        this.indexCache = null;\n\n        if(indices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n            if(typeof indices[0] === 'number')\n            {\n                this.triangleCount = indices.length / 3;\n\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices as number[]), this.gl.STATIC_DRAW);\n            }\n            else\n            {\n                this.triangleCount = indices.length;\n                const iArray: number[] = [];\n                (indices as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    iArray.push(elem.x, elem.y, elem.z);\n                });\n                \n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(iArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(iArray), this.gl.STATIC_DRAW);\n            }\n        }\n    }\n\n    setArrayBuffer(values: Vector3[] | number[], buffer: WebGLBuffer | null, dynamicDraw = false): void\n    {\n        if(values.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n\n            if(typeof values[0] === 'number')\n            {\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(values as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(values as number[]), this.gl.STATIC_DRAW);\n            }\n            else\n            {\n                const nArray: number[] = [];\n                (values as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    nArray.push(elem.x, elem.y, elem.z);\n                });\n                \n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), this.gl.STATIC_DRAW);\n            }\n        }\n    }\n\n    setMorphTargetVertices(vertices: Vector3[] | number[], dynamicDraw = false, computeBounds = true): void\n    {\n        if(vertices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.morphTargetPositionBuffer);\n\n            if(typeof vertices[0] === 'number')\n            {\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices as number[]), this.gl.STATIC_DRAW);\n\n                this.morphTargetBoundingBox.computeBounds(vertices);\n                this.morphTargetBoundingSphere.computeBounds(vertices, this.morphTargetBoundingBox);\n            }\n            else\n            {\n                const vArray: number[] = [];\n                (vertices as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    vArray.push(elem.x, elem.y, elem.z);\n                });\n\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), this.gl.STATIC_DRAW);\n\n                this.morphTargetBoundingBox.computeBounds(vArray);\n                this.morphTargetBoundingSphere.computeBounds(vArray, this.morphTargetBoundingBox);\n            }\n        }\n    }\n\n    setMorphTargetNormals(normals: Vector3[] | number[], dynamicDraw = false): void\n    {\n        if(normals.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.morphTargetNormalBuffer);\n\n            if(typeof normals[0] === 'number')\n            {\n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(normals as number[]), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(normals as number[]), this.gl.STATIC_DRAW);\n            }\n            else\n            {\n                const nArray: number[] = [];\n                (normals as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    nArray.push(elem.x, elem.y, elem.z);\n                });\n                \n                if(dynamicDraw)\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), this.gl.DYNAMIC_DRAW);\n                else\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), this.gl.STATIC_DRAW);\n            }\n        }\n    }\n\n    getVertices(): number[]\n    {\n        if(!this.positionCache)\n        {\n            const vertexArray = new Float32Array(this.vertexCount * 3);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n            this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, vertexArray);\n            this.positionCache = [... vertexArray];\n        }\n\n        return this.positionCache;\n    }\n\n    getNormals(): number[]\n    {\n        if(!this.normalCache)\n        {\n            const normalArray = new Float32Array(this.vertexCount * 3);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.normalBuffer);\n            this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, normalArray);\n            this.normalCache = [... normalArray];\n        }\n\n        return this.normalCache;\n    }\n\n    getColors(): number[]\n    {\n        if(!this.colorCache)\n        {\n            const colorArray = new Float32Array(this.vertexCount * 4);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n            this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, colorArray);\n            this.colorCache = [... colorArray];\n        }\n\n        return this.colorCache;\n    }\n\n    getTextureCoordinates(): number[]\n    {\n        if(!this.texCoordCache)\n        {\n            const texCoordArray = new Float32Array(this.vertexCount * 2);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n            this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, texCoordArray);\n            this.texCoordCache = [... texCoordArray];\n        }\n\n        return this.texCoordCache;\n    }\n\n    getIndices(): number[]\n    {\n        if(!this.indexCache)\n        {\n            const indexArray = new Uint16Array(this.triangleCount * 3);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n            this.gl.getBufferSubData(this.gl.ELEMENT_ARRAY_BUFFER, 0, indexArray);\n            this.indexCache = [... indexArray];\n        }\n\n        return this.indexCache;\n    }\n\n    getArrayBuffer(buffer: WebGLBuffer | null): number[]\n    {\n        const valueArray = new Float32Array(this.vertexCount * 3);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, valueArray);\n        return [... valueArray];\n    }\n\n    public createDefaultVertexColors(): void\n    {\n        const colors: number[] = [];\n\n        for(let i=0; i < this.vertexCount; i++)\n            colors.push(1, 1, 1, 1);\n\n        this.setColors(colors);\n    }\n\n    public computeBounds(vertices: Vector3[] | number[] | null): void\n    {\n        if(!vertices)\n        {\n            vertices = this.getVertices();\n        } \n        \n        if(vertices.length == 0)\n            return;\n;\n        this.boundingBox.computeBounds(vertices);\n        this.boundingSphere.computeBounds(vertices, this.boundingBox);\n    }\n\n    public mergeSharedVertices(): void\n    {\n        const vArray = this.getVertices();\n        const nArray = this.getNormals();\n        const cArray = this.getColors();\n        const uvArray = this.getTextureCoordinates();\n\n        const vertices: Vector3[] = [];\n        const normals: Vector3[] = [];\n        const colors: Color[] = [];\n        const uvs: Vector2[] = [];\n        const indices = this.getIndices();\n\n        // Copy the vertices, normals, and colors into Vector3 arrays for convenience\n        for(let i=0; i < vArray.length; i+=3)\n        {\n            vertices.push(new Vector3(vArray[i], vArray[i+1], vArray[i+2]));\n            normals.push(new Vector3(nArray[i], nArray[i+1], nArray[i+2]));\n            colors.push(new Color(cArray[i], cArray[i+1], cArray[i+2]));\n        }\n\n        // Copy the uvs into a Vector2 arrays for convenience\n        for(let i=0; i < uvArray.length; i+=2)\n        {\n            uvs.push(new Vector2(uvArray[i], uvArray[i+1]));\n        }\n\n        const newVertices: Vector3[] = [];\n        const newNormals: Vector3[] = [];\n        const newColors: Color[] = [];\n        const newUVs: Vector2[] = [];\n        const newIndices: number[] = indices.slice();\n        const counts: number[] = [];\n\n        for(let i=0; i < vertices.length; i++)\n        {\n            let duplicate = false;\n            for(let j = 0; j < newVertices.length; j++)\n            {\n                if(vertices[i].equals(newVertices[j]))\n                {\n                    for(let k = 0; k < indices.length; k++)\n                    {\n                        if(indices[k] == i)\n                            newIndices[k] = j;\n                    }\n\n                    newNormals[j].add(normals[i]);\n                    newColors[j].add(colors[i]);\n                    newUVs[j].add(uvs[i]);\n                    counts[j]++;\n                    duplicate = true;\n                }   \n            }\n\n            if(!duplicate)\n            {\n                newVertices.push(vertices[i]);\n                newNormals.push(normals[i]);\n                newColors.push(colors[i]);\n                newUVs.push(uvs[i]);\n                counts.push(1);\n\n                for(let k = 0; k < indices.length; k++)\n                {\n                    if(indices[k] == i)\n                        newIndices[k] = newVertices.length-1;\n                }\n            }\n        }\n\n        for(let i=0; i < newVertices.length; i++)\n        {\n            newNormals[i].multiplyScalar(1 / counts[i]);\n            newColors[i].multiplyScalar(1 / counts[i]);\n            newUVs[i].multiplyScalar(1 / counts[i]);\n        }\n\n        this.setVertices(newVertices);\n        this.setNormals(newNormals);\n        this.setColors(newColors);\n        this.setTextureCoordinates(newUVs);\n        this.setIndices(newIndices);\n    }\n}", "import { Mesh } from './Mesh'\nimport { Transform3 } from '../../core/Transform3'\nimport { Camera } from \"../../core/Camera\";\nimport { LightManager } from \"../../lights/LightManager\";\nimport { Material3 } from '../../materials/Material3';\n\nexport class MeshInstance extends Transform3\n{\n    public readonly baseMesh;\n    public material: Material3;\n\n    constructor(baseMesh: Mesh, copyTransform = true)\n    {\n        super();\n        this.baseMesh = baseMesh;\n        this.material = baseMesh.material;\n\n        if(copyTransform)\n        {\n            this.position.copy(baseMesh.position);\n            this.rotation.copy(baseMesh.rotation);\n            this.scale.copy(baseMesh.scale);\n        }\n    }\n\n    getBaseMesh(): Mesh\n    {\n        return this.baseMesh;\n    }\n\n    draw(parent: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this.baseMesh, this, camera, lightManager);\n\n        this.children.forEach((elem: Transform3) => {\n            elem.draw(this, camera, lightManager);\n        });\n    }\n}", "import { Mesh } from './Mesh'\nimport { Vector3 } from '../../math/Vector3';\n\nexport class BoxMesh extends Mesh\n{\n    public readonly width: number;\n    public readonly height: number;\n    public readonly depth: number;\n\n    constructor(width = 1, height = 1, depth = 1)\n    {\n        super();\n        \n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n\n        this.createVertices(this.width, this.height, this.depth);\n        this.createNormals();\n        this.createTextureCoords();\n        this.createIndices();\n        this.createDefaultVertexColors();\n    }\n\n    /**\n     * Sets the line for the box mesh.\n     * \n     * @param startPoint - The start point of the line\n     * @param endPoint - The end point of the line\n     * @param thickness - The thickness of the line\n     */\n    public setLine(startPoint: Vector3, endPoint: Vector3, thickness: number)\n    {\n        this.position.copy(startPoint);\n        this.lookAt(endPoint);\n\n        const distance = Vector3.distanceBetween(startPoint, endPoint);\n        this.translateZ(-distance/2);\n        this.scale.x = thickness;\n        this.scale.y = thickness;\n        this.scale.z = distance;\n    }\n\n    /**\n     * Create vertices for the box mesh.\n     * \n     * @param width - The width of the box\n     * @param height - The height of the box\n     * @param depth - The depth of the box\n     */\n    private createVertices(width: number, height: number, depth: number): void\n    {\n        const vertices: number[] = [];\n\n        // Front face\n        vertices.push(-width/2, -height/2, depth/2);\n        vertices.push(width/2, -height/2, depth/2);\n        vertices.push(width/2, height/2, depth/2);\n        vertices.push(-width/2, height/2, depth/2);\n\n        // Back face\n        vertices.push(-width/2, -height/2, -depth/2);\n        vertices.push(width/2, -height/2, -depth/2);\n        vertices.push(width/2, height/2, -depth/2);\n        vertices.push(-width/2, height/2, -depth/2);\n\n        // Left face\n        vertices.push(-width/2, -height/2, -depth/2);\n        vertices.push(-width/2, -height/2, depth/2);\n        vertices.push(-width/2, height/2, depth/2);\n        vertices.push(-width/2, height/2, -depth/2);\n\n        // Left face\n        vertices.push(width/2, -height/2, -depth/2);\n        vertices.push(width/2, -height/2, depth/2);\n        vertices.push(width/2, height/2, depth/2);\n        vertices.push(width/2, height/2, -depth/2);\n\n        // Top face\n        vertices.push(-width/2, height/2, depth/2);\n        vertices.push(width/2, height/2, depth/2);\n        vertices.push(width/2, height/2, -depth/2);\n        vertices.push(-width/2, height/2, -depth/2);\n\n        // Bottom face\n        vertices.push(-width/2, -height/2, depth/2);\n        vertices.push(width/2, -height/2, depth/2);\n        vertices.push(width/2, -height/2, -depth/2);\n        vertices.push(-width/2, -height/2, -depth/2);\n        \n        this.setVertices(vertices);\n    }\n\n    /**\n     * Create the normals for the box mesh.\n     */\n    private createNormals(): void\n    {\n        const normals: number[] = [];\n\n        // Front face\n        normals.push(0, 0, 1);\n        normals.push(0, 0, 1);\n        normals.push(0, 0, 1);\n        normals.push(0, 0, 1);\n\n        // Back face\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n\n        // Left face\n        normals.push(-1, 0, 0);\n        normals.push(-1, 0, 0);\n        normals.push(-1, 0, 0);\n        normals.push(-1, 0, 0);\n\n        // Right face\n        normals.push(1, 0, 0);\n        normals.push(1, 0, 0);\n        normals.push(1, 0, 0);\n        normals.push(1, 0, 0);\n\n        // Top face\n        normals.push(0, 1, 0);\n        normals.push(0, 1, 0);\n        normals.push(0, 1, 0);\n        normals.push(0, 1, 0);\n\n        // Bottom face\n        normals.push(0, -1, 0);\n        normals.push(0, -1, 0);\n        normals.push(0, -1, 0);\n        normals.push(0, -1, 0);\n       \n        this.setNormals(normals);\n    }\n\n    /**\n     * Create the indices for the box mesh.\n     */\n    private createIndices(): void\n    {\n        const indices: number[] = [];\n\n        // Front face\n        indices.push(0, 1, 2);\n        indices.push(2, 3, 0);\n\n        // Back face\n        indices.push(4, 6, 5);\n        indices.push(6, 4, 7);\n\n        // Left face\n        indices.push(8, 9, 10);\n        indices.push(10, 11, 8);\n\n        // Right face\n        indices.push(12, 14, 13);\n        indices.push(14, 12, 15);\n\n        // Top face\n        indices.push(16, 17, 18);\n        indices.push(18, 19, 16);\n\n        // Bottom face\n        indices.push(20, 22, 21);\n        indices.push(22, 20, 23);\n\n        this.setIndices(indices);\n    }\n\n    /**\n     * Create the texture coordinates for the box mesh.\n     */\n    private createTextureCoords(): void\n    {\n        const uvs: number[] = [];\n\n        // Front face\n        uvs.push(0, 1);\n        uvs.push(1, 1);\n        uvs.push(1, 0);\n        uvs.push(0, 0);\n\n        // Back face\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n        // Left face\n        uvs.push(0, 1);\n        uvs.push(1, 1);\n        uvs.push(1, 0);\n        uvs.push(0, 0);\n\n        // Right face\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n        // Top face\n        uvs.push(0, 1);\n        uvs.push(1, 1);\n        uvs.push(1, 0);\n        uvs.push(0, 0);\n\n        // Bottom face\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n       this.setTextureCoordinates(uvs);\n    }\n}\n", "import { Mesh } from './Mesh';\nimport { Vector3 } from '../../math/Vector3';\n\nexport class SphereMesh extends Mesh\n{\n    public readonly radius;\n    public readonly subdivisions;\n\n    constructor(radius = 1, subdivisions=3)\n    {\n        super();\n        \n        this.radius = radius;\n        this.subdivisions = subdivisions;\n\n        this.createSphere(this.radius, this.subdivisions);\n    }\n\n    // Based on approach from \n    // https://www.danielsieger.com/blog/2021/01/03/generating-platonic-solids.html\n    // https://www.danielsieger.com/blog/2021/03/27/generating-spheres.html\n    private createSphere(radius: number, subdivisions: number): void\n    {\n        let vertices = [];\n        let indices = [];\n        const normals = [];\n        const texCoords = [];\n\n        const phi = (1 + Math.sqrt(5)) * 0.5; // golden ratio\n        const a = 1;\n        const b = 1 / phi;\n\n        vertices.push(new Vector3(0, b, -a));\n        vertices.push(new Vector3(b, a, 0));\n        vertices.push(new Vector3(-b, a, 0));\n        vertices.push(new Vector3(0, b, a));\n        vertices.push(new Vector3(0, -b, a));\n        vertices.push(new Vector3(-a, 0, b));\n        vertices.push(new Vector3(0, -b, -a));\n        vertices.push(new Vector3(a, 0, -b));\n        vertices.push(new Vector3(a, 0, b));\n        vertices.push(new Vector3(-a, 0, -b));\n        vertices.push(new Vector3(b, -a, 0));\n        vertices.push(new Vector3(-b, -a, 0));\n\n        // Project to unit sphere\n        for(let i=0; i < vertices.length; i++)\n        {\n            vertices[i].normalize();\n        }\n\n        indices.push(2, 1, 0);\n        indices.push(1, 2, 3);\n        indices.push(5, 4, 3);\n        indices.push(4, 8, 3);\n        indices.push(7, 6, 0);\n        indices.push(6, 9, 0);\n        indices.push(11, 10, 4);\n        indices.push(10, 11, 6);\n        indices.push(9, 5, 2);\n        indices.push(5, 9, 11);\n        indices.push(8, 7, 1);\n        indices.push(7, 8, 10);\n        indices.push(2, 5, 3);\n        indices.push(8, 1, 3);\n        indices.push(9, 2, 0);\n        indices.push(1, 7, 0);\n        indices.push(11, 9, 6);\n        indices.push(7, 10, 6);\n        indices.push(5, 11, 4);\n        indices.push(10, 8, 4);\n\n        for(let div=0; div < subdivisions; div++)\n        {\n            const newIndices = [];\n            for(let i=0; i < indices.length / 3; i++)\n            {\n                const index = i*3;\n                const centroids = this.createCentroids(vertices, indices[index], indices[index+1], indices[index+2]);\n                vertices.push(...centroids);\n\n                const triangles = this.subdivide(indices[index], indices[index+1], indices[index+2], \n                    vertices.length - 3, vertices.length - 2, vertices.length - 1);\n                    newIndices.push(... triangles);\n            }\n            indices = newIndices;\n        }\n\n        // Scale by the radius\n        for(let i=0; i < vertices.length; i++)\n        {\n            vertices[i].multiplyScalar(radius);\n        }\n\n        [vertices, indices] = this.mergeSphereVertices(vertices, indices);\n        \n        // Compute texture coordinates\n        for(let i=0; i < vertices.length; i++)\n        {\n            normals.push(Vector3.normalize(vertices[i]));\n\n            const v = 1 - (vertices[i].y + radius) / (2 * radius);\n\n            const direction = new Vector3(vertices[i].x, 0, vertices[i].z);\n            direction.normalize();\n\n            let angle = Math.acos(Vector3.FORWARD.dot(direction));\n            if(direction.x > 0)\n                 angle = Math.PI * 2 - angle;\n\n            const u = angle / (Math.PI * 2);\n            texCoords.push(u, v);\n        }\n        \n        const indicesLength = indices.length;\n\n        // Fix the texture seam by duplicating the vertices at the vertical edge of the sphere\n        for(let i=0; i < indicesLength; i+=3)\n        {\n            if(this.isSeamVertex(i, vertices, indices))\n            {\n                if(this.isEndVertex(i+1, vertices, indices) && this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    indices[i] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+1, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+1] = vertices.length-1;\n                }\n            }\n            else if(this.isSeamVertex(i+1, vertices, indices))\n            { \n                if(this.isEndVertex(i, vertices, indices) && this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    indices[i+1] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i+1] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+1] = vertices.length-1;\n                }\n            }\n            else if(this.isSeamVertex(i+2, vertices, indices))\n            {\n                if(this.isEndVertex(i, vertices, indices) && this.isEndVertex(i+1, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i+1] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+1, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n            }\n        }\n\n        this.setVertices(vertices);\n        this.setNormals(normals);\n        this.setTextureCoordinates(texCoords);\n        this.setIndices(indices);\n        this.createDefaultVertexColors();\n    }\n\n    private isEndVertex(i: number, vertices: Vector3[], indices: number[]): boolean\n    {\n        if(vertices[indices[i]].x > 0)\n            return true;\n        else\n            return false;\n    }\n\n    private isSeamVertex(i: number, vertices: Vector3[], indices: number[]): boolean\n    {\n        if(vertices[indices[i]].x == 0 && vertices[indices[i]].z <= 0)\n            return true;\n        else\n            return false;\n    }\n\n    private createCentroids(vertices: Vector3[], v1: number, v2: number, v3: number): Vector3[]\n    {\n        const centroids = [];\n\n        const centroid1 = Vector3.add(vertices[v1], vertices[v2]);\n        centroid1.divideScalar(2);\n        centroid1.normalize();\n        centroids.push(centroid1);\n\n        const centroid2 = Vector3.add(vertices[v2], vertices[v3]);\n        centroid2.divideScalar(2);\n        centroid2.normalize();\n        centroids.push(centroid2);\n\n        const centroid3 = Vector3.add(vertices[v3], vertices[v1]);\n        centroid3.divideScalar(2);\n        centroid3.normalize();\n        centroids.push(centroid3);\n\n        return centroids;\n    }\n\n    private subdivide(v1: number, v2: number, v3: number, c1: number, c2: number, c3: number): number[]\n    {\n        const triangles = [];\n        triangles.push(v1, c1, c3);\n        triangles.push(v2, c2, c1);\n        triangles.push(v3, c3, c2);\n        triangles.push(c1, c2, c3);\n        return triangles;\n    }\n\n    private mergeSphereVertices(vertices: Vector3[], indices: number[]): [Vector3[], number[]]\n    {\n        const newVertices: Vector3[] = [];\n        const newIndices: number[] = [];\n\n        indices.forEach((elem: number) => {\n            newIndices.push(elem);\n        });\n\n        for(let i=0; i < vertices.length; i++)\n        {\n            let duplicate = false;\n            for(let j = 0; j < newVertices.length; j++)\n            {\n                if(vertices[i].equals(newVertices[j]))\n                {\n                    for(let k = 0; k < indices.length; k++)\n                    {\n                        if(indices[k] == i)\n                            newIndices[k] = j;\n                    }\n\n                    duplicate = true;\n                }   \n            }\n\n            if(!duplicate)\n            {\n                newVertices.push(vertices[i]);\n\n                for(let k = 0; k < indices.length; k++)\n                {\n                    if(indices[k] == i)\n                        newIndices[k] = newVertices.length-1;\n                }\n            }\n        }\n\n        return [newVertices, newIndices];\n    }\n}", "import { Mesh } from './Mesh'\n\nexport class ConeMesh extends Mesh\n{\n    public readonly radius: number;\n    public readonly height: number;\n\n    constructor(radius = 1, height = 1, numSegments = 8)\n    {\n        super();\n        \n        this.radius = radius;\n        this.height = height;\n\n        this.createVertices(this.radius, this.height, numSegments);\n        this.createNormals(numSegments);\n        this.createTextureCoords(numSegments);\n        this.createIndices(numSegments);\n        this.createDefaultVertexColors();\n    }\n\n    private createVertices(radius: number, height: number, numSegments: number): void\n    {\n        const vertices: number[] = [];\n\n        const angle = (Math.PI * 2) / numSegments;\n\n        // Top vertex\n        vertices.push(0, height/2, 0);\n\n        // Side vertices\n        for(let i=0; i <= numSegments; i++)\n        {\n            vertices.push(Math.cos(angle*i) * radius, -height/2, Math.sin(angle*i) * radius);\n        }\n\n        // Bottom center vertex\n        vertices.push(0, -height/2, 0);\n\n        // Bottom vertices\n        for(let i=0; i <= numSegments; i++)\n        {\n            vertices.push(Math.cos(angle*i) * radius, -height/2, Math.sin(angle*i) * radius);\n        }\n\n        this.setVertices(vertices);\n    }\n\n    private createNormals(numSegments: number): void\n    {\n        const normals: number[] = [];\n\n        const angle = (Math.PI * 2) / numSegments;\n\n        // // Top vertex\n        normals.push(0, 1, 0);\n\n        // // Side normals\n        for(let i=0; i <= numSegments; i++)\n        {\n            normals.push(Math.cos(angle*i), 0, Math.sin(angle*i));\n        }\n\n        // Bottom center vertex\n        normals.push(0, -1, 0);\n\n        // Bottom normals\n        for(let i=0; i <= numSegments; i++)\n        {\n            normals.push(0, -1, 0);\n        }\n       \n        this.setNormals(normals);\n    }\n\n    private createIndices(numSegments: number): void\n    {\n        const indices: number[] = [];\n\n        // Side triangles\n        for(let i=0; i < numSegments; i++)\n        {\n            indices.push(0, i+2, i+1);\n        }\n\n        const startIndex = numSegments+2;\n\n        // Bottom triangles\n        for(let i=0; i < numSegments; i++)\n        {\n            indices.push(startIndex, startIndex+i+1, startIndex+i+2);\n        }\n\n        this.setIndices(indices);\n    }\n\n    private createTextureCoords(numSegments: number): void\n    {\n        const uvs: number[] = [];\n\n        // Top vertex\n        uvs.push(0.5, 0);\n\n        // Side vertex\n        for(let i=0; i <= numSegments; i++)\n        {\n            uvs.push(i / numSegments, 1);\n        }\n\n        // Bottom center vertex\n        uvs.push(0.5, 0.5);\n\n        const angle = (Math.PI * 2) / numSegments;\n\n        // Bottom vertices\n        for(let i=0; i <= numSegments; i++)\n        {\n            uvs.push((Math.cos(angle*i) + 1) / 2, (Math.sin(angle*i) - 1) / -2);\n        }\n\n        this.setTextureCoordinates(uvs);\n    }\n}", "import { Mesh } from './Mesh'\n\nexport class PlaneMesh extends Mesh\n{\n    public readonly width;\n    public readonly height;\n\n    constructor(width = 1, height = 1)\n    {\n        super();\n        \n        this.width = width;\n        this.height = height;\n\n        this.createVertices(this.width, this.height);\n        this.createNormals();\n        this.createTextureCoords();\n        this.createIndices();\n        this.createDefaultVertexColors();\n    }\n\n    private createVertices(width: number, height: number): void\n    {\n        const vertices = [];\n\n        vertices.push(-width/2, -height/2, 0);\n        vertices.push(width/2, -height/2, 0);\n        vertices.push(width/2, height/2, 0);\n        vertices.push(-width/2, height/2,0);\n        \n        this.setVertices(vertices);\n    }\n\n    private createNormals(): void\n    {\n        const normals = [];\n\n        // Back face\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n       \n        this.setNormals(normals);\n    }\n\n    private createIndices(): void\n    {\n        const indices = [];\n\n        indices.push(0, 2, 1);\n        indices.push(2, 0, 3);\n\n        this.setIndices(indices);\n    }\n\n    private createTextureCoords(): void\n    {\n        const uvs = [];\n\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n       this.setTextureCoordinates(uvs);\n    }\n}", "import { Mesh } from './Mesh'\n\nexport class CylinderMesh extends Mesh\n{\n    public readonly numSegments: number;\n    public readonly radius: number;\n    public readonly height: number;\n\n    constructor(numSegments = 20, radius = 1, height = 1)\n    {\n        super();\n        \n        this.numSegments = numSegments;\n        this.radius = radius;\n        this.height = height;\n\n        this.createCylinderMesh(numSegments, height);\n    }\n\n    private createCylinderMesh(numSegments: number, height: number): void\n    {\n        const vertices: number[] = [];\n        const normals: number[] = [];\n        const indices: number[] = [];\n        const uvs: number[] = [];\n\n        // Initialize variables for the cylinder circumference\n        const angleIncrement = (Math.PI * 2) / numSegments;\n        const numVerticesX = numSegments + 1;\n\n        // Create the cylinder barrel vertices\n        for(let i=0; i < numVerticesX; i++)\n        {\n            const angle = i * angleIncrement;\n\n            vertices.push(Math.cos(angle) * this.radius, height/2, Math.sin(angle) * this.radius);\n            vertices.push(Math.cos(angle) * this.radius, -height/2, Math.sin(angle) * this.radius);\n\n            normals.push(Math.cos(angle), 0, Math.sin(angle));\n            normals.push(Math.cos(angle), 0, Math.sin(angle));\n\n            uvs.push(1 - i / numSegments, 0);\n            uvs.push(1 - i / numSegments, 1);\n        }\n\n        // Create the cylinder barrel triangles\n        for(let i=0; i < numSegments; i++)\n        {\n            const angle = i * angleIncrement;\n\n            indices.push(i*2, i*2+2, i*2+1);\n            indices.push(i*2+1, i*2+2, i*2+3);\n        }\n\n        // Create a single vertex and normal at center for the top disc\n        const topCenterIndex = vertices.length / 3;\n        vertices.push(0, height/2, 0);\n        normals.push(0, 1, 0);\n        uvs.push(0.5, 0);\n        \n        // Create the top disc vertices\n        for(let i=0; i < numVerticesX; i++)\n        {\n            const angle = i * angleIncrement;\n\n            vertices.push(Math.cos(angle) * this.radius, height/2, Math.sin(angle) * this.radius);\n            normals.push(0, 1, 0);\n            uvs.push(1 - i / numSegments, 0);\n        }\n\n        // Create the top disc triangles\n        for(let i=0; i < numSegments; i++)\n        {\n            // Create a triangle from the center to the two added vertices\n            indices.push(topCenterIndex, topCenterIndex+i+2, topCenterIndex+i+1);\n        }\n\n        // Create a single vertex and normal at center for the bottom disc\n        const bottomCenterIndex = vertices.length / 3;\n        vertices.push(0, -height/2, 0);\n        normals.push(0, -1, 0);\n        uvs.push(0.5, 1);\n        \n        // Create the bottom disc vertices\n        for(let i=0; i < numVerticesX; i++)\n        {\n            const angle = i * angleIncrement;\n\n            vertices.push(Math.cos(angle) * this.radius, -height/2, Math.sin(angle) * this.radius);\n            normals.push(0, -1, 0);\n            uvs.push(1 - i / numSegments, 1);\n        }\n\n        // Create the bottom disc triangles\n        for(let i=0; i < numSegments; i++)\n        {\n            // Create a triangle from the center to the two added vertices\n            indices.push(bottomCenterIndex, bottomCenterIndex+i+1, bottomCenterIndex+i+2);\n        }\n\n        this.setVertices(vertices);\n        this.setNormals(normals);\n        this.setIndices(indices);\n        this.setTextureCoordinates(uvs);\n        this.createDefaultVertexColors();\n    }\n}", "// @ts-ignore\nimport unlitVertexShader from '../shaders/unlit.vert'\n// @ts-ignore\nimport unlitFragmentShader from '../shaders/unlit.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Texture } from './Texture';\nimport { Color } from '../math/Color' \nimport { Matrix4 } from '../math/Matrix4'\n\nexport class UnlitMaterial extends Material3\n{\n    public texture: Texture | null;\n    public color: Color;\n\n    public static shader = new ShaderProgram(unlitVertexShader, unlitFragmentShader);\n    \n    private colorUniform: WebGLUniformLocation | null;\n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private modelViewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    constructor()\n    {\n        super();\n\n        this.texture = null;\n        this.color = new Color(1, 1, 1);\n\n        UnlitMaterial.shader.initialize(this.gl);\n\n        this.colorUniform = UnlitMaterial.shader.getUniform(this.gl, 'materialColor');\n        this.textureUniform = UnlitMaterial.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = UnlitMaterial.shader.getUniform(this.gl, 'useTexture');\n\n        this.modelViewUniform = UnlitMaterial.shader.getUniform(this.gl, 'modelViewMatrix');\n        this.projectionUniform = UnlitMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n\n        this.positionAttribute = UnlitMaterial.shader.getAttribute(this.gl, 'position');\n        this.colorAttribute = UnlitMaterial.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = UnlitMaterial.shader.getAttribute(this.gl, 'texCoord');   \n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        this.initialize();\n\n        // Switch to this shader\n        this.gl.useProgram(UnlitMaterial.shader.getProgram());\n\n        // Set the camera uniforms\n        this.gl.uniformMatrix4fv(this.modelViewUniform, false, Matrix4.multiply(transform.worldMatrix, camera.viewMatrix).mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n\n        // Set the material property uniforms\n        this.gl.uniform4f(this.colorUniform, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        if(this.texture)\n        {\n            // Activate the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 1);\n\n            // Set the texture\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n            this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n            // Set the texture coordinates\n            this.gl.enableVertexAttribArray(this.texCoordAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.texCoordBuffer);\n            this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n            this.gl.disableVertexAttribArray(this.texCoordAttribute);\n        }\n\n        // Draw the triangles\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n        this.gl.drawElements(this.gl.TRIANGLES, mesh.triangleCount*3, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    setColor(color: Color): void\n    {\n        this.color.copy(color);\n    }\n}", "// @ts-ignore\nimport shapeVertexShader from '../shaders/shape.vert'\n// @ts-ignore\nimport shapeFragmentShader from '../shaders/shape.frag'\n\nimport { GfxApp } from '../core/GfxApp';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Shape } from '../geometry/2d/Shape';\nimport { Transform2 } from '../core/Transform2'\nimport { Color } from '../math/Color' \nimport { Texture } from './Texture';\n\n/**\n * Represents a Material for use in 2D graphics\n * @export\n * @class Material2\n */\nexport class Material2\n{\n    /**\n     * Controls the visibility of the material (false = hidden)\n     * \n     * @memberof Material2\n     */\n    public visible: boolean;\n\n    /**\n     * Controls the color of the material (defaults to white)\n     * \n     * @memberof Material2\n     */\n    public color: Color;\n\n    /**\n     * Controls the draw mode of the material (one of gl.POINTS, gl.LINES,\n     * gl.LINE_STRIP, gl.LINE_LOOP, gl.TRIANGLES, gl.TRIANGLE_STRIP,\n     * gl.TRIANGLE_FAN)\n     * \n     * @memberof Material2\n     */\n    public drawMode: number;\n\n    /**\n     * Controls the texture of the material. Can be null, meaning no texture.\n     * \n     * @memberof Material2\n     */\n    public texture: Texture | null;\n\n    private readonly gl: WebGL2RenderingContext;\n\n    /**\n     * Shaders to use for all materials\n     * \n     * @constructor\n     * @memberof Material2\n     * @static\n     */\n    public static shader = new ShaderProgram(shapeVertexShader, shapeFragmentShader);\n\n    private colorUniform: WebGLUniformLocation | null;\n    private modelUniform: WebGLUniformLocation | null;\n    private layerUniform: WebGLUniformLocation | null;\n\n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    /**\n    * Constructs a new Material2, defaulting to a white textureless line loop\n    */\n    constructor()\n    {\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.visible = true;\n        this.color = new Color(1, 1, 1);\n        this.drawMode = this.gl.LINE_LOOP;\n        this.texture = null;\n        \n        Material2.shader.initialize(this.gl);\n\n        this.colorUniform = Material2.shader.getUniform(this.gl, 'materialColor');\n        this.modelUniform = Material2.shader.getUniform(this.gl, 'modelMatrix');\n        this.layerUniform = Material2.shader.getUniform(this.gl, 'layer');\n\n        this.textureUniform = Material2.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = Material2.shader.getUniform(this.gl, 'useTexture');\n\n        this.positionAttribute = Material2.shader.getAttribute(this.gl, 'position');\n        this.colorAttribute = Material2.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = Material2.shader.getAttribute(this.gl, 'texCoord');\n    }\n\n    /**\n     * Copies an existing Material2 to this one\n     * \n     * @param box - The Material2 to copy\n     */\n    copy(mat: Material2): void\n    {\n        this.visible = mat.visible;\n        this.color.copy(mat.color);\n        this.drawMode = mat.drawMode;\n        this.texture = mat.texture;\n    }\n\n    /**\n     * Draws a shape with this material and a given transform\n     * \n     * @param shape - The shape to draw with this material\n     * @param transform - The transform where the shape should be drawn\n     */\n    draw(shape: Shape, transform: Transform2): void\n    {\n        if(!this.visible || shape.vertexCount == 0)\n            return;\n\n        // Switch to this shader\n        this.gl.useProgram(Material2.shader.getProgram());\n\n        // Set the model matrix uniform\n        this.gl.uniformMatrix3fv(this.modelUniform, false, transform.worldMatrix.mat);\n\n        // Set the material property uniforms\n        this.gl.uniform4f(this.colorUniform, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // Set the layer uniform\n        this.gl.uniform1f(this.layerUniform, transform.layer);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, shape.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, shape.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 2, this.gl.FLOAT, false, 0, 0);\n\n        if(this.texture)\n        {\n            // Activate the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 1);\n\n            // Set the texture\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n            this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n            // Set the texture coordinates\n            this.gl.enableVertexAttribArray(this.texCoordAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, shape.texCoordBuffer);\n            this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n            this.gl.disableVertexAttribArray(this.texCoordAttribute);\n        }\n\n        // Draw the shape\n        this.gl.drawArrays(this.drawMode, 0, shape.vertexCount);\n    }\n}", "import { GfxApp } from '../core/GfxApp';\nimport { Color } from '../math/Color' \nimport { Line3 } from '../geometry/3d/Line3'\nimport { Line2 } from '../geometry/2d/Line2'\nimport { Camera } from '../core/Camera';\nimport { Matrix4 } from '../math/Matrix4'\nimport { UnlitMaterial } from './UnlitMaterial';\nimport { Material2 } from './Material2';\n\nexport class LineMaterial\n{\n    public visible: boolean;\n    public color: Color;\n\n    private colorUniform3d: WebGLUniformLocation | null;\n    private useTextureUniform3d: WebGLUniformLocation | null;\n    private textureUniform3d: WebGLUniformLocation | null;\n    private modelViewUniform3d: WebGLUniformLocation | null;\n    private projectionUniform3d: WebGLUniformLocation | null;\n    private positionAttribute3d: number;\n    private colorAttribute3d: number;\n    private texCoordAttribute3d: number;\n\n    private colorUniform2d: WebGLUniformLocation | null;\n    private useTextureUniform2d: WebGLUniformLocation | null;\n    private textureUniform2d: WebGLUniformLocation | null;\n    private modelUniform2d: WebGLUniformLocation | null;\n    private layerUniform2d: WebGLUniformLocation | null;\n    private positionAttribute2d: number;\n    private colorAttribute2d: number;\n    private texCoordAttribute2d: number;\n\n    protected readonly gl: WebGL2RenderingContext;\n\n    constructor()\n    {\n        this.visible = true;\n        this.color = new Color(1, 1, 1);\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        UnlitMaterial.shader.initialize(this.gl);\n        this.colorUniform3d = UnlitMaterial.shader.getUniform(this.gl, 'materialColor');\n        this.modelViewUniform3d = UnlitMaterial.shader.getUniform(this.gl, 'modelViewMatrix');\n        this.projectionUniform3d = UnlitMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n        this.useTextureUniform3d = UnlitMaterial.shader.getUniform(this.gl, 'useTexture');\n        this.textureUniform3d = UnlitMaterial.shader.getUniform(this.gl, 'textureImage');\n        this.positionAttribute3d = UnlitMaterial.shader.getAttribute(this.gl, 'position');\n        this.colorAttribute3d = UnlitMaterial.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute3d = UnlitMaterial.shader.getAttribute(this.gl, 'texCoord');   \n  \n        Material2.shader.initialize(this.gl);\n        this.colorUniform2d = Material2.shader.getUniform(this.gl, 'materialColor');\n        this.modelUniform2d = Material2.shader.getUniform(this.gl, 'modelMatrix');\n        this.layerUniform2d = Material2.shader.getUniform(this.gl, 'layer');\n        this.useTextureUniform2d = Material2.shader.getUniform(this.gl, 'useTexture');\n        this.textureUniform2d = Material2.shader.getUniform(this.gl, 'textureImage');\n        this.positionAttribute2d = Material2.shader.getAttribute(this.gl, 'position');\n        this.colorAttribute2d = Material2.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute2d = Material2.shader.getAttribute(this.gl, 'texCoord');\n    }\n\n\n    draw3d(line: Line3, camera: Camera): void\n    {\n        if(!this.visible || line.vertexCount < 2)\n            return;\n\n        // Switch to this shader\n        this.gl.useProgram(UnlitMaterial.shader.getProgram());\n\n        // Disable the texture in the shader\n        this.gl.uniform1i(this.useTextureUniform3d, 0);\n        this.gl.disableVertexAttribArray(this.texCoordAttribute3d);\n\n        // Set the camera uniforms\n        this.gl.uniformMatrix4fv(this.modelViewUniform3d, false, Matrix4.multiply(line.worldMatrix, camera.viewMatrix).mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform3d, false, camera.projectionMatrix.mat);\n\n        // Set the material property uniforms\n        this.gl.uniform4f(this.colorUniform3d, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute3d);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, line.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute3d, 4, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute3d);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, line.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute3d, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Draw the lines\n        this.gl.drawArrays(line.glLineMode(), 0, line.vertexCount)\n    }\n\n    draw2d(line: Line2): void\n    {\n        if(!this.visible || line.vertexCount < 2)\n            return;\n\n        // Switch to this shader\n        this.gl.useProgram(Material2.shader.getProgram());\n\n        // Disable the texture in the shader\n        this.gl.uniform1i(this.useTextureUniform2d, 0);\n        this.gl.disableVertexAttribArray(this.texCoordAttribute2d);\n\n        // Set the model matrix uniform\n        this.gl.uniformMatrix3fv(this.modelUniform2d, false, line.worldMatrix.mat);\n\n        // Set the material property uniforms\n        this.gl.uniform4f(this.colorUniform2d, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // Set the layer uniform\n        this.gl.uniform1f(this.layerUniform2d, line.layer);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute2d);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, line.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute2d, 4, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute2d);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, line.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute2d, 2, this.gl.FLOAT, false, 0, 0);\n\n        // Draw the lines\n        this.gl.drawArrays(line.glLineMode(), 0, line.vertexCount)\n    }\n}", "import { Transform3 } from \"../../core/Transform3\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Color } from \"../../math/Color\";\nimport { LineMaterial } from \"../../materials/LineMaterial\"\nimport { Camera } from \"../../core/Camera\";\nimport { LightManager } from \"../../lights/LightManager\";\nimport { GfxApp } from \"../../core/GfxApp\";\nimport { BoundingBox3 } from \"../../math/BoundingBox3\";\n\nexport enum LineMode3\n{\n    LINES,\n    LINE_STRIP,\n    LINE_LOOP\n}\n\nexport class Line3 extends Transform3\n{\n    protected readonly gl: WebGL2RenderingContext;\n\n    public positionBuffer: WebGLBuffer | null;\n    public colorBuffer: WebGLBuffer | null;\n\n    public vertexCount: number;\n    public material: LineMaterial;\n\n    public lineMode: number;\n    \n    constructor(lineMode = LineMode3.LINE_STRIP)\n    {\n        super();\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.positionBuffer = this.gl.createBuffer();\n        this.colorBuffer = this.gl.createBuffer();\n        this.vertexCount = 0;\n\n        // default material\n        this.material = new LineMaterial();\n\n        this.lineMode = lineMode;\n    }\n\n    createFromBox(box: BoundingBox3)\n    {      \n         const vertices: number[] = [];\n\n         // Bottom rectangle\n         vertices.push(box.max.x, box.min.y, box.max.z);\n         vertices.push(box.max.x, box.min.y, box.min.z);\n         vertices.push(box.min.x, box.min.y, box.min.z);\n         vertices.push(box.min.x, box.min.y, box.max.z);\n         vertices.push(box.max.x, box.min.y, box.max.z);\n         vertices.push(box.min.x, box.min.y, box.max.z);\n         vertices.push(box.max.x, box.min.y, box.min.z);\n         vertices.push(box.min.x, box.min.y, box.min.z);\n\n         // Top rectangle\n         vertices.push(box.max.x, box.max.y, box.max.z);\n         vertices.push(box.max.x, box.max.y, box.min.z);\n         vertices.push(box.min.x, box.max.y, box.min.z);\n         vertices.push(box.min.x, box.max.y, box.max.z);\n         vertices.push(box.max.x, box.max.y, box.max.z);\n         vertices.push(box.min.x, box.max.y, box.max.z);\n         vertices.push(box.max.x, box.max.y, box.min.z);\n         vertices.push(box.min.x, box.max.y, box.min.z);\n         \n         // Sides\n         vertices.push(box.max.x, box.min.y, box.max.z);\n         vertices.push(box.max.x, box.max.y, box.max.z);\n         vertices.push(box.max.x, box.min.y, box.min.z);\n         vertices.push(box.max.x, box.max.y, box.min.z);\n         vertices.push(box.min.x, box.min.y, box.min.z);\n         vertices.push(box.min.x, box.max.y, box.min.z);\n         vertices.push(box.min.x, box.min.y, box.max.z);\n         vertices.push(box.min.x, box.max.y, box.max.z);\n\n         this.setVertices(vertices);\n         this.createDefaultVertexColors();\n\n         this.lineMode = LineMode3.LINES;\n    }\n\n    draw(parent: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw3d(this, camera);\n\n        this.children.forEach((elem: Transform3) => {\n            elem.draw(this, camera, lightManager);\n        });\n    }\n\n    setVertices(vertices: Vector3[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(vertices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n            let vArray: number[];\n            if(typeof vertices[0] === 'number')\n            {\n                vArray = vertices as number[];\n                \n            }\n            else\n            {\n                vArray = [];\n                (vertices as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    vArray.push(elem.x, elem.y, elem.z);\n                });\n            }\n            \n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), usage);\n            this.vertexCount = vArray.length / 3;\n\n            this.boundingBox.computeBounds(vArray);\n            this.boundingSphere.computeBounds(vArray, this.boundingBox);\n        }\n    }\n\n    setColors(colors: Color[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(colors.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n\n            if(typeof colors[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors as number[]), usage);\n            }\n            else\n            {\n                const cArray: number[] = [];\n                (colors as Color[]).forEach((elem: Color) =>\n                {\n                    cArray.push(elem.r, elem.g, elem.b, elem.a);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cArray), usage);\n            }\n        }\n    }\n\n    getVertices(): number[]\n    {\n        const vertexArray = new Float32Array(this.vertexCount * 3);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, vertexArray);\n        return [... vertexArray];\n    }\n\n    getColors(): number[]\n    {\n        const colorArray = new Float32Array(this.vertexCount * 4);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, colorArray);\n        return [... colorArray];\n    }\n\n    public createDefaultVertexColors(): void\n    {\n        const colors: number[] = [];\n\n        for(let i=0; i < this.vertexCount; i++)\n            colors.push(1, 1, 1, 1);\n\n        this.setColors(colors);\n    }\n\n    public glLineMode(): number\n    {\n        if(this.lineMode == LineMode3.LINES)\n            return this.gl.LINES;\n        else if(this.lineMode == LineMode3.LINE_STRIP)\n            return this.gl.LINE_STRIP;\n        else\n            return this.gl.LINE_LOOP;  \n    }\n}", "import { Line3, LineMode3 } from \"./Line3\";\n\nexport class Axes3 extends Line3\n{\n    \n    /**\n     * Constructor for Axes3 class\n     * \n     * @param size - The length of the axes\n     */\n    constructor(size = 1)\n    {\n        super(LineMode3.LINES);\n        \n        /**\n         * Sets the vertices of Axes3 to the given array\n         * \n         * @param vertices - The array of vertices to set\n         */\n        const vertices: number[] = [];\n        \n        /**\n         * Sets the colors of Axes3 to the given array\n         * \n         * @param colors - The array of colors to set\n         */\n        const colors: number[] = [];\n\n         // X axis\n         vertices.push(0, 0, 0);\n         vertices.push(size, 0, 0);\n         colors.push(1, 0, 0, 1);\n         colors.push(1, 0, 0, 1);\n\n         // Y axis\n         vertices.push(0, 0, 0);\n         vertices.push(0, size, 0);\n         colors.push(0, 1, 0, 1);\n         colors.push(0, 1, 0, 1);\n\n         // Z axis\n         vertices.push(0, 0, 0);\n         vertices.push(0, 0, size);\n         colors.push(0, 0, 1, 1);\n         colors.push(0, 0, 1, 1);\n\n         this.setVertices(vertices);\n         this.setColors(colors);\n    }\n}\n", "import { Transform2 } from \"../../core/Transform2\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Color } from \"../../math/Color\";\nimport { Material2 } from \"../../materials/Material2\";\nimport { GfxApp } from \"../../core/GfxApp\";\n\n/**\n * Represents a 2D shape. \n */\nexport class Shape extends Transform2\n{\n    protected readonly gl: WebGL2RenderingContext;\n\n    /**\n     * Buffer that stores the position of each vertex.\n     */\n    public positionBuffer: WebGLBuffer | null;\n\n    /**\n     * Buffer that stores the color of each vertex.\n     */\n    public colorBuffer: WebGLBuffer | null;\n\n    /**\n     * Buffer that stores the texture (UV) coordinate at each vertex.\n     */\n    public texCoordBuffer: WebGLBuffer | null;\n\n    /**\n     * Array of buffers that store custom information for each vertex.\n     */\n    public customBuffers: (WebGLBuffer | null)[];\n\n    /**\n     * Number of vertices in the shape.\n     */\n    public vertexCount: number;\n\n    /**\n     * Material to draw the shape with.\n     */\n    public material: Material2;\n    \n    /**\n     * Construct a new 2D shape\n     */\n    constructor()\n    {\n        super();\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.positionBuffer = this.gl.createBuffer();\n        this.colorBuffer = this.gl.createBuffer();\n        this.texCoordBuffer = this.gl.createBuffer();\n        this.customBuffers = [];\n        this.vertexCount = 0;\n\n        // default material\n        this.material = new Material2();\n    }\n\n    /**\n     * Draw a shape with a particular Transform (position, rotation, scale)\n     */\n    draw(): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this, this);\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw();\n        });\n    }\n\n    /**\n     * Set the vertices of the shape. Vertices should be in normalized device\n     * coordinates [-1, 1].\n     * \n     * @param vertices - Array of vertices.\n     * @param usage - Intended usage (static or dynamic) of the shape's vertices.\n     */\n    setVertices(vertices: Vector2[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(vertices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n            let vArray: number[];\n            if(typeof vertices[0] === 'number')\n            {\n                vArray = vertices as number[];\n                \n            }\n            else\n            {\n                vArray = [];\n                (vertices as Vector2[]).forEach((elem: Vector2) =>\n                {\n                    vArray.push(elem.x, elem.y);\n                });\n            }\n            \n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), usage);\n            this.vertexCount = vArray.length / 2;\n\n            this.computeBounds(vertices);\n        }\n    }\n\n    /**\n     * Set the color at each vertex of the shape.\n     * \n     * @param color - Array of colors.\n     * @param usage - Intended usage (static or dynamic) of the shape's vertex colors.\n     */\n    setColors(colors: Color[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(colors.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n\n            if(typeof colors[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors as number[]), usage);\n            }\n            else\n            {\n                const cArray: number[] = [];\n                (colors as Color[]).forEach((elem: Color) =>\n                {\n                    cArray.push(elem.r, elem.g, elem.b, elem.a);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cArray), usage);\n            }\n        }\n    }\n\n    /**\n     * Set the texture (UV) coordinates at each vertex of the shape.\n     * \n     * @param texCoords - Array of texture coordinates.\n     * @param usage - Intended usage (static or dynamic) of the shape's UV coordinates.\n     */\n    setTextureCoordinates(texCoords: Vector2[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(texCoords.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n\n            if(typeof texCoords[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texCoords as number[]), usage);\n            }\n            else\n            {\n                const tArray: number[] = [];\n                (texCoords as Vector2[]).forEach((elem: Vector2) =>\n                {\n                    tArray.push(elem.x, elem.y);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(tArray), usage);\n            }\n        }\n    }\n\n    /**\n     * Sets a custom buffer from an input array.\n     * \n     * @param bufferIndex - The index number of the buffer to set.\n     * @param values - Array of numerical values to store in the buffer.\n     * @param usage - Intended usage (static or dynamic) of the shape's buffer.\n     */\n    setCustomBuffer(bufferIndex: number, values: number[], usage = this.gl.STATIC_DRAW): void\n    {\n        while(this.customBuffers.length <= bufferIndex)\n            this.customBuffers.push(this.gl.createBuffer());\n\n        if(values.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.customBuffers[bufferIndex]);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(values), usage);\n        }\n    }\n\n    /**\n     * Get the vertices of the shape\n     * \n     * @returns - Returns the array of vertices as numbers (not Vector2 objects)\n     */\n    getVertices(): number[]\n    {\n        const vertexArray = new Float32Array(this.vertexCount * 2);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, vertexArray);\n        return [... vertexArray];\n    }\n\n    /**\n     * Get the vertex colors of the shape\n     * \n     * @returns - Returns the array of colors as numbers (not Color objects)\n     */\n    getColors(): number[]\n    {\n        const colorArray = new Float32Array(this.vertexCount * 4);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, colorArray);\n        return [... colorArray];\n    }\n\n    /**\n     * Get the texture coordinates of the shape\n     * \n     * @returns - Returns the array of texture (UV) coordinates as numbers (not Vector2 objects)\n     */\n    getTextureCoordinates(): number[]\n    {\n        const texCoordArray = new Float32Array(this.vertexCount * 2);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, texCoordArray);\n        return [... texCoordArray];\n    }\n\n    /**\n     * Get the values in one of the shape's custom buffers\n     * \n     * @param bufferIndex - The index number of the buffer to get.\n     * @param numAvalues - The number of values per vertex in the buffer.\n     * @returns - Returns the array of numbers stored in the buffer\n     */\n    getCustomBuffer(bufferIndex: number, numValues: number): number[]\n    {\n        const customBufferArray = new Float32Array(this.vertexCount * numValues);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.customBuffers[bufferIndex]);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, customBufferArray);\n        return [... customBufferArray];\n    }\n\n    /**\n     * Create default (white) vertex colors for the shape\n     */\n    public createDefaultVertexColors(): void\n    {\n        const colors: number[] = [];\n\n        for(let i=0; i < this.vertexCount; i++)\n            colors.push(1, 1, 1, 1);\n\n        this.setColors(colors);\n    }\n\n    /**\n     * Compute the 2D Bounds (both bounding box and bounding circle) of the shape.\n     * \n     * @param vertices - Vertices to include in the shape. If empty, defaults to\n     * the object's current vertices.\n     */\n    public computeBounds(vertices: Vector2[] | number[] | null): void\n    {\n        if(!vertices)\n        {\n            vertices = this.getVertices();\n        } \n        \n        if(vertices.length == 0)\n            return;\n\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n\n            this.boundingBox.max.set(vArray[0], vArray[1]);\n            this.boundingBox.min.set(vArray[0], vArray[1]);\n            \n            for(let i=0; i < vArray.length; i+=3)\n            {\n                if(vArray[i] > this.boundingBox.max.x)\n                    this.boundingBox.max.x = vArray[i];\n                if(vArray[i] < this.boundingBox.min.x)\n                    this.boundingBox.min.x = vArray[i];\n\n                if(vArray[i+1] > this.boundingBox.max.y)\n                    this.boundingBox.max.y = vArray[i+1];\n                if(vArray[i+1] < this.boundingBox.min.y)\n                    this.boundingBox.min.y = vArray[i+1];\n            }\n        }\n        else\n        {\n            this.boundingBox.max.copy((vertices as Vector2[])[0]);\n            this.boundingBox.min.copy((vertices as Vector2[])[0]);\n\n            (vertices as Vector2[]).forEach((elem: Vector2) =>\n            {\n                if(elem.x > this.boundingBox.max.x)\n                    this.boundingBox.max.x = elem.x;\n                if(elem.x < this.boundingBox.min.x)\n                    this.boundingBox.min.x = elem.x;\n\n                if(elem.y > this.boundingBox.max.y)\n                    this.boundingBox.max.y = elem.y;\n                if(elem.y < this.boundingBox.min.y)\n                    this.boundingBox.min.y =elem.y;\n            });\n        }\n\n        this.boundingCircle.center.copy(this.boundingBox.min);\n        this.boundingCircle.center.add(this.boundingBox.max);\n        this.boundingCircle.center.multiplyScalar(0.5);\n        this.boundingCircle.radius = 0;\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n            for(let i=0; i < vArray.length; i+=3)\n            {\n                const distance = Math.sqrt(\n                    (vArray[i] - this.boundingCircle.center.x) * (vArray[i] - this.boundingCircle.center.x) +\n                    (vArray[i+1] - this.boundingCircle.center.y) * (vArray[i+1] - this.boundingCircle.center.y)\n                );\n                \n                if(distance > this.boundingCircle.radius)\n                    this.boundingCircle.radius = distance;\n            }\n        }\n        else\n        {\n            (vertices as Vector2[]).forEach((elem: Vector2) =>\n            {\n                const distance = elem.distanceTo(this.boundingCircle.center);\n\n                if(distance > this.boundingCircle.radius)\n                    this.boundingCircle.radius = distance;\n            });\n        }\n    }\n}", "import { Shape } from './Shape'\nimport { Transform2 } from '../../core/Transform2'\nimport { Material2 } from '../../materials/Material2';\n\n/**\n * Represents an instance of a 2D shape.\n */\nexport class ShapeInstance extends Transform2\n{\n    /**\n     * The \"prototype\" shape to base the shape instance off of\n     */\n    public readonly baseShape: Shape;\n\n    /**\n     * The material to draw this shape instance with\n     */\n    public material: Material2;\n\n    /**\n     * Create a new instance of a shape.\n     * @param baseShape Template shape to base this one off of\n     * @param copyTransform Copy the transform of the template shape into this shape instance\n     */\n    constructor(baseShape: Shape, copyTransform = true)\n    {\n        super();\n        this.baseShape = baseShape;\n        this.boundingBox = baseShape.boundingBox;\n        this.boundingCircle = baseShape.boundingCircle;\n        this.material = baseShape.material;\n        \n        if(copyTransform)\n        {\n            this.position.copy(baseShape.position);\n            this.rotation = baseShape.rotation;\n            this.scale.copy(baseShape.scale);\n            this.layer = baseShape.layer;\n        }\n    }\n\n    /**\n     * @returns The template shape this instance is based upon.\n     */\n    getBaseShape(): Shape\n    {\n        return this.baseShape;\n    }\n\n    /**\n     * Draw the shape instance\n     */\n    draw(): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this.baseShape, this);\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw();\n        });\n    }\n}", "import { Shape } from './Shape'\n\n/**\n * Represents a rectangle 2D shape\n */\nexport class Rectangle extends Shape\n{\n    /**\n     * width of the rectangle, in normalized device coordinates [-1, 1]\n     */\n    public readonly width: number;\n\n    /**\n     * height of the rectangle, in normalized device coordinates [-1, 1]\n     */\n    public readonly height: number;\n\n    /**\n     * Creates an instance of a Rectangle.\n     * \n     * @param width - width of the rectangle, in normalized device coordinates [-1, 1]\n     * @param height - height of the rectangle, in normalized device coordinates [-1, 1]\n     */\n    constructor(width = 1, height = 1)\n    {\n        super();\n\n        this.width = width;\n        this.height  = height;\n\n        this.material.drawMode = this.gl.TRIANGLE_STRIP;\n\n        this.createVertices(this.width, this.height);\n        this.createTextureCoordinates();\n        this.createDefaultVertexColors();\n    }\n\n    /**\n     * Creates the vertices of a Rectangle object\n     * \n     * @param width - The width of the Rectangle\n     * @param height - The height of the Rectangle\n     */\n    private createVertices(width: number, height: number): void\n    {\n        const vertices: number[] = [];\n\n        vertices.push(-width/2, height/2);\n        vertices.push(-width/2, -height/2);\n        vertices.push(width/2, height/2);\n        vertices.push(width/2, -height/2);\n        \n        this.setVertices(vertices);\n    }\n\n    /**\n     * Creates the texture coordinates of a Rectangle object\n     */\n    private createTextureCoordinates(): void\n    {\n        const uvs: number[] = [];\n\n        uvs.push(0, 0);\n        uvs.push(0, 1);\n        uvs.push(1, 0);\n        uvs.push(1, 1);\n        \n        this.setTextureCoordinates(uvs);\n    }\n}", "import { Shape } from './Shape'\n\n/**\n * The Circle class is used for creating a 2D circle with a specified radius and number of segments.\n */\nexport class Circle extends Shape {\n\n    /**\n     * The radius of the Circle\n     */\n    public readonly radius: number;\n\n    /**\n     * Creates an instance of Circle.\n     * \n     * @param radius - The radius of the Circle\n     * @param numSegments - The number of segments of the Circle \n     */\n    constructor(radius = 0.5, numSegments = 50) {\n        super();\n        this.radius = radius;\n        this.material.drawMode = this.gl.TRIANGLE_FAN;\n        this.createVertices(this.radius, numSegments);\n        this.createTextureCoordinates(numSegments);\n        this.createDefaultVertexColors();\n    }\n\n    /**\n     * Creates the vertices of the circle\n     * \n     * @param radius - The radius of the circle\n     * @param numSegments - The number of segments in the circle\n     */\n    private createVertices(radius: number, numSegments: number): void {\n        const vertices = [0, 0];\n        const angle = (Math.PI * 2) / numSegments;\n        for (let i = 0; i <= numSegments; i++) {\n            vertices.push(Math.cos(angle * i) * radius, Math.sin(angle * i) * radius);\n        }\n        this.setVertices(vertices);\n    }\n\n    /**\n     * Creates the texture coordinates of the circle\n     * \n     * @param numSegments - The number of segments in the circle\n     */\n    private createTextureCoordinates(numSegments: number): void {\n        const uvs = [0.5, 0.5];\n        const angle = (Math.PI * 2) / numSegments;\n        for (let i = 0; i <= numSegments; i++) {\n            uvs.push((Math.cos(angle * i) + 1) / 2, (Math.sin(angle * i) - 1) / -2);\n        }\n        this.setTextureCoordinates(uvs);\n    }\n}\n", "import { Transform2 } from \"../../core/Transform2\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Color } from \"../../math/Color\";\nimport { LineMaterial } from \"../../materials/LineMaterial\"\nimport { GfxApp } from \"../../core/GfxApp\";\nimport { BoundingBox2 } from \"../../math/BoundingBox2\";\n\nexport enum LineMode2\n{\n    LINES,\n    LINE_STRIP,\n    LINE_LOOP\n}\n\n/** \n * Represents a 2D line.\n */\nexport class Line2 extends Transform2\n{\n    /**\n     * WebGL context of the application.\n     */\n    protected readonly gl: WebGL2RenderingContext;\n\n    /**\n     * Buffer that stores the position of each vertex.\n     */\n    public positionBuffer: WebGLBuffer | null;\n\n    /**\n     * Buffer that stores the color of each vertex.\n     */\n    public colorBuffer: WebGLBuffer | null;\n\n    /**\n     * Number of vertices of the line.\n     */\n    public vertexCount: number;\n\n    /**\n     * Material used to render the line.\n     */\n    public material: LineMaterial;\n\n    /**\n     * Mode of the line.\n     */\n    public lineMode: number;\n    \n    /**\n     * Creates an instance of Line2.\n     */\n    constructor(lineMode = LineMode2.LINE_STRIP)\n    {\n        super();\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.positionBuffer = this.gl.createBuffer();\n        this.colorBuffer = this.gl.createBuffer();\n        this.vertexCount = 0;\n\n        // default material\n        this.material = new LineMaterial();\n\n        this.lineMode = lineMode;\n    }\n\n    /**\n     * Creates a Line object from a BoundingBox2 object\n     * \n     * @param box - The BoundingBox2 object to create the Line from\n     */\n    createFromBox(box: BoundingBox2)\n    {      \n         const vertices: number[] = [];\n         vertices.push(box.min.x, box.min.y);\n         vertices.push(box.max.x, box.min.y);\n         vertices.push(box.max.x, box.max.y);\n         vertices.push(box.min.x, box.max.y);\n\n         this.setVertices(vertices);\n         this.createDefaultVertexColors();\n\n         this.lineMode = LineMode2.LINE_LOOP;\n    }\n\n    /**\n     * Draws the Line object\n     */\n    draw(): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw2d(this);\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw();\n        });\n    }\n\n    /**\n     * Sets the vertices of the Line object\n     * \n     * @param vertices - An array of Vector2 objects or numbers representing the vertex positions\n     * @param usage - OpenGL flag specifying the expected usage of the buffer (defaults to STATIC_DRAW)\n     */\n    setVertices(vertices: Vector2[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(vertices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n            let vArray: number[];\n            if(typeof vertices[0] === 'number')\n            {\n                vArray = vertices as number[];\n                \n            }\n            else\n            {\n                vArray = [];\n                (vertices as Vector2[]).forEach((elem: Vector2) =>\n                {\n                    vArray.push(elem.x, elem.y);\n                });\n            }\n            \n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), usage);\n            this.vertexCount = vArray.length / 2;\n        }\n    }\n\n    /**\n     * Sets the colors of the Line object\n     * \n     * @param colors - An array of Color objects or numbers representing the vertex colors\n     * @param usage - OpenGL flag specifying the expected usage of the buffer (defaults to STATIC_DRAW)\n     */\n    setColors(colors: Color[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(colors.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n\n            if(typeof colors[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors as number[]), usage);\n            }\n            else\n            {\n                const cArray: number[] = [];\n                (colors as Color[]).forEach((elem: Color) =>\n                {\n                    cArray.push(elem.r, elem.g, elem.b, elem.a);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cArray), usage);\n            }\n        }\n    }\n\n    /**\n     * Gets the vertex positions of the Line object\n     * \n     * @returns An array of numbers representing the vertex positions\n     */\n    getVertices(): number[]\n    {\n        const vertexArray = new Float32Array(this.vertexCount * 2);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, vertexArray);\n        return [... vertexArray];\n    }\n\n    /**\n     * Gets the vertex colors of the Line object\n     * \n     * @returns An array of numbers representing the vertex colors\n     */\n    getColors(): number[]\n    {\n        const colorArray = new Float32Array(this.vertexCount * 4);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n        this.gl.getBufferSubData(this.gl.ARRAY_BUFFER, 0, colorArray);\n        return [... colorArray];\n    }\n\n    \n    /**\n     * Creates a default set of colors for the Line object, with each vertex having a color of white (r,g,b,a = 1,1,1,1)\n     */\n    public createDefaultVertexColors(): void\n    {\n        const colors: number[] = [];\n\n        for(let i=0; i < this.vertexCount; i++)\n            colors.push(1, 1, 1, 1);\n\n        this.setColors(colors);\n    }\n\n    /**\n     * Returns the appropriate OpenGL line mode for the current LineMode2 value\n     * \n     * @returns The OpenGL line mode corresponding to the LineMode2 value\n     */\n    public glLineMode(): number\n    {\n        if(this.lineMode == LineMode2.LINES)\n            return this.gl.LINES;\n        else if(this.lineMode == LineMode2.LINE_STRIP)\n            return this.gl.LINE_STRIP;\n        else\n            return this.gl.LINE_LOOP;  \n    }\n}\n", "import { Line2, LineMode2 } from \"./Line2\";\n\n/**\n * The Axes2 class is used for creating a 2D X and Y axes with a specified size. \n */\nexport class Axes2 extends Line2 {\n    /**\n     * \n     * Creates an instance of Axes2.\n     * @param size - The size of the axes.\n     */\n    constructor(size = 1) {\n        super(LineMode2.LINES);\n\n        const vertices: number[] = [];\n        const colors: number[] = [];\n\n        // X axis\n        vertices.push(0, 0);\n        vertices.push(size, 0);\n        colors.push(1, 0, 0, 1);\n        colors.push(1, 0, 0, 1);\n\n        // Y axis\n        vertices.push(0, 0);\n        vertices.push(0, size);\n        colors.push(0, 1, 0, 1);\n        colors.push(0, 1, 0, 1);\n\n        this.setVertices(vertices);\n        this.setColors(colors);\n    }\n}\n", "// @ts-ignore\nimport particleVertexShader from '../../shaders/particles2.vert'\n// @ts-ignore\nimport particleFragmentShader from '../../shaders/particles2.frag'\n\nimport { Shape } from './Shape'\nimport { Transform2 } from '../../core/Transform2'\nimport { ShaderProgram } from '../../materials/ShaderProgram';\nimport { GfxApp } from '../../core/GfxApp';\nimport { Vector2 } from '../../math/Vector2';\n\n/**\n * Represents a 2D particle system\n */\nexport class Particles2 extends Transform2\n{\n    /**\n     * The template shape used to render each particle.\n     */\n    public readonly baseParticle: Shape;\n\n    /**\n     * The number of particles to render.\n     */\n    public readonly numParticles: number;\n\n    /**\n     * Array containing positions for each particle instance.\n     */\n    public particlePositions: Vector2[];\n\n    /**\n     * Array containing sizes for each particle instance.\n     */\n    public particleSizes: number[];\n\n    public static shader = new ShaderProgram(particleVertexShader, particleFragmentShader);\n\n    private readonly gl: WebGL2RenderingContext;\n\n    private colorUniform: WebGLUniformLocation | null;\n    private modelUniform: WebGLUniformLocation | null;\n    private layerUniform: WebGLUniformLocation | null;\n\n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private particlePositionAttribute: number;\n    private particleSizeAttribute: number;\n\n    private vertPositionAttribute: number;\n    private vertColorAttribute: number;\n    private texCoordAttribute: number;\n\n    private particlePositionBuffer: WebGLBuffer | null;\n    private particleSizeBuffer: WebGLBuffer | null;\n\n    /**\n     * Create a new instance of a particle system.\n     * \n     * @param baseParticle The template shape for each particle\n     */\n    constructor(baseParticle: Shape, numParticles: number)\n    {\n        super();\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.baseParticle = baseParticle;\n        this.numParticles = numParticles;\n\n        this.particlePositions = [];\n        this.particleSizes = [];\n\n        for(let i=0; i < this.numParticles; i++)\n        {\n            this.particlePositions.push(new Vector2());\n            this.particleSizes.push(1);\n        }\n\n        this.particlePositionBuffer = this.gl.createBuffer();\n        this.particleSizeBuffer = this.gl.createBuffer();\n\n        Particles2.shader.initialize(this.gl);\n\n        this.colorUniform = Particles2.shader.getUniform(this.gl, 'materialColor');\n        this.modelUniform = Particles2.shader.getUniform(this.gl, 'modelMatrix');\n        this.layerUniform = Particles2.shader.getUniform(this.gl, 'layer');\n\n        this.textureUniform = Particles2.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = Particles2.shader.getUniform(this.gl, 'useTexture');\n\n        this.particlePositionAttribute = Particles2.shader.getAttribute(this.gl, 'particlePosition');\n        this.particleSizeAttribute = Particles2.shader.getAttribute(this.gl, 'particleSize');\n\n        this.vertPositionAttribute = Particles2.shader.getAttribute(this.gl, 'vertPosition');\n        this.vertColorAttribute = Particles2.shader.getAttribute(this.gl, 'vertColor');\n        this.texCoordAttribute = Particles2.shader.getAttribute(this.gl, 'texCoord');\n\n        const particlePositionArray: number[] = [];\n        for(let i=0; i < this.particlePositions.length; i++)\n                particlePositionArray.push(this.particlePositions[i].x, this.particlePositions[i].y);\n    \n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.particlePositionBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(particlePositionArray), this.gl.DYNAMIC_DRAW);\n    \n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.particleSizeBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.particleSizes), this.gl.DYNAMIC_DRAW);\n    }\n\n    /**\n     * @returns The template shape used to render each particle.\n     */\n    getBaseParticle(): Shape\n    {\n        return this.baseParticle;\n    }\n\n    /**\n     * Update the particle positions and/or sizes\n     * \n     * @param updatePositions - Whether to update the particle positions (defaults to true)\n     * @param updateSizes - Whether to update the particle sizes (defaults to false)\n     */\n    update(updatePositions = true, updateSizes = false): void\n    {\n        if(updatePositions)\n        {\n            const particlePositionArray: number[] = [];\n            for(let i=0; i < this.particlePositions.length; i++)\n                particlePositionArray.push(this.particlePositions[i].x, this.particlePositions[i].y);\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.particlePositionBuffer);\n            this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, new Float32Array(particlePositionArray));\n        }\n        \n        if(updateSizes)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.particleSizeBuffer);\n            this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, new Float32Array(this.particleSizes));\n        }\n    }\n\n    /**\n     * Draw the particle system\n     */\n    draw(): void\n    {\n        if(!this.visible)\n            return;\n\n         // Switch to this shader\n         this.gl.useProgram(Particles2.shader.getProgram());\n\n         // Set the model matrix uniform\n         this.gl.uniformMatrix3fv(this.modelUniform, false, this.worldMatrix.mat);\n \n         // Set the material property uniforms\n         this.gl.uniform4f(this.colorUniform, \n            this.baseParticle.material.color.r, \n            this.baseParticle.material.color.g, \n            this.baseParticle.material.color.b, \n            this.baseParticle.material.color.a);\n \n         // Set the layer uniform\n         this.gl.uniform1f(this.layerUniform, this.layer);\n\n         // Set the particle positions\n         this.gl.enableVertexAttribArray(this.particlePositionAttribute);\n         this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.particlePositionBuffer);\n         this.gl.vertexAttribPointer(this.particlePositionAttribute, 2, this.gl.FLOAT, false, 0, 0);\n         this.gl.vertexAttribDivisor(this.particlePositionAttribute, 1);\n\n         // Set the particle sizes\n         this.gl.enableVertexAttribArray(this.particleSizeAttribute);\n         this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.particleSizeBuffer);\n         this.gl.vertexAttribPointer(this.particleSizeAttribute, 1, this.gl.FLOAT, false, 0, 0);\n         this.gl.vertexAttribDivisor(this.particleSizeAttribute, 1);\n \n         // Set the vertex colors\n         this.gl.enableVertexAttribArray(this.vertColorAttribute);\n         this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.baseParticle.colorBuffer);\n         this.gl.vertexAttribPointer(this.vertColorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n \n         // Set the vertex positions\n         this.gl.enableVertexAttribArray(this.vertPositionAttribute);\n         this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.baseParticle.positionBuffer);\n         this.gl.vertexAttribPointer(this.vertPositionAttribute, 2, this.gl.FLOAT, false, 0, 0);\n \n         if(this.baseParticle.material.texture)\n         {\n             // Activate the texture in the shader\n             this.gl.uniform1i(this.useTextureUniform, 1);\n \n             // Set the texture\n             this.gl.activeTexture(this.gl.TEXTURE0 + this.baseParticle.material.texture.id)\n             this.gl.bindTexture(this.gl.TEXTURE_2D, this.baseParticle.material.texture.texture);\n             this.gl.uniform1i(this.textureUniform, this.baseParticle.material.texture.id);\n \n             // Set the texture coordinates\n             this.gl.enableVertexAttribArray(this.texCoordAttribute);\n             this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.baseParticle.texCoordBuffer);\n             this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n         }\n         else\n         {\n             // Disable the texture in the shader\n             this.gl.uniform1i(this.useTextureUniform, 0);\n             this.gl.disableVertexAttribArray(this.texCoordAttribute);\n         }\n \n        // Draw the shape\n        this.gl.drawArraysInstanced(this.baseParticle.material.drawMode, 0, this.baseParticle.vertexCount, this.numParticles);\n\n        // Reset the divisors so it doesn't break other shaders\n        this.gl.vertexAttribDivisor(this.particlePositionAttribute, 0);\n        this.gl.vertexAttribDivisor(this.particleSizeAttribute, 0);\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw();\n        });\n    }\n}", "import { Camera } from '../core/Camera';\nimport { Quaternion } from '../math/Quaternion';\nimport { Vector2 } from '../math/Vector2';\nimport { Vector3 } from '../math/Vector3';\n\nexport class OrbitControls\n{\n    public camera: Camera;\n    public zoomable: boolean;\n    public rotationSpeedX: number;\n    public rotationSpeedY: number;\n    public zoomSpeed: number;\n    public mouseButton: number;\n\n    // Camera parameters\n    private targetPoint: Vector3;\n    private distance: number;\n    private cameraOrbitX: Quaternion;\n    private cameraOrbitY: Quaternion;\n    private rotationDirection: Vector3;\n    private zoomDirection: number;\n    private mouseDrag: boolean;\n    private mouseMovement: Vector2;\n\n    constructor(camera: Camera, distance = 1, zoomable = true)\n    {\n        this.camera = camera;\n        this.zoomable = zoomable;\n        this.distance = distance;\n\n        this.rotationSpeedX = Math.PI / 4;\n        this.rotationSpeedY = Math.PI / 4;\n        this.zoomSpeed = .25;\n        this.mouseButton = 0;\n\n        this.targetPoint = new Vector3();\n        this.cameraOrbitX = new Quaternion();\n        this.cameraOrbitY = new Quaternion();\n        this.rotationDirection = new Vector3();\n        this.zoomDirection = 0;\n        this.mouseDrag = false;\n        this.mouseMovement = new Vector2();\n\n        window.addEventListener('mousedown', (event: MouseEvent) => {this.onMouseDown(event)});\n        window.addEventListener('mouseup', (event: MouseEvent) => {this.onMouseUp(event)});\n        window.addEventListener('mousemove', (event: MouseEvent) => {this.onMouseMove(event)});\n        window.addEventListener('wheel', (event: WheelEvent) => {this.onMouseWheel(event)});\n\n        this.updateCamera();\n    }\n\n    setTargetPoint(targetPoint: Vector3): void\n    {\n        this.targetPoint.copy(targetPoint);\n        this.updateCamera();\n    }\n\n    setDistance(distance: number): void\n    {\n        this.distance = distance;\n        this.updateCamera();\n    }\n\n    setOrbit(orbitX: number, orbitY: number): void\n    {\n        this.cameraOrbitX.setRotationX(orbitX);\n        this.cameraOrbitY.setRotationY(orbitY);\n        this.updateCamera();\n    }\n\n    onMouseDown(event: MouseEvent): void \n    {\n        if(this.mouseButton == event.button && (event.target! as Element).localName == \"canvas\")\n            this.mouseDrag = true;\n    }\n\n    onMouseUp(event: MouseEvent): void\n    {\n        if(this.mouseButton == event.button)\n            this.mouseDrag = false;\n    }\n    \n    onMouseMove(event: MouseEvent): void\n    {\n        if(this.mouseDrag)\n        {\n            this.mouseMovement.x = -event.movementY;\n            this.mouseMovement.y = -event.movementX;\n        }\n    }\n\n    onMouseWheel(event: WheelEvent): void \n    {\n        if(this.zoomable)\n        {\n            this.zoomDirection += event.deltaY;\n        }\n    }\n\n    update(deltaTime: number): void\n    {\n        this.rotationDirection.x += this.mouseMovement.x;\n        this.rotationDirection.y += this.mouseMovement.y;\n        this.mouseMovement.x = 0;\n        this.mouseMovement.y = 0;\n\n        this.cameraOrbitX.multiply(Quaternion.makeRotationX(this.rotationDirection.x * this.rotationSpeedX * deltaTime));\n        this.cameraOrbitY.multiply(Quaternion.makeRotationY(this.rotationDirection.y * this.rotationSpeedY * deltaTime));\n        this.distance += this.zoomDirection * this.zoomSpeed * deltaTime;\n\n        // Reset the cumulative parameters\n        this.rotationDirection.set(0, 0, 0);\n        this.zoomDirection = 0;\n\n        this.updateCamera();\n    }\n\n    private updateCamera(): void \n    {\n        this.camera.rotation.copy(this.cameraOrbitY);\n        this.camera.rotation.multiply(this.cameraOrbitX);\n\n        this.camera.position.set(0, 0, this.distance);\n        this.camera.position.rotate(this.camera.rotation);\n        this.camera.position.add(this.targetPoint);\n    }\n\n    freeze(): void\n    {\n        this.mouseDrag = false;\n        this.mouseMovement.set(0, 0);\n        this.zoomDirection = 0;\n    }\n}", "import { Camera } from '../core/Camera';\nimport { Vector3 } from '../math/Vector3';\nimport { Quaternion } from '../math/Quaternion';\nimport { Vector2 } from '../math/Vector2';\n\nexport class FirstPersonControls\n{\n    public camera: Camera;\n    \n    public translationSpeed: number;\n    public rotationSpeed: number;\n    public mouseButton: number;\n    public flyMode: boolean;\n    public hasMoved: boolean;\n\n    // Camera parameters\n    private moveDirection: Vector3;\n    private rotationDirection: Vector3;\n    private mouseDrag: boolean;\n    private mouseMovement: Vector2;\n\n    private targetOrbitX: Quaternion;\n    private targetOrbitY: Quaternion;\n\n    constructor(camera: Camera)\n    {\n        this.camera = camera;\n\n        this.mouseButton = 0;\n        this.translationSpeed = 2;\n        this.rotationSpeed = Math.PI / 4;\n        this.flyMode = true;\n        this.hasMoved = false;\n\n        this.moveDirection = new Vector3();\n        this.rotationDirection = new Vector3();\n        this.mouseDrag = false;\n        this.mouseMovement = new Vector2();\n\n        this.targetOrbitX = new Quaternion();\n        this.targetOrbitY = new Quaternion();\n\n        window.addEventListener('mousedown', (event: MouseEvent) => {this.onMouseDown(event)});\n        window.addEventListener('mouseup', (event: MouseEvent) => {this.onMouseUp(event)});\n        window.addEventListener('mousemove', (event: MouseEvent) => {this.onMouseMove(event)});\n        window.addEventListener('keydown', (event: KeyboardEvent) => {this.onKeyDown(event)});\n        window.addEventListener('keyup', (event: KeyboardEvent) => {this.onKeyUp(event)});  \n    }\n\n    onMouseDown(event: MouseEvent): void \n    {\n        if(this.mouseButton == event.button && (event.target! as Element).localName == \"canvas\")\n            this.mouseDrag = true;\n    }\n\n    onMouseUp(event: MouseEvent): void\n    {\n        if(this.mouseButton == event.button)\n            this.mouseDrag = false;\n    }\n    \n    onMouseMove(event: MouseEvent): void\n    {\n        if(this.mouseDrag)\n        {\n            this.mouseMovement.x = -event.movementY;\n            this.mouseMovement.y = -event.movementX;\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void \n    {\n        if(event.key == 'w')\n        {\n            this.moveDirection.z = -1;\n        }\n        else if(event.key == 's')\n        {\n            this.moveDirection.z = 1;\n        }\n        else if(event.key == 'a')\n        {\n            this.moveDirection.x = -1;\n        }\n        else if(event.key == 'd')\n        {\n            this.moveDirection.x = 1;\n        }\n    }\n\n    onKeyUp(event: KeyboardEvent): void \n    {\n        if(event.key == 'w' && this.moveDirection.z == -1)\n        {\n            this.moveDirection.z = 0;\n        }\n        if(event.key == 's' && this.moveDirection.z == 1)\n        {\n            this.moveDirection.z = 0;\n        }\n        else if(event.key == 'a' && this.moveDirection.x == -1)\n        {\n            this.moveDirection.x = 0;\n        }\n        else if(event.key == 'd' && this.moveDirection.x == 1)\n        {\n            this.moveDirection.x = 0;\n        }\n    }\n\n    update(deltaTime: number): void\n    {\n        this.rotationDirection.x += this.mouseMovement.x;\n        this.rotationDirection.y += this.mouseMovement.y;\n        this.mouseMovement.x = 0;\n        this.mouseMovement.y = 0;\n\n        // Prevent the camera from rotating upside-down\n        const newTargetOrbitX = Quaternion.multiply(this.targetOrbitX, Quaternion.makeRotationX(this.rotationDirection.x * this.rotationSpeed * deltaTime));\n        const testVector = new Vector3(0, 0, -1);\n        testVector.rotate(newTargetOrbitX);\n        if(testVector.z < 0)\n            this.targetOrbitX.copy(newTargetOrbitX);\n\n        // Set the yaw target\n        this.targetOrbitY.multiply(Quaternion.makeRotationY(this.rotationDirection.y * this.rotationSpeed * deltaTime));\n\n        // Reset the cumulative rotation direction\n        this.rotationDirection.set(0, 0, 0);\n        \n        // Compute the look target and aim the camera accordignly\n        const target = new Vector3(0, 0, -1);\n        target.rotate(this.targetOrbitX);\n        target.rotate(this.targetOrbitY);\n        target.add(this.camera.position);\n        this.camera.lookAt(target, Vector3.UP);\n        \n        // Translate the camera based on the keyboard input\n        if(this.moveDirection.length() == 0)\n        {\n            this.hasMoved = false;\n        }\n        else\n        {\n            const moveDirectionNormalized = Vector3.normalize(this.moveDirection);\n            if(this.flyMode)\n            {\n                moveDirectionNormalized.multiplyScalar(this.translationSpeed * deltaTime);\n                this.camera.translate(moveDirectionNormalized);\n            }\n            else\n            {\n                const translation = Vector3.rotate(moveDirectionNormalized, this.camera.rotation);\n                translation.y = 0;\n                translation.normalize();\n                translation.multiplyScalar(this.translationSpeed * deltaTime);\n                this.camera.position.add(translation);\n            }\n            this.hasMoved = true;\n        }\n    }\n\n    freeze(): void\n    {\n        this.mouseDrag = false;\n        this.mouseMovement.x = 0;\n        this.mouseMovement.y = 0;\n        this.moveDirection.set(0, 0, 0);\n    }\n}", "import { Vector3 } from \"./Vector3\"\n\nexport class Plane \n{\n    public point: Vector3;\n    public normal: Vector3;\n\n/**\n * Constructs a new Plane object\n * \n * @param point - The point on the plane (defaults to Vector3(0, 0, 0))\n * @param normal - The normal vector of the plane (defaults to Vector3(0, 0, -1))\n */\n    constructor(point = new Vector3(), normal = new Vector3(0, 0, -1))\n    {\n        this.point = point.clone();\n        this.normal = Vector3.normalize(normal);\n    }\n\n/**\n * Calculates the distance between a point and this Plane\n * \n * @param point - The point to calculate the distance to\n * @returns The distance between the point and this Plane\n */\n    distanceTo(point: Vector3): number\n    {\n        return this.normal.dot(point) - this.point.dot(this.normal);\n    }\n\n\n/**\n * Projects the given point onto the Plane \n * \n * @param point - The point to be projected onto the Plane\n * @returns The projected point on the Plane\n */\n    project(point: Vector3): Vector3\n    {\n        const target = new Vector3(this.normal.x, this.normal.y, this.normal.z);\n        target.multiplyScalar(-this.distanceTo(point));\n        target.add(point);\n\n        return target;\n    }\n}", "import { Vector3 } from './Vector3'\nimport { Plane } from './Plane'\nimport { BoundingBox3 } from './BoundingBox3'\nimport { BoundingSphere } from './BoundingSphere'\nimport { Vector2 } from './Vector2';\nimport { Camera } from '../core/Camera'\nimport { Mesh } from '../geometry/3d/Mesh'\nimport { Transform3 } from '../core/Transform3'\n\nexport class Ray \n{\n    public origin: Vector3;\n    public direction: Vector3;\n\n    /**\n     * Constructor of the Ray class\n     * \n     * @param origin - The origin of the ray\n     * @param direction - The direction of the ray\n     */\n    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1))\n    {\n        this.origin = origin;\n        this.direction = direction;\n    }\n    \n    /**\n     * Sets the origin and direction of the Ray\n     * \n     * @param origin - The origin of the Ray\n     * @param direction - The direction of the Ray\n     */\n    set(origin: Vector3, direction: Vector3): void\n    {\n        this.origin = origin;\n        this.direction = direction;\n    }\n\n    /**\n     * Sets the Ray based on the device coordinates and camera\n     * \n     * @param deviceCoords - A Vector2 containing the device coordinates\n     * @param camera - The Camera used to set the Ray\n     */\n    setPickRay(deviceCoords: Vector2, camera: Camera): void\n    {\n        \n        const [worldPosition, worldRotation, worldScale] = camera.worldMatrix.decompose();\n            \n        this.origin.copy(worldPosition);\n        this.direction.set(deviceCoords.x, deviceCoords.y, -1);\n        this.direction.transform(camera.projectionMatrix.inverse());\n        this.direction.rotate(worldRotation);\n        this.direction.normalize();\n    }\n\n    /**\n     * Checks if the Ray intersects a Plane\n     * Reference: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-plane-and-ray-disk-intersection\n     * \n     * @param plane - The Plane to check for intersection\n     * @returns A Vector3 containing the intersection point or null if there is no intersection\n     */\n    intersectsPlane(plane: Plane): Vector3 | null\n    {\n\n        // This method assumes the normals are unit vectors\n        const denominator = this.direction.dot(plane.normal);\n\n        if(Math.abs(denominator) > 0.000001)\n        {\n            const rayOriginToPlanePoint = Vector3.subtract(plane.point, this.origin);\n            const t = rayOriginToPlanePoint.dot(plane.normal) / denominator;\n            \n            if(t > 0)\n            {\n                const intersectionPoint = Vector3.multiplyScalar(this.direction, t);\n                intersectionPoint.add(this.origin);\n                return intersectionPoint;\n            }\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Checks if the Ray intersects a Sphere\n     * Reference: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n     * \n     * @param sphere - The Sphere to check for intersection\n     * @returns A Vector3 containing the intersection point or null if there is no intersection\n     */\n    intersectsSphere(sphere: BoundingSphere): Vector3 | null\n    {\n\n        const l = Vector3.subtract(sphere.center, this.origin);\n        const tca = l.dot(this.direction);\n        const radiusSquared = sphere.radius * sphere.radius;\n\n        const d2 = l.dot(l) - tca * tca;\n        if(d2 > radiusSquared)\n            return null;\n\n        const thc = Math.sqrt(radiusSquared - d2);\n        const t0 = tca - thc;\n        const t1 = tca + thc;\n\n        if(t0 < 0 && t1 < 0)\n            return null;\n        \n        const intersection = this.direction.clone();\n\n        if(t0 < t1)\n            intersection.multiplyScalar(t0);\n        else\n            intersection.multiplyScalar(t1);\n        \n        intersection.add(this.origin);\n\n        return intersection;\n    }\n\n    /**\n     * Checks if the Ray intersects a Box\n     * Reference: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection\n     * \n     * @param box - The Box to check for intersection\n     * @returns A Vector3 containing the intersection point or null if there is no intersection\n     */\n    intersectsBox(box: BoundingBox3): Vector3 | null\n    {\n        let tmin = (box.min.x - this.origin.x) / this.direction.x; \n        let tmax = (box.max.x - this.origin.x) / this.direction.x; \n    \n        if (tmin > tmax)\n        {\n            const temp = tmin;\n            tmin = tmax;\n            tmax = temp;\n        } \n    \n        let tymin = (box.min.y - this.origin.y) / this.direction.y; \n        let tymax = (box.max.y - this.origin.y) / this.direction.y; \n    \n        if (tymin > tymax)\n        {\n            const temp = tymin;\n            tymin = tymax;\n            tymax = temp;\n        } \n    \n        if ((tmin > tymax) || (tymin > tmax)) \n            return null; \n    \n        if (tymin > tmin) \n            tmin = tymin; \n    \n        if (tymax < tmax) \n            tmax = tymax; \n    \n        let tzmin = (box.min.z - this.origin.z) / this.direction.z; \n        let tzmax = (box.max.z - this.origin.z) / this.direction.z; \n    \n        if (tzmin > tzmax) \n        {\n            const temp = tzmin;\n            tzmin = tzmax;\n            tzmax = temp;\n        } \n    \n        if ((tmin > tzmax) || (tzmin > tmax)) \n            return null; \n    \n        if (tzmin > tmin) \n            tmin = tzmin; \n    \n        if (tzmax < tmax) \n            tmax = tzmax; \n\n        const intersectionPoint = Vector3.multiplyScalar(this.direction, tmin);\n        intersectionPoint.add(this.origin);\n        return intersectionPoint;\n    }\n\n    /**\n     * Checks if the Ray intersects an Oriented Bounding Box\n     * \n     * @param transform - The Transform of the Oriented Bounding Box\n     * @returns A Vector3 containing the intersection point or null if there is no intersection\n     */\n    intersectsOrientedBoundingBox(transform: Transform3): Vector3 | null\n    {\n        const localIntersection = this.createLocalRay(transform).intersectsBox(transform.boundingBox);\n        if(localIntersection)\n        {\n            localIntersection.transform(transform.worldMatrix);\n        }\n        return localIntersection;\n    }\n\n    /**\n     * Computes the intersection between a ray and an oriented bounding sphere\n     * \n     * @param transform - The transformation of the bounding sphere \n     * @returns The intersection point if the ray intersects the bounding sphere, otherwise null\n     */\n    intersectsOrientedBoundingSphere(transform: Transform3): Vector3 | null\n    {\n        const localIntersection = this.createLocalRay(transform).intersectsSphere(transform.boundingSphere);\n        if(localIntersection)\n        {\n            localIntersection.transform(transform.worldMatrix);\n        }\n\n        return localIntersection;\n    }\n\n    /**\n     * Computes a brute force intersection test between a ray and a mesh \n     * \n     * @param mesh - The mesh to test the intersection against\n     * @returns The intersection point if the ray intersects the mesh, otherwise null\n     */\n    intersectsMesh(mesh: Mesh): Vector3 | null\n    { \n        const localRay = this.createLocalRay(mesh);\n\n        // If we do not intersect the bounding box, then there is no\n        // need to load the vertices from GPU memory and conduct\n        // an intersection test with each triangle in the mesh.\n        if(!localRay.intersectsBox(mesh.boundingBox))\n            return null;\n\n        const vertices = mesh.getVertices();\n        const indices = mesh.getIndices();\n\n        const result = localRay.intersectsTriangles(vertices, indices);\n\n        if(result)\n            result.transform(mesh.worldMatrix);\n\n        return result;\n    }\n\n    \n    /**\n     * Computes the intersection between a ray and a series of triangles \n     * \n     * @param vertices - Array of either Vector3 objects or numbers representing the vertex positions\n     * @param indices - Array of indices representing the triangle faces\n     * @returns The intersection point if the ray intersects the triangles, otherwise null\n     */\n    intersectsTriangles(vertices: Vector3[] | number[], indices: number[]): Vector3 | null\n    {\n        let positions: Vector3[];\n        if(typeof vertices[0] === 'number')\n        {\n            positions = [];\n\n            const vArray = vertices as number[]\n            for(let i=0; i < vertices.length; i+=3)\n            {\n                positions.push(new Vector3(vArray[i], vArray[i+1], vArray[i+2]));\n            }\n        }\n        else\n        {\n            positions = vertices as Vector3[];\n        }\n\n        const results = [];\n        for(let i=0; i < indices.length; i+=3)\n        {\n            const intersection = this.intersectsTriangle(positions[indices[i]], positions[indices[i+1]], positions[indices[i+2]]);\n            \n            if(intersection)\n                results.push(intersection);\n        }\n\n        if(results.length == 0)\n        {\n            return null;\n        }\n        else if(results.length == 1)\n        {\n            return results[0];\n        }\n        else\n        {\n            let closestPoint = 0;\n            let closestDistance = this.origin.distanceTo(results[0]);\n            for(let i=1; i < results.length; i++)\n            {\n                const distance = this.origin.distanceTo(results[i]);\n                if(distance < closestDistance)\n                {\n                    closestPoint = i;\n                    closestDistance = distance;\n                }\n            }\n\n            return results[closestPoint];\n        }\n    }\n\n    /**\n     * Implementation of the M\u00F6ller\u2013Trumbore triangle intersection algorithm\n     * https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\n     * \n     * @param vertex0 - Vector3 object representing the first vertex of the triangle\n     * @param vertex1 - Vector3 object representing the second vertex of the triangle\n     * @param vertex2 - Vector3 object representing the third vertex of the triangle\n     * @returns The intersection point if the ray intersects the triangle, otherwise null\n     */\n    intersectsTriangle(vertex0: Vector3, vertex1: Vector3, vertex2: Vector3): Vector3 | null\n    {\n        const EPSILON = 0.0000001;\n\n        const edge1 = Vector3.subtract(vertex1, vertex0);\n        const edge2 = Vector3.subtract(vertex2, vertex0);\n        const h = Vector3.cross(this.direction, edge2);\n        const a = edge1.dot(h);\n    \n        if (a > -EPSILON && a < EPSILON) \n        {\n            // This ray is parallel to this triangle.\n            return null;    \n        }\n\n        const f = 1.0 / a;\n        const s = Vector3.subtract(this.origin, vertex0);\n        const u = f * (s.dot(h));\n        if (u < 0.0 || u > 1.0)\n        {\n            return null;\n        }\n\n        const q = Vector3.cross(s, edge1);\n        const v = f * this.direction.dot(q);\n        if (v < 0.0 || u + v > 1.0) \n        {\n            return null;\n        }\n\n        // At this stage we can compute t to find out where the intersection point is on the line.\n        const t = f * edge2.dot(q);\n\n        // ray intersection\n        if (t > EPSILON) \n        {\n            const intersection = this.direction.clone();\n            intersection.multiplyScalar(t);\n            intersection.add(this.origin);\n            return intersection;\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates a new Ray object in the local space of a given Transform\n     * \n     * @param transform - The Transform object to create the local ray from\n     * @returns The ray in the local space of the Transform\n     */\n    createLocalRay(transform: Transform3): Ray\n    {\n        const localRay = new Ray(this.origin.clone(), this.direction.clone());\n\n        const [worldPosition, worldRotation, worldScale] = transform.worldMatrix.decompose();\n\n        localRay.origin.subtract(worldPosition);\n\n        const inverseRotation = worldRotation.inverse();\n        localRay.origin.rotate(inverseRotation);\n        localRay.direction.rotate(inverseRotation);\n\n        const scale = worldScale;\n        const inverseScale = new Vector3();\n        inverseScale.x = 1 / scale.x;\n        inverseScale.y = 1 / scale.y;\n        inverseScale.z = 1 / scale.z;\n        localRay.origin.multiply(inverseScale);\n        localRay.direction.multiply(inverseScale);\n        localRay.direction.normalize();\n        \n        return localRay;\n    } \n}", "import { GfxApp } from '../core/GfxApp';\nimport { Transform3 } from '../core/Transform3';\nimport { Axes3 } from '../geometry/3d/Axes3';\nimport { BoxMesh } from '../geometry/3d/BoxMesh';\nimport { UnlitMaterial } from '../materials/UnlitMaterial';\nimport { Color } from '../math/Color';\nimport { Plane } from '../math/Plane';\nimport { Ray } from '../math/Ray'\nimport { Vector2 } from '../math/Vector2';\nimport { Vector3 } from '../math/Vector3';\n\nexport class TransformWidget extends Transform3\n{\n    public axes: Axes3;\n    public thickAxes: BoxMesh[];\n    \n    private deviceCoords: Vector2;\n    private currentAxis: number;\n    private selectionPoint: Vector3;\n\n    constructor(lineLength = 1, selectionWidth = 0.01, triggerDistance = 0.05)\n    {\n        super();\n\n        this.currentAxis = -1;\n        this.deviceCoords = new Vector2();\n        this.selectionPoint = new Vector3();\n\n        this.axes = new Axes3(lineLength);\n        this.add(this.axes);\n\n        this.thickAxes = [];\n        this.thickAxes.push(new BoxMesh(lineLength, selectionWidth, selectionWidth));\n        this.thickAxes.push(new BoxMesh(selectionWidth, lineLength, selectionWidth));\n        this.thickAxes.push(new BoxMesh(selectionWidth, selectionWidth, lineLength));\n\n        this.thickAxes[0].position.set(lineLength/2, 0, 0);\n        this.thickAxes[1].position.set(0, lineLength/2, 0);\n        this.thickAxes[2].position.set(0, 0, lineLength/2);\n\n        this.thickAxes[0].material = new UnlitMaterial();\n        this.thickAxes[1].material = new UnlitMaterial();\n        this.thickAxes[2].material = new UnlitMaterial();\n\n        this.thickAxes[0].material.setColor(new Color(1, 0, 0));\n        this.thickAxes[1].material.setColor(new Color(0, 1, 0));\n        this.thickAxes[2].material.setColor(new Color(0, 0, 1));\n\n        this.thickAxes[0].boundingBox.max.y = triggerDistance;\n        this.thickAxes[0].boundingBox.max.z = triggerDistance;\n\n        this.thickAxes[1].boundingBox.max.x = triggerDistance;\n        this.thickAxes[1].boundingBox.max.z = triggerDistance;\n\n        this.thickAxes[2].boundingBox.max.x = triggerDistance;\n        this.thickAxes[2].boundingBox.max.y = triggerDistance;\n\n        this.add(this.thickAxes[0]);\n        this.add(this.thickAxes[1]);\n        this.add(this.thickAxes[2]);\n\n        window.addEventListener('mousedown', (event: MouseEvent) => {this.onMouseDown(event)});\n        window.addEventListener('mouseup', (event: MouseEvent) => {this.onMouseUp(event)});\n        window.addEventListener('mousemove', (event: MouseEvent) => {this.onMouseMove(event)});\n    }\n\n    update(deltaTime: number): void\n    {\n        const ray = new Ray();\n        ray.setPickRay(this.deviceCoords, GfxApp.getInstance().camera);\n\n        if(this.currentAxis == -1)\n        {\n            this.thickAxes[0].visible = false;\n            this.thickAxes[1].visible = false;\n            this.thickAxes[2].visible = false;\n            \n            if(ray.intersectsOrientedBoundingBox(this.thickAxes[0]))\n            {\n                this.thickAxes[0].visible = true;\n            }\n            else if(ray.intersectsOrientedBoundingBox(this.thickAxes[1]))\n            {\n                this.thickAxes[1].visible = true;\n            }\n            else if(ray.intersectsOrientedBoundingBox(this.thickAxes[2]))\n            {\n                this.thickAxes[2].visible = true;\n            }\n        }\n        else if(this.currentAxis == 0)\n        {\n            const [worldPosition, worldRotation, worldScale] = GfxApp.getInstance().camera.worldMatrix.decompose();\n            const projectedPosition = ray.intersectsPlane(new Plane(Vector3.ZERO, new Vector3(0, worldPosition.y, worldPosition.z)));\n            if(projectedPosition)\n            {\n                this.translateX(projectedPosition.x - this.selectionPoint.x);\n                this.selectionPoint = projectedPosition;\n            }\n        }\n        else if(this.currentAxis == 1)\n        {\n            const [worldPosition, worldRotation, worldScale] = GfxApp.getInstance().camera.worldMatrix.decompose();\n            const projectedPosition = ray.intersectsPlane(new Plane(Vector3.ZERO, new Vector3(worldPosition.x, 0, worldPosition.z)));\n            if(projectedPosition)\n            {\n                this.translateY(projectedPosition.y - this.selectionPoint.y);\n                this.selectionPoint = projectedPosition;\n            }\n        }\n        else if(this.currentAxis == 2)\n        {\n            const [worldPosition, worldRotation, worldScale] = GfxApp.getInstance().camera.worldMatrix.decompose();\n            const projectedPosition = ray.intersectsPlane(new Plane(Vector3.ZERO, new Vector3(worldPosition.x, worldPosition.y, 0)));\n            if(projectedPosition)\n            {\n                this.translateZ(projectedPosition.z - this.selectionPoint.z);\n                this.selectionPoint = projectedPosition;\n            }\n        }\n    }\n\n    onMouseDown(event: MouseEvent): void \n    {\n        this.deviceCoords = GfxApp.getInstance().getNormalizedDeviceCoordinates(event.x, event.y);\n\n        const ray = new Ray();\n        ray.setPickRay( this.deviceCoords, GfxApp.getInstance().camera);\n\n        if(this.currentAxis == -1)\n        {\n            if(ray.intersectsOrientedBoundingBox(this.thickAxes[0]))\n            {\n                const [worldPosition, worldRotation, worldScale] = GfxApp.getInstance().camera.worldMatrix.decompose();\n                const projectedPosition = ray.intersectsPlane(new Plane(Vector3.ZERO, new Vector3(0, worldPosition.y, worldPosition.z)));\n\n                if(projectedPosition)\n                {\n                    this.selectionPoint = projectedPosition;\n                    this.currentAxis = 0;\n                }\n\n                return;\n            }\n\n            if(ray.intersectsOrientedBoundingBox(this.thickAxes[1]))\n            {\n                const [worldPosition, worldRotation, worldScale] = GfxApp.getInstance().camera.worldMatrix.decompose();\n\n                const projectedPosition = ray.intersectsPlane(new Plane(Vector3.ZERO, new Vector3(worldPosition.x, 0, worldPosition.z)));\n                if(projectedPosition)\n                {\n                    this.selectionPoint = projectedPosition;\n                    this.currentAxis = 1;\n                }\n\n                return;\n            }\n\n            if(ray.intersectsOrientedBoundingBox(this.thickAxes[2]))\n            {\n                const [worldPosition, worldRotation, worldScale] = GfxApp.getInstance().camera.worldMatrix.decompose();\n                const projectedPosition = ray.intersectsPlane(new Plane(Vector3.ZERO, new Vector3(worldPosition.x, worldPosition.y, 0)));\n\n                if(projectedPosition)\n                {\n                    this.selectionPoint = projectedPosition;\n                    this.currentAxis = 2;\n                }\n\n                return;\n            }\n        }\n    }\n\n    onMouseUp(event: MouseEvent): void\n    {\n        this.currentAxis = -1;\n    }\n    \n    onMouseMove(event: MouseEvent): void\n    {\n        this.deviceCoords = GfxApp.getInstance().getNormalizedDeviceCoordinates(event.x, event.y);\n    }\n\n    isSelected(): boolean\n    {\n        return this.currentAxis >= 0;\n    }\n}", "import { Vector3 } from \"../math/Vector3\";\nimport { Color } from \"../math/Color\";\nimport { LightManager } from \"./LightManager\";\nimport { Transform3 } from \"../core/Transform3\";\n\nexport enum LightType\n{\n    POINT = 0,\n    DIRECTIONAL\n}\n\nexport abstract class Light extends Transform3\n{\n    public ambientIntensity: Vector3;\n    public diffuseIntensity: Vector3;\n    public specularIntensity: Vector3;\n\n    protected readonly type: LightType;\n\n    constructor(type: LightType, ambientIntensity: Vector3 | Color, diffuseIntensity: Vector3 | Color, specularIntensity: Vector3 | Color)\n    {\n        super();\n\n        this.type = type;\n\n        if(ambientIntensity instanceof Vector3)\n            this.ambientIntensity = new Vector3(ambientIntensity.x, ambientIntensity.y, ambientIntensity.z);\n        else\n            this.ambientIntensity = new Vector3(ambientIntensity.r, ambientIntensity.g, ambientIntensity.b);\n\n        if(diffuseIntensity instanceof Vector3)\n            this.diffuseIntensity = new Vector3(diffuseIntensity.x, diffuseIntensity.y, diffuseIntensity.z);\n        else\n            this.diffuseIntensity = new Vector3(diffuseIntensity.r, diffuseIntensity.g, diffuseIntensity.b);\n\n        if(specularIntensity instanceof Vector3)\n            this.specularIntensity = new Vector3(specularIntensity.x, specularIntensity.y, specularIntensity.z);\n        else\n            this.specularIntensity = new Vector3(specularIntensity.r, specularIntensity.g, specularIntensity.b);\n    }\n\n    getType(): LightType\n    {\n        return this.type;\n    }\n\n    setLights(lightManager: LightManager): void\n    {\n        lightManager.addLight(this);\n        super.setLights(lightManager);\n    }\n}", "import { Color } from \"../math/Color\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Light, LightType } from \"./Light\";\n\nexport class AmbientLight extends Light\n{\n    constructor(intensity: Vector3 | Color = new Vector3(0.5, 0.5, 0.5))\n    {\n        super(LightType.POINT, intensity, Vector3.ZERO, Vector3.ZERO);\n    }\n}", "import { Color } from \"../math/Color\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Light, LightType } from \"./Light\";\n\nexport class DirectionalLight extends Light\n{\n    constructor(intensity: Vector3 | Color = new Vector3(0.5, 0.5, 0.5))\n    {\n        super(LightType.DIRECTIONAL, Vector3.ZERO, intensity, intensity);\n    }\n}", "import { Color } from \"../math/Color\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Light, LightType } from \"./Light\";\n\nexport class PointLight extends Light\n{\n    constructor(intensity: Vector3 | Color = new Vector3(0.5, 0.5, 0.5))\n    {\n        super(LightType.POINT, Vector3.ZERO, intensity, intensity);\n    }\n}", "import { GfxApp } from '../core/GfxApp';\n\nexport class TextFile\n{\n    data: string;\n\n    constructor()\n    {\n        this.data = '';\n    }\n}\n\nexport class TextFileLoader\n{\n    static load(filename: string, callback: ((loadedFile: TextFile) => void) | null = null): TextFile\n    {\n        GfxApp.getInstance().assetManager.requestedAssets.push(filename);\n\n        const textFile = new TextFile();\n\n        fetch(filename).then((response: Response) => {\n            if(!response.ok)\n                throw new Error();\n            return response.blob();\n        })\n        .then((data: Blob) => {\n            data.text().then((text: string) => {\n                textFile.data = text;\n                if(callback)\n                {\n                    callback(textFile);\n                }\n                GfxApp.getInstance().assetManager.loadedAssets.push(filename);\n            });\n        })\n        .catch(() => {\n            GfxApp.getInstance().assetManager.errorAssets.push(filename);\n            console.error('Unable to download file: ' + filename);\n        });\n\n        return textFile;\n    }\n}", "export class StringParser\n{\n    private readonly tokens: string[][];\n    private line: number;\n    private token: number;\n\n    constructor(data: string)\n    {\n        this.tokens = [];\n        this.line = 0;\n        this.token = 0;\n\n        // Trim whitespace from each line\n        const lines = data.split('\\n');\n        for(let i=0; i < lines.length; i++)\n        {\n            this.tokens.push(lines[i].trim().split(/\\s+/));\n        }\n\n        // Remove empty strings\n        for(let i=0; i < this.tokens.length; i++)\n        {\n            if(this.tokens[i].length == 1 && this.tokens[i][0] == '')\n            {\n                this.tokens.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    peek(): string\n    {\n        return this.tokens[this.line][this.token];\n    }\n    \n    expect(token: string): boolean\n    {\n        if(this.peek() == token)\n        {\n            this.readToken();\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    consumeLine(): void\n    {\n        this.line++;\n        this.token = 0;\n    }\n\n    done(): boolean\n    {\n        return this.line >= this.tokens.length;\n    }\n\n    readToken(): string\n    {\n        const nextToken = this.tokens[this.line][this.token];\n        this.token++;\n\n        if(this.token >= this.tokens[this.line].length)\n        {\n            this.line++;\n            this.token = 0;\n        }\n\n        return nextToken;\n    }\n\n\n    readNumber(): number\n    {\n        return Number(this.readToken());\n    }\n\n    readLine(): string[]\n    {\n        const nextLine = [];\n        for(let i=this.token; i < this.tokens[this.line].length; i++)\n        {\n            nextLine.push(this.tokens[this.line][i]);\n        }\n\n        this.line++;\n        this.token = 0;\n\n        return nextLine;\n    }\n}", "import { Mesh } from '../geometry/3d/Mesh'\nimport { GfxApp } from '../core/GfxApp';\nimport { StringParser } from './StringParser';\n\nexport class ObjLoader\n{\n    static load(filename: string, callback: ((loadedMesh: Mesh) => void) | null = null): Mesh\n    {\n        GfxApp.getInstance().assetManager.requestedAssets.push(filename);\n\n        const mesh = new Mesh();\n\n        fetch(filename).then((response: Response) => {\n            if(!response.ok)\n                throw new Error();\n            return response.blob();\n        })\n        .then((data: Blob) => {\n            data.text().then((text: string) => {\n                ObjLoader.parse(text, mesh!);\n                if(callback)\n                {\n                    callback(mesh!);\n                }\n                GfxApp.getInstance().assetManager.loadedAssets.push(filename);\n            });\n        })\n        .catch(() => {\n            GfxApp.getInstance().assetManager.errorAssets.push(filename);\n            console.error('Unable to download file: ' + filename);\n        });\n\n        return mesh;\n    }\n\n    private static parse(obj: string, mesh: Mesh)\n    {\n        const parser = new StringParser(obj);\n        const vertices: number[] = [];\n        const colors: number[] = [];\n        const normals: number[] = [];\n        const indices: number[] = [];\n        const uvs: number[] = [];\n\n        while(!parser.done())\n        {\n            const nextToken = parser.readToken();\n\n            if(nextToken == 'v')\n                this.parseVertex(parser.readLine(), vertices, colors);\n            else if(nextToken == 'vn')\n                this.parseNormal(parser.readLine(), normals);\n            else if(nextToken == 'vt')\n                this.parseTextureCoordinate(parser.readLine(), uvs);\n            else if(nextToken == 'f')\n                this.parseFace(parser.readLine(), indices);\n            else\n                parser.consumeLine();\n        }\n\n        mesh.setVertices(vertices);\n        mesh.setColors(colors);\n        mesh.setNormals(normals);\n        mesh.setIndices(indices);\n\n        // If the file did not contain vertex colors, then assign a default color\n        if(colors.length == 0)\n            mesh.createDefaultVertexColors();\n\n        // If we have per vertex UVs, asign them to the mesh\n        if(uvs.length / 2 == vertices.length / 3)\n            mesh.setTextureCoordinates(uvs);\n    }\n\n    private static parseVertex(line: string[], vertices: number[], colors: number[])\n    {\n        vertices.push(Number(line[0]));\n        vertices.push(Number(line[1]));\n        vertices.push(Number(line[2]));\n\n        if(line.length == 6)\n        {\n            colors.push(Number(line[3]));\n            colors.push(Number(line[4]));\n            colors.push(Number(line[5]));\n            colors.push(1);\n        }\n    }\n\n    private static parseNormal(line: string[], normals: number[])\n    {\n        normals.push(Number(line[0]));\n        normals.push(Number(line[1]));\n        normals.push(Number(line[2]));\n    }\n\n    private static parseTextureCoordinate(line: string[], uvs: number[])\n    {\n        uvs.push(Number(line[0]));\n        uvs.push(Number(line[1]));\n    }\n\n\n    private static parseFace(line: string[], indices: number[])\n    {\n        for(let i=0; i < 3; i++)\n        {\n            const index = line[i].split('/');\n            indices.push(Number(index[0])-1);\n        }\n    }\n}", "// @ts-ignore\nimport phongVertexShader from '../shaders/phong.vert'\n// @ts-ignore\nimport phongFragmentShader from '../shaders/phong.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Texture } from './Texture';\nimport { Vector3 } from '../math/Vector3'\nimport { Color } from '../math/Color' \n\nexport class PhongMaterial extends Material3\n{\n    public texture: Texture | null;\n    public ambientColor: Color;\n    public diffuseColor: Color;\n    public specularColor: Color;\n    public shininess: number;\n\n    public static shader = new ShaderProgram(phongVertexShader, phongFragmentShader);\n\n    private kAmbientUniform: WebGLUniformLocation | null;\n    private kDiffuseUniform: WebGLUniformLocation | null;\n    private kSpecularUniform: WebGLUniformLocation | null;\n    private shininessUniform: WebGLUniformLocation | null;\n    \n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private eyePositionUniform: WebGLUniformLocation | null;\n    private modelUniform: WebGLUniformLocation | null;\n    private viewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n    private normalUniform: WebGLUniformLocation | null;\n\n    private numLightsUniform: WebGLUniformLocation | null;\n    private lightTypesUniform: WebGLUniformLocation | null;\n    private lightPositionsUniform: WebGLUniformLocation | null;\n    private ambientIntensitiesUniform: WebGLUniformLocation | null;\n    private diffuseIntensitiesUniform: WebGLUniformLocation | null;\n    private specularIntensitiesUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private normalAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    constructor()\n    {\n        super();\n\n        this.texture = null;\n        this.ambientColor = new Color(1, 1, 1);\n        this.diffuseColor = new Color(1, 1, 1);\n        this.specularColor = new Color(0, 0, 0);\n        this.shininess = 30;\n\n        PhongMaterial.shader.initialize(this.gl);\n\n        this.kAmbientUniform = PhongMaterial.shader.getUniform(this.gl, 'kAmbient');\n        this.kDiffuseUniform = PhongMaterial.shader.getUniform(this.gl, 'kDiffuse');\n        this.kSpecularUniform = PhongMaterial.shader.getUniform(this.gl, 'kSpecular');\n        this.shininessUniform = PhongMaterial.shader.getUniform(this.gl, 'shininess');\n\n        this.textureUniform = PhongMaterial.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = PhongMaterial.shader.getUniform(this.gl, 'useTexture');\n\n        this.eyePositionUniform = PhongMaterial.shader.getUniform(this.gl, 'eyePosition');\n        this.viewUniform = PhongMaterial.shader.getUniform(this.gl, 'viewMatrix');\n        this.modelUniform = PhongMaterial.shader.getUniform(this.gl, 'modelMatrix');\n        this.projectionUniform = PhongMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n        this.normalUniform = PhongMaterial.shader.getUniform(this.gl, 'normalMatrix');\n\n        this.numLightsUniform = PhongMaterial.shader.getUniform(this.gl, 'numLights');\n        this.lightTypesUniform = PhongMaterial.shader.getUniform(this.gl, 'lightTypes');\n        this.lightPositionsUniform = PhongMaterial.shader.getUniform(this.gl, 'lightPositions');\n        this.ambientIntensitiesUniform = PhongMaterial.shader.getUniform(this.gl, 'ambientIntensities');\n        this.diffuseIntensitiesUniform = PhongMaterial.shader.getUniform(this.gl, 'diffuseIntensities');\n        this.specularIntensitiesUniform = PhongMaterial.shader.getUniform(this.gl, 'specularIntensities');\n\n        this.positionAttribute = PhongMaterial.shader.getAttribute(this.gl, 'position');\n        this.normalAttribute = PhongMaterial.shader.getAttribute(this.gl, 'normal');\n        this.colorAttribute = PhongMaterial.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = PhongMaterial.shader.getAttribute(this.gl, 'texCoord');   \n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        this.initialize();\n\n        // Switch to this shader\n        this.gl.useProgram(PhongMaterial.shader.getProgram());\n\n        // Set the camera uniforms\n        const cameraPosition = new Vector3();\n        cameraPosition.transform(camera.worldMatrix);\n        this.gl.uniform3f(this.eyePositionUniform, cameraPosition.x, cameraPosition.y, cameraPosition.z);\n        this.gl.uniformMatrix4fv(this.modelUniform, false, transform.worldMatrix.mat);\n        this.gl.uniformMatrix4fv(this.viewUniform, false, camera.viewMatrix.mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n        this.gl.uniformMatrix4fv(this.normalUniform, false, transform.worldMatrix.inverse().transpose().mat);\n\n        // Set the material property uniforms\n        this.gl.uniform3f(this.kAmbientUniform, this.ambientColor.r, this.ambientColor.g, this.ambientColor.b);\n        this.gl.uniform3f(this.kDiffuseUniform, this.diffuseColor.r, this.diffuseColor.g, this.diffuseColor.b);\n        this.gl.uniform3f(this.kSpecularUniform,this.specularColor.r, this.specularColor.g, this.specularColor.b);\n        this.gl.uniform1f(this.shininessUniform, this.shininess);\n\n        // Set the light uniforms\n        this.gl.uniform1i(this.numLightsUniform, lightManager.getNumLights());\n        this.gl.uniform1iv(this.lightTypesUniform, lightManager.lightTypes);\n        this.gl.uniform3fv(this.lightPositionsUniform, lightManager.lightPositions);\n        this.gl.uniform3fv(this.ambientIntensitiesUniform, lightManager.ambientIntensities);\n        this.gl.uniform3fv(this.diffuseIntensitiesUniform, lightManager.diffuseIntensities);\n        this.gl.uniform3fv(this.specularIntensitiesUniform, lightManager.specularIntensities);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex normals\n        this.gl.enableVertexAttribArray(this.normalAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.normalBuffer);\n        this.gl.vertexAttribPointer(this.normalAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        if(this.texture)\n        {\n            // Activate the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 1);\n\n            // Set the texture\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n            this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n            // Set the texture coordinates\n            this.gl.enableVertexAttribArray(this.texCoordAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.texCoordBuffer);\n            this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n            this.gl.disableVertexAttribArray(this.texCoordAttribute);\n        }\n\n        // Draw the triangles\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n        this.gl.drawElements(this.gl.TRIANGLES, mesh.triangleCount*3, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    setColor(color: Color): void\n    {\n        this.ambientColor.copy(color);\n        this.diffuseColor.copy(color);\n        this.specularColor.copy(color);\n    }\n}", "// @ts-ignore\nimport wireframeVertexShader from '../shaders/wireframe.vert'\n// @ts-ignore\nimport wireframeFragmentShader from '../shaders/wireframe.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Color } from '../math/Color';\nimport { Matrix4 } from '../math/Matrix4'\n\n\nexport class WireframeMaterial extends Material3\n{\n    public static shader = new ShaderProgram(wireframeVertexShader, wireframeFragmentShader);\n    public static wireframeBuffers: Map<Mesh, WebGLBuffer> = new Map();\n\n    public color: Color;\n\n    private positionAttribute: number;\n    private modelViewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n    private colorUniform: WebGLUniformLocation | null;\n\n    constructor()\n    {\n        super();\n\n        this.color = new Color(1, 1, 1, 1);\n\n        WireframeMaterial.shader.initialize(this.gl);\n        this.positionAttribute = WireframeMaterial.shader.getAttribute(this.gl, 'position');\n        this.modelViewUniform = WireframeMaterial.shader.getUniform(this.gl, 'modelViewMatrix');\n        this.projectionUniform = WireframeMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n        this.colorUniform = WireframeMaterial.shader.getUniform(this.gl, 'color');\n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        this.initialize();\n            \n        // Switch to this shader\n        this.gl.useProgram(WireframeMaterial.shader.getProgram());\n\n        // Set the uniform matrices\n        this.gl.uniformMatrix4fv(this.modelViewUniform, false, Matrix4.multiply(transform.worldMatrix, camera.viewMatrix).mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n        this.gl.uniform4f(this.colorUniform, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        if(!WireframeMaterial.wireframeBuffers.get(mesh))\n        {\n            this.updateWireframeBuffer(mesh);\n        }\n\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, WireframeMaterial.wireframeBuffers.get(mesh) as WebGLBuffer);\n        this.gl.drawElements(this.gl.LINES, mesh.triangleCount * 6, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    setColor(color: Color): void\n    {\n        this.color.copy(color);\n    }\n\n    public updateWireframeBuffer(mesh: Mesh): void\n    {\n        let wireframeBuffer: WebGLBuffer | null | undefined;\n        wireframeBuffer = WireframeMaterial.wireframeBuffers.get(mesh);\n\n        if(!wireframeBuffer)\n        {\n            wireframeBuffer = this.gl.createBuffer();\n            \n            if(wireframeBuffer)\n                WireframeMaterial.wireframeBuffers.set(mesh, wireframeBuffer);\n        }\n\n        const indexArray = new Uint16Array(mesh.triangleCount * 3);\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n        this.gl.getBufferSubData(this.gl.ELEMENT_ARRAY_BUFFER, 0, indexArray);\n        const indices = [... indexArray];\n\n        const wireframeIndices: number[] = [];\n        for(let i=0; i < mesh.triangleCount; i++)\n        {\n            wireframeIndices.push(indices[i*3]);\n            wireframeIndices.push(indices[i*3+1]);\n\n            wireframeIndices.push(indices[i*3+1]);\n            wireframeIndices.push(indices[i*3+2]);\n\n            wireframeIndices.push(indices[i*3+2]);\n            wireframeIndices.push(indices[i*3]);\n        }\n\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, wireframeBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(wireframeIndices), this.gl.STATIC_DRAW);\n    }\n}", "import { Material3 } from './Material3';\nimport { WireframeMaterial } from './WireframeMaterial'\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3'\nimport { LightManager } from '../lights/LightManager';\nimport { Color } from '../math/Color' \nimport { SphereMesh } from '../geometry/3d/SphereMesh';\nimport { LineMaterial } from './LineMaterial';\nimport { Line3 } from '../geometry/3d/Line3';\nimport { BoundingBox3 } from '../math/BoundingBox3';\nimport { Vector3 } from '../math/Vector3';\nimport { Quaternion } from '../math/Quaternion';\n\nexport enum BoundingVolumeMode\n{\n    ORIENTED_BOUNDING_BOX,\n    AXIS_ALIGNED_BOUNDING_BOX,\n    BOUNDING_SPHERE\n}\n\nexport class BoundingVolumeMaterial extends Material3\n{\n    public mode: BoundingVolumeMode;\n    public color: Color;\n\n    public lineMaterial: LineMaterial\n    public wireframeMaterial: WireframeMaterial;\n\n    private sphere: SphereMesh;\n    private box: Line3;\n    \n    constructor(mode = BoundingVolumeMode.ORIENTED_BOUNDING_BOX, color = new Color(1, 1, 1, 1))\n    {\n        super();\n\n        this.mode = mode;\n        this.color = Color.copy(color);\n\n        this.sphere = new SphereMesh(1, 1);\n\n        const boundingBox = new BoundingBox3();\n        boundingBox.max.set(0.5, 0.5, 0.5);\n        boundingBox.min.set(-0.5, -0.5, -0.5);\n\n        this.box = new Line3();\n        this.box.createFromBox(boundingBox);\n\n        this.wireframeMaterial = new WireframeMaterial();\n        this.wireframeMaterial.color = color;\n        this.sphere.material = this.wireframeMaterial;\n\n        this.lineMaterial = new  LineMaterial();\n        this.lineMaterial.color = color;\n        this.box.material = this.lineMaterial;\n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(this.mode == BoundingVolumeMode.ORIENTED_BOUNDING_BOX)\n        {\n            this.box.position.copy(mesh.boundingBox.min);\n            this.box.position.add(mesh.boundingBox.max);\n\n            this.box.position.multiplyScalar(0.5);\n            this.box.scale.set(\n                mesh.boundingBox.max.x - mesh.boundingBox.min.x,\n                mesh.boundingBox.max.y - mesh.boundingBox.min.y,\n                mesh.boundingBox.max.z - mesh.boundingBox.min.z\n            );\n            this.box.parent = mesh;\n            this.box.traverseSceneGraph();\n            this.box.draw(mesh, camera, lightManager);\n        }\n        else if(this.mode == BoundingVolumeMode.AXIS_ALIGNED_BOUNDING_BOX)\n        {\n            const abb = new BoundingBox3();\n            abb.copy(mesh.boundingBox);\n\n            const [worldPosition, worldRotation, worldScale] = mesh.worldMatrix.decompose();\n            abb.transform(worldPosition, worldRotation, worldScale);\n\n            this.box.position.copy(abb.min);\n            this.box.position.add(abb.max);\n            this.box.position.multiplyScalar(0.5);\n            this.box.scale.set(\n                abb.max.x - abb.min.x,\n                abb.max.y - abb.min.y,\n                abb.max.z - abb.min.z\n            );\n            this.box.matrix.compose(this.box.position, this.box.rotation, this.box.scale)\n            this.box.worldMatrix.copy(this.box.matrix);\n            this.box.draw(mesh, camera, lightManager);\n        }\n        else if(this.mode == BoundingVolumeMode.BOUNDING_SPHERE)\n        {\n            const [worldPosition, worldRotation, worldScale] = mesh.worldMatrix.decompose();\n            this.sphere.position.copy(worldPosition);\n            this.sphere.position.add(mesh.boundingSphere.center);\n            this.sphere.scale.set(mesh.boundingSphere.radius, mesh.boundingSphere.radius, mesh.boundingSphere.radius);\n            this.sphere.matrix.compose(this.sphere.position, this.sphere.rotation, this.sphere.scale)\n            this.sphere.worldMatrix.copy(this.sphere.matrix);\n            this.sphere.draw(mesh, camera, lightManager);\n        }\n    }\n\n    setColor(color: Color): void\n    {\n        this.color.copy(color);\n    }\n}", "// @ts-ignore\nimport morphVertexShader from '../shaders/morph.vert'\n// @ts-ignore\nimport morphFragmentShader from '../shaders/morph.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Texture } from './Texture';\nimport { Vector3 } from '../math/Vector3'\nimport { Color } from '../math/Color' \n\nexport class MorphMaterial extends Material3\n{\n    public static shader = new ShaderProgram(morphVertexShader, morphFragmentShader);\n    private static wireframeBuffers: Map<Mesh, WebGLBuffer> = new Map();\n\n    public texture: Texture | null;\n    public ambientColor: Color;\n    public diffuseColor: Color;\n    public specularColor: Color;\n    public shininess: number;\n\n    private kAmbientUniform: WebGLUniformLocation | null;\n    private kDiffuseUniform: WebGLUniformLocation | null;\n    private kSpecularUniform: WebGLUniformLocation | null;\n    private shininessUniform: WebGLUniformLocation | null;\n    \n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private eyePositionUniform: WebGLUniformLocation | null;\n    private modelUniform: WebGLUniformLocation | null;\n    private viewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n    private normalUniform: WebGLUniformLocation | null;\n\n    private numLightsUniform: WebGLUniformLocation | null;\n    private lightTypesUniform: WebGLUniformLocation | null;\n    private lightPositionsUniform: WebGLUniformLocation | null;\n    private ambientIntensitiesUniform: WebGLUniformLocation | null;\n    private diffuseIntensitiesUniform: WebGLUniformLocation | null;\n    private specularIntensitiesUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private normalAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    public morphAlpha: number;\n    private morphAlphaUniform: WebGLUniformLocation | null;\n    private morphTargetPositionAttribute: number;\n    private morphTargetNormalAttribute: number;\n\n    public wireframe: boolean;\n\n    constructor()\n    {\n        super();\n\n        this.texture = null;\n        this.ambientColor = new Color(1, 1, 1);\n        this.diffuseColor = new Color(1, 1, 1);\n        this.specularColor = new Color(0, 0, 0);\n        this.shininess = 30;\n\n        MorphMaterial.shader.initialize(this.gl);\n\n        this.kAmbientUniform = MorphMaterial.shader.getUniform(this.gl, 'kAmbient');\n        this.kDiffuseUniform = MorphMaterial.shader.getUniform(this.gl, 'kDiffuse');\n        this.kSpecularUniform = MorphMaterial.shader.getUniform(this.gl, 'kSpecular');\n        this.shininessUniform = MorphMaterial.shader.getUniform(this.gl, 'shininess');\n\n        this.textureUniform = MorphMaterial.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = MorphMaterial.shader.getUniform(this.gl, 'useTexture');\n\n        this.eyePositionUniform = MorphMaterial.shader.getUniform(this.gl, 'eyePosition');\n        this.viewUniform = MorphMaterial.shader.getUniform(this.gl, 'viewMatrix');\n        this.modelUniform = MorphMaterial.shader.getUniform(this.gl, 'modelMatrix');\n        this.projectionUniform = MorphMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n        this.normalUniform = MorphMaterial.shader.getUniform(this.gl, 'normalMatrix');\n\n        this.numLightsUniform = MorphMaterial.shader.getUniform(this.gl, 'numLights');\n        this.lightTypesUniform = MorphMaterial.shader.getUniform(this.gl, 'lightTypes');\n        this.lightPositionsUniform = MorphMaterial.shader.getUniform(this.gl, 'lightPositions');\n        this.ambientIntensitiesUniform = MorphMaterial.shader.getUniform(this.gl, 'ambientIntensities');\n        this.diffuseIntensitiesUniform = MorphMaterial.shader.getUniform(this.gl, 'diffuseIntensities');\n        this.specularIntensitiesUniform = MorphMaterial.shader.getUniform(this.gl, 'specularIntensities');\n\n        this.positionAttribute = MorphMaterial.shader.getAttribute(this.gl, 'position');\n        this.normalAttribute = MorphMaterial.shader.getAttribute(this.gl, 'normal');\n        this.colorAttribute = MorphMaterial.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = MorphMaterial.shader.getAttribute(this.gl, 'texCoord');   \n\n        this.morphAlpha = 0;\n        this.morphAlphaUniform = MorphMaterial.shader.getUniform(this.gl, 'morphAlpha');\n        this.morphTargetPositionAttribute = MorphMaterial.shader.getAttribute(this.gl, 'morphTargetPosition');\n        this.morphTargetNormalAttribute = MorphMaterial.shader.getAttribute(this.gl, 'morphTargetNormal');   \n\n        this.wireframe = false;\n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        // Initialize all the gl parameters for this shader\n        this.initialize();\n\n        // Switch to this shader\n        this.gl.useProgram(MorphMaterial.shader.getProgram());\n\n        // Set the camera uniforms\n        const cameraPosition = new Vector3();\n        cameraPosition.transform(camera.worldMatrix);\n        this.gl.uniform3f(this.eyePositionUniform, cameraPosition.x, cameraPosition.y, cameraPosition.z);\n        this.gl.uniformMatrix4fv(this.modelUniform, false, transform.worldMatrix.mat);\n        this.gl.uniformMatrix4fv(this.viewUniform, false, camera.viewMatrix.mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n        this.gl.uniformMatrix4fv(this.normalUniform, false, transform.worldMatrix.inverse().transpose().mat);\n\n        // Set the material property uniforms\n        this.gl.uniform3f(this.kAmbientUniform, this.ambientColor.r, this.ambientColor.g, this.ambientColor.b);\n        this.gl.uniform3f(this.kDiffuseUniform, this.diffuseColor.r, this.diffuseColor.g, this.diffuseColor.b);\n        this.gl.uniform3f(this.kSpecularUniform,this.specularColor.r, this.specularColor.g, this.specularColor.b);\n        this.gl.uniform1f(this.shininessUniform, this.shininess);\n\n        // Set the light uniforms\n        this.gl.uniform1i(this.numLightsUniform, lightManager.getNumLights());\n        this.gl.uniform1iv(this.lightTypesUniform, lightManager.lightTypes);\n        this.gl.uniform3fv(this.lightPositionsUniform, lightManager.lightPositions);\n        this.gl.uniform3fv(this.ambientIntensitiesUniform, lightManager.ambientIntensities);\n        this.gl.uniform3fv(this.diffuseIntensitiesUniform, lightManager.diffuseIntensities);\n        this.gl.uniform3fv(this.specularIntensitiesUniform, lightManager.specularIntensities);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex normals\n        this.gl.enableVertexAttribArray(this.normalAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.normalBuffer);\n        this.gl.vertexAttribPointer(this.normalAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        // Update the morph targets\n        this.gl.uniform1f(this.morphAlphaUniform, this.morphAlpha);\n        if(this.morphAlpha > 0)\n        {\n            // Set the morph target positions\n            this.gl.enableVertexAttribArray(this.morphTargetPositionAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.morphTargetPositionBuffer);\n            this.gl.vertexAttribPointer(this.morphTargetPositionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n            // Set the morph target normals\n            this.gl.enableVertexAttribArray(this.morphTargetNormalAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.morphTargetNormalBuffer);\n            this.gl.vertexAttribPointer(this.morphTargetNormalAttribute, 3, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            this.gl.disableVertexAttribArray(this.morphTargetPositionAttribute);\n            this.gl.disableVertexAttribArray(this.morphTargetNormalAttribute);\n        }\n\n        if(this.wireframe)\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n            this.gl.disableVertexAttribArray(this.texCoordAttribute);\n\n            if(!MorphMaterial.wireframeBuffers.get(mesh))\n            {\n                this.updateWireframeBuffer(mesh);\n            }\n\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, MorphMaterial.wireframeBuffers.get(mesh) as WebGLBuffer);\n            this.gl.drawElements(this.gl.LINES, mesh.triangleCount * 6, this.gl.UNSIGNED_SHORT, 0);\n        }\n        else\n        {\n            if(this.texture)\n            {\n                // Activate the texture in the shader\n                this.gl.uniform1i(this.useTextureUniform, 1);\n\n                // Set the texture\n                this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n                this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n                // Set the texture coordinates\n                this.gl.enableVertexAttribArray(this.texCoordAttribute);\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.texCoordBuffer);\n                this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n            }\n            else\n            {\n                // Disable the texture in the shader\n                this.gl.uniform1i(this.useTextureUniform, 0);\n                this.gl.disableVertexAttribArray(this.texCoordAttribute);\n            }\n\n            // Draw the triangles\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n            this.gl.drawElements(this.gl.TRIANGLES, mesh.triangleCount*3, this.gl.UNSIGNED_SHORT, 0);\n        }\n    }\n\n    setColor(color: Color): void\n    {\n        this.ambientColor.copy(color);\n        this.diffuseColor.copy(color);\n        this.specularColor.copy(color);\n    }\n\n    public updateWireframeBuffer(mesh: Mesh): void\n    {\n        let wireframeBuffer: WebGLBuffer | null | undefined;\n        wireframeBuffer = MorphMaterial.wireframeBuffers.get(mesh);\n\n        if(!wireframeBuffer)\n        {\n            wireframeBuffer = this.gl.createBuffer();\n            \n            if(wireframeBuffer)\n                MorphMaterial.wireframeBuffers.set(mesh, wireframeBuffer);\n        }\n\n        const indexArray = new Uint16Array(mesh.triangleCount * 3);\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n        this.gl.getBufferSubData(this.gl.ELEMENT_ARRAY_BUFFER, 0, indexArray);\n        const indices = [... indexArray];\n\n        const wireframeIndices: number[] = [];\n        for(let i=0; i < mesh.triangleCount; i++)\n        {\n            wireframeIndices.push(indices[i*3]);\n            wireframeIndices.push(indices[i*3+1]);\n\n            wireframeIndices.push(indices[i*3+1]);\n            wireframeIndices.push(indices[i*3+2]);\n\n            wireframeIndices.push(indices[i*3+2]);\n            wireframeIndices.push(indices[i*3]);\n        }\n\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, wireframeBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(wireframeIndices), this.gl.STATIC_DRAW);\n    }\n}", "import { GfxApp } from '../core/GfxApp';\n\n/**\n * Represents an image texture\n * \n * @class Texture\n */\nexport class Texture\n{\n    private static numTextures = 0;\n\n    protected readonly gl: WebGL2RenderingContext;\n\n    /**\n     * The internal object used by WebGL to draw this texture\n     */\n    public texture: WebGLTexture | null;\n\n    /**\n     * The WebGL texture ID used to draw this texture\n     */\n    public id: number;\n\n    /**\n     * Create a new instance of a texture.\n     * \n     * @param url URL to load the texture from (can be absolute, e.g.\n     * \"http://unlikely-url.com/some-image.jpg\", or relative, e.g.\n     * \"./some-image.jpg\"). Can be null to start out with, in which case the\n     * texture will be empty.\n     */\n    constructor(url: string | null = null)\n    {\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.texture = this.gl.createTexture();\n        this.id = Texture.numTextures;\n        Texture.numTextures++;\n\n        this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, \n            this.gl.UNSIGNED_BYTE, new Uint8Array([255, 0, 255, 255]));\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.REPEAT);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.REPEAT);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST_MIPMAP_LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        \n        if(url)\n        {\n            this.load(url);\n        }\n    }\n\n    /**\n     * Load an image into this texture.\n     * \n     * @param url URL to load the texture from (can be absolute, e.g.\n     * \"http://unlikely-url.com/some-image.jpg\", or relative, e.g.\n     * \"./some-image.jpg\"). Can be null to start out with, in which case the\n     * texture will be empty.\n     */\n    load(url: string): void\n    {\n        GfxApp.getInstance().assetManager.requestedAssets.push(url);\n\n        const image = new Image();\n        image.addEventListener('load', (event: Event)=>{ this.imageLoaded(image, url) }, false);\n        image.addEventListener('error', (event: Event)=>{ this.imageNotFound(url) }, false);\n        image.src = url;\n    }\n\n    /**\n     * Callback function for image loaded events\n     * \n     * @param image HTML DOM image element produced by loading the image texture\n     * @param url Original URL the image was loaded from (used as an internal identifier for the image asset)\n     */\n    imageLoaded(image: HTMLImageElement, url: string): void\n    {\n        GfxApp.getInstance().assetManager.loadedAssets.push(url);\n\n        this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n    }\n\n    /**\n     * Callback function for when the requested image cannot be found (load error)\n     * \n     * @param url Original URL the image was loaded from (used as an internal identifier for the errored image asset)\n     */\n    imageNotFound(url: string): void\n    {\n        GfxApp.getInstance().assetManager.errorAssets.push(url);\n    }\n\n    /**\n     * Control the minification filter (sampling if a texture is shown at less than its original size)\n     * \n     * @param linear Use linear filtering\n     * @param mipmap Use mipmapping\n     */\n    setMinFilter(linear: boolean, mipmap: boolean)\n    {\n        this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n\n        if(linear)\n        {\n            if(mipmap)\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST_MIPMAP_LINEAR);\n            else\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n        }\n        else\n        {\n            if(mipmap)\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST_MIPMAP_NEAREST);\n            else\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n        }\n    }\n\n    /**\n     * Control the magnification filter (sampling if a texture is shown at greater than its original size)\n     * \n     * @param linear Use linear filtering\n     */\n    setMagFilter(linear: boolean)\n    {\n        this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n\n        if(linear)\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        else\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);\n    }\n\n    /**\n     * Set the wrapping mode for the texture.\n     * \n     * @param repeat Repeat the texture beyond its bounds or just show it once\n     */\n    setWrapping(repeat: boolean)\n    {\n        this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n        \n        if(repeat)\n        {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.REPEAT);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.REPEAT);\n        }\n        else\n        {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        }\n    }\n}", "import { Texture } from './Texture'\n\nexport class Text extends Texture\n{\n    public text: string;\n    public font: string;\n    public fillStyle: string;\n    public strokeStyle: string;\n    public backgroundStyle: string;\n    public align: CanvasTextAlign;\n    public baseline: CanvasTextBaseline;\n\n    public width: number;\n    public height: number;\n    public strokeWidth: number;\n\n    private textCanvas: CanvasRenderingContext2D | null;\n\n    constructor(text: string, width: number, height: number, font = '24px monospace', \n                fillStyle = 'black', backgroundStyle = '', strokeStyle = '', strokeWidth = 1,\n                align: CanvasTextAlign = 'center', baseline: CanvasTextBaseline = 'middle')\n    {\n        super();\n\n        this.text = text;\n        this.width = width;\n        this.height = height;\n        this.font = font;\n        this.fillStyle = fillStyle;\n        this.backgroundStyle = backgroundStyle;\n        this.strokeStyle = strokeStyle;\n        this.strokeWidth = strokeWidth;\n        this.align = align;\n        this.baseline = baseline;\n        \n        this.textCanvas = document.createElement('canvas').getContext('2d');\n        this.updateTextureImage();\n    }\n\n    public updateTextureImage(): void\n    {\n        if(this.textCanvas)\n        {   \n            this.textCanvas.canvas.width = this.width;\n            this.textCanvas.canvas.height = this.height;\n            this.textCanvas.font = this.font;\n            this.textCanvas.textAlign = this.align;\n            this.textCanvas.textBaseline = this.baseline;\n\n            this.textCanvas.clearRect(0, 0, this.width, this.height);\n\n            if(this.backgroundStyle != '')\n            {\n                this.textCanvas.fillStyle = this.backgroundStyle;\n                this.textCanvas.fillRect(0, 0, this.width, this.height);\n            }\n\n            if(this.fillStyle != '')\n            {\n                this.textCanvas.fillStyle = this.fillStyle;\n                this.textCanvas.fillText(this.text, this.width / 2, this.height / 2);\n            }\n\n            if(this.strokeStyle != '' && this.strokeWidth > 0)\n            {\n                this.textCanvas.strokeStyle = this.strokeStyle;\n                this.textCanvas.lineWidth = this.strokeWidth;\n                this.textCanvas.strokeText(this.text, this.width / 2, this.height / 2);\n            }\n\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.textCanvas.canvas);\n            this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        }\n    }\n}", "import { MathUtils } from './MathUtils';\nimport { Vector3 } from './Vector3'\n\nexport class LinearPath3\n{\n    public controlPoints: Vector3[];\n\n/**\n * Constructs a new LinearPath3 object\n */\n    constructor()\n    {\n        this.controlPoints = [];\n    }\n\n/**\n * Calculates a point along the linear path\n * \n * @param segment - The segment index of the linear path\n * @param t - A float value in the range [0, 1]\n * @returns The calculated point, or null if the segment index is out of bounds\n */\n    getPoint(segment: number, t: number): Vector3 | null\n    {\n        if(segment < this.controlPoints.length - 1)\n        {\n            return Vector3.lerp(this.controlPoints[segment], this.controlPoints[segment+1], MathUtils.clamp(t, 0, 1));\n        }\n        else\n        {\n            return null;\n        }\n    }\n}", "import { MathUtils } from './MathUtils';\nimport { Vector3 } from './Vector3'\n\n// Smooth path generated using a Catmull-Rom spline\n// https://qroph.github.io/2018/07/30/smooth-paths-using-catmull-rom-splines.html\n// https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n\nexport class CurvePath3\n{\n    public controlPoints: Vector3[];\n    public alpha: number;\n    public tension: number;\n\n/**\n * Constructs a CurvePath3 object with the given alpha and tension values\n * \n * @param alpha - The alpha value for the curve\n * @param tension - The tension value for the curve\n */\n    constructor(alpha = 0.5, tension = 0)\n    {\n        this.controlPoints = [];\n        this.alpha = alpha;\n        this.tension = tension;\n    }\n\n/**\n * Computes a point on the curve from the given segment and parameter values\n * \n * @param segment - The segment to calculate the point from\n * @param t - The parameter value from 0-1 to calculate the point from\n * @returns The point on the curve at the given segment and parameter value, or null if the segment is out of range\n */    \n    getPoint(segment: number, t: number): Vector3 | null\n    {\n        if(segment == 0)\n        {\n            const v = Vector3.subtract(this.controlPoints[segment+1], this.controlPoints[segment]);\n            const firstPoint = Vector3.subtract(this.controlPoints[segment], v);\n            \n            return this.computePoint(\n                firstPoint,\n                this.controlPoints[segment],\n                this.controlPoints[segment+1],\n                this.controlPoints[segment+2],\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        if(segment < this.controlPoints.length - 2)\n        {\n            return this.computePoint(\n                this.controlPoints[segment-1],\n                this.controlPoints[segment],\n                this.controlPoints[segment+1],\n                this.controlPoints[segment+2],\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        else if(segment == this.controlPoints.length - 2)\n        {\n            const v = Vector3.subtract(this.controlPoints[segment+1], this.controlPoints[segment]);\n            const lastPoint = Vector3.add(this.controlPoints[segment+1], v);\n\n            return this.computePoint(\n                this.controlPoints[segment-1],\n                this.controlPoints[segment],\n                this.controlPoints[segment+1],\n                lastPoint,\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        else if(segment == this.controlPoints.length - 1)\n        {\n            const v = Vector3.subtract(this.controlPoints[segment], this.controlPoints[segment-1]);\n            const secondToLastPoint = Vector3.add(this.controlPoints[segment], v);\n            const lastPoint = Vector3.add(secondToLastPoint, v);\n\n            return this.computePoint(\n                this.controlPoints[segment-1],\n                this.controlPoints[segment],\n                secondToLastPoint,\n                lastPoint,\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n\n/**\n * Computes a point on the curve from the given control points and parameter values\n * \n * @param p0 - The first control point\n * @param p1 - The second control point\n * @param p2 - The third control point\n * @param p3 - The fourth control point\n * @param t - The parameter value from 0-1 to calculate the point from\n * @returns The point on the curve at the given control points and parameter value\n */\n    private computePoint(p0: Vector3, p1: Vector3, p2: Vector3, p3: Vector3, t: number): Vector3\n    {\n        const t01 = Math.pow(p0.distanceTo(p1), this.alpha);\n        const t12 = Math.pow(p1.distanceTo(p2), this.alpha);\n        const t23 = Math.pow(p2.distanceTo(p3), this.alpha);\n\n        const p1p0 = Vector3.subtract(p1, p0);\n        const p1p2 = Vector3.subtract(p1, p2);\n        const p2p0 = Vector3.subtract(p2, p0);\n        const p2p1 = Vector3.subtract(p2, p1);\n        const p3p1 = Vector3.subtract(p3, p1);\n        const p3p2 = Vector3.subtract(p3, p2);\n\n        const m1 = Vector3.multiplyScalar(p1p0, 1 / t01);\n        m1.subtract(Vector3.multiplyScalar(p2p0, 1 / (t01 + t12)));\n        m1.multiplyScalar(t12);\n        m1.add(p2p1);\n        m1.multiplyScalar(1 - this.tension);\n\n        const m2 = Vector3.multiplyScalar(p3p2, 1 / t23);\n        m2.subtract(Vector3.multiplyScalar(p3p1, 1 / (t12 +  t23)));\n        m2.multiplyScalar(t12);\n        m2.add(p2p1);\n        m2.multiplyScalar(1 - this.tension);\n\n        const a = Vector3.multiplyScalar(p1p2, 2);\n        a.add(m1);\n        a.add(m2);\n\n        const b = Vector3.multiplyScalar(p1p2, -3);\n        b.subtract(m1);\n        b.subtract(m1);\n        b.subtract(m2);\n\n        const c = m1;\n        const d = p1;\n\n        const result = Vector3.multiplyScalar(a, t * t * t);\n        result.add(Vector3.multiplyScalar(b, t * t));\n        result.add(Vector3.multiplyScalar(c, t));\n        result.add(d);\n\n        return result;\n    }\n}", "import { MathUtils } from './MathUtils';\nimport { Vector2 } from './Vector2'\n\nexport class LinearPath2\n{\n    /**\n     * An array of Vector2 objects representing the control points of the path\n     */\n    public controlPoints: Vector2[];\n\n    /**\n     * Constructor for the LinearPath2 class\n     */\n    constructor()\n    {\n        this.controlPoints = [];\n    }\n\n    /**\n     * Gets the point at a given distance along the path\n     * \n     * @param segment - The segment index\n     * @param t - The value (between 0 and 1) along the segment to get the point\n     * @returns The point at the given distance on the path, or null if the segment index is out of bounds\n     */\n    getPoint(segment: number, t: number): Vector2 | null\n    {\n        if(segment < this.controlPoints.length - 1)\n        {\n            return Vector2.lerp(this.controlPoints[segment], this.controlPoints[segment+1], MathUtils.clamp(t, 0, 1));\n        }\n        else\n        {\n            return null;\n        }\n    }\n}", "import { MathUtils } from './MathUtils';\nimport { Vector2 } from './Vector2'\n\n// Smooth path generated using a Catmull-Rom spline\n// https://qroph.github.io/2018/07/30/smooth-paths-using-catmull-rom-splines.html\n// https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n\nexport class CurvePath2\n{\n    public controlPoints: Vector2[];\n    public alpha: number;\n    public tension: number;\n\n    /** \n     * Constructor for the CurvePath2 class.\n     * \n     * @param alpha - The alpha parameter for the curve calculation (default 0.5)\n     * @param tension - The tension parameter for the curve calculation (default 0) \n     */\n    constructor(alpha = 0.5, tension = 0)\n    {\n        this.controlPoints = [];\n        this.alpha = alpha;\n        this.tension = tension;\n    }\n\n    /**\n     * Computes a point on the curve at a given segment and t value.\n     * \n     * @param segment - The index of the control point of the segment\n     * @param t - The parameter t in the range [0,1]\n     * @returns The point on the curve at the specified segment and t value\n     */\n    getPoint(segment: number, t: number): Vector2 | null\n    {\n        if(segment == 0)\n        {\n            const v = Vector2.subtract(this.controlPoints[segment+1], this.controlPoints[segment]);\n            const firstPoint = Vector2.subtract(this.controlPoints[segment], v);\n            \n            return this.computePoint(\n                firstPoint,\n                this.controlPoints[segment],\n                this.controlPoints[segment+1],\n                this.controlPoints[segment+2],\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        if(segment < this.controlPoints.length - 2)\n        {\n            return this.computePoint(\n                this.controlPoints[segment-1],\n                this.controlPoints[segment],\n                this.controlPoints[segment+1],\n                this.controlPoints[segment+2],\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        else if(segment == this.controlPoints.length - 2)\n        {\n            const v = Vector2.subtract(this.controlPoints[segment+1], this.controlPoints[segment]);\n            const lastPoint = Vector2.add(this.controlPoints[segment+1], v);\n\n            return this.computePoint(\n                this.controlPoints[segment-1],\n                this.controlPoints[segment],\n                this.controlPoints[segment+1],\n                lastPoint,\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        else if(segment == this.controlPoints.length - 1)\n        {\n            const v = Vector2.subtract(this.controlPoints[segment], this.controlPoints[segment-1]);\n            const secondToLastPoint = Vector2.add(this.controlPoints[segment], v);\n            const lastPoint = Vector2.add(secondToLastPoint, v);\n\n            return this.computePoint(\n                this.controlPoints[segment-1],\n                this.controlPoints[segment],\n                secondToLastPoint,\n                lastPoint,\n                MathUtils.clamp(t, 0, 1)\n            );\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n\n    /**\n     * Computes a point on a CurvePath2 based on the given parameters\n     * \n     * @param p0 - The first Vector2 object\n     * @param p1 - The second Vector2 object\n     * @param p2 - The third Vector2 object\n     * @param p3 - The fourth Vector2 object\n     * @param t - The t value used to calculate the point\n     * @returns The Vector2 that represents the point on the CurvePath2\n     */\n    private computePoint(p0: Vector2, p1: Vector2, p2: Vector2, p3: Vector2, t: number): Vector2\n    {\n        const t01 = Math.pow(p0.distanceTo(p1), this.alpha);\n        const t12 = Math.pow(p1.distanceTo(p2), this.alpha);\n        const t23 = Math.pow(p2.distanceTo(p3), this.alpha);\n\n        const p1p0 = Vector2.subtract(p1, p0);\n        const p1p2 = Vector2.subtract(p1, p2);\n        const p2p0 = Vector2.subtract(p2, p0);\n        const p2p1 = Vector2.subtract(p2, p1);\n        const p3p1 = Vector2.subtract(p3, p1);\n        const p3p2 = Vector2.subtract(p3, p2);\n\n        const m1 = Vector2.multiplyScalar(p1p0, 1 / t01);\n        m1.subtract(Vector2.multiplyScalar(p2p0, 1 / (t01 + t12)));\n        m1.multiplyScalar(t12);\n        m1.add(p2p1);\n        m1.multiplyScalar(1 - this.tension);\n\n        const m2 = Vector2.multiplyScalar(p3p2, 1 / t23);\n        m2.subtract(Vector2.multiplyScalar(p3p1, 1 / (t12 +  t23)));\n        m2.multiplyScalar(t12);\n        m2.add(p2p1);\n        m2.multiplyScalar(1 - this.tension);\n\n        const a = Vector2.multiplyScalar(p1p2, 2);\n        a.add(m1);\n        a.add(m2);\n\n        const b = Vector2.multiplyScalar(p1p2, -3);\n        b.subtract(m1);\n        b.subtract(m1);\n        b.subtract(m2);\n\n        const c = m1;\n        const d = p1;\n\n        const result = Vector2.multiplyScalar(a, t * t * t);\n        result.add(Vector2.multiplyScalar(b, t * t));\n        result.add(Vector2.multiplyScalar(c, t));\n        result.add(d);\n\n        return result;\n    }\n}"],
  "mappings": "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",
  "names": ["Viewport", "IntersectionMode3", "IntersectionMode2", "Side", "gouraud_default", "unlit_default", "shape_default", "LineMode3", "LineMode2", "particles2_default", "LightType", "phong_default", "wireframe_default", "BoundingVolumeMode", "morph_default"]
}
